// © 2011 IDesign Inc. 
//Questions? Comments? go to 
//http://www.idesign.net

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.20506.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Configuration;

static class DataAccessUtil
{
   public static string GetConnectionString()
   {
      ConnectionStringSettingsCollection collection = ConfigurationManager.ConnectionStrings;
      ConnectionStringSettings connection = collection[0];
      return connection.ConnectionString;
   }
}

[Serializable()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.ComponentModel.ToolboxItem(true)]
[System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
[System.Xml.Serialization.XmlRootAttribute("AspNetDbDataSet")]
[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
[System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage","CA2240:ImplementISerializableCorrectly")]
public partial class AspNetDbDataSet : System.Data.DataSet
{

   private aspnet_ApplicationsDataTable tableaspnet_Applications;

   private aspnet_MembershipDataTable tableaspnet_Membership;

   private aspnet_PathsDataTable tableaspnet_Paths;

   private aspnet_PersonalizationAllUsersDataTable tableaspnet_PersonalizationAllUsers;

   private aspnet_PersonalizationPerUserDataTable tableaspnet_PersonalizationPerUser;

   private aspnet_ProfileDataTable tableaspnet_Profile;

   private aspnet_RolesDataTable tableaspnet_Roles;

   private aspnet_SchemaVersionsDataTable tableaspnet_SchemaVersions;

   private aspnet_UsersDataTable tableaspnet_Users;

   private aspnet_UsersInRolesDataTable tableaspnet_UsersInRoles;

   private aspnet_WebEvent_EventsDataTable tableaspnet_WebEvent_Events;

   private System.Data.DataRelation relationFK__aspnet_Me__Appli__0EA330E9;

   private System.Data.DataRelation relationFK__aspnet_Me__UserI__0F975522;

   private System.Data.DataRelation relationFK__aspnet_Pa__Appli__412EB0B6;

   private System.Data.DataRelation relationFK__aspnet_Pe__PathI__46E78A0C;

   private System.Data.DataRelation relationFK__aspnet_Pe__PathI__4AB81AF0;

   private System.Data.DataRelation relationFK__aspnet_Pe__UserI__4BAC3F29;

   private System.Data.DataRelation relationFK__aspnet_Pr__UserI__24927208;

   private System.Data.DataRelation relationFK__aspnet_Ro__Appli__2E1BDC42;

   private System.Data.DataRelation relationFK__aspnet_Us__Appli__7E6CC920;

   private System.Data.DataRelation relationFK__aspnet_Us__RoleI__32E0915F;

   private System.Data.DataRelation relationFK__aspnet_Us__UserI__31EC6D26;

   private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;

   [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage","CA2214:DoNotCallOverridableMethodsInConstructors")]
   public AspNetDbDataSet()
   {
      this.BeginInit();
      this.InitClass();
      System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
      base.Tables.CollectionChanged += schemaChangedHandler;
      base.Relations.CollectionChanged += schemaChangedHandler;
      this.EndInit();
   }

   [System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Usage","CA2214:DoNotCallOverridableMethodsInConstructors")]
   protected AspNetDbDataSet(System.Runtime.Serialization.SerializationInfo info,System.Runtime.Serialization.StreamingContext context)
      :
           base(info,context)
   {
      if((this.IsBinarySerialized(info,context) == true))
      {
         this.InitVars(false);
         System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
         this.Tables.CollectionChanged += schemaChangedHandler1;
         this.Relations.CollectionChanged += schemaChangedHandler1;
         return;
      }
      string strSchema = ((string)(info.GetValue("XmlSchema",typeof(string))));
      if((this.DetermineSchemaSerializationMode(info,context) == System.Data.SchemaSerializationMode.IncludeSchema))
      {
         System.Data.DataSet ds = new System.Data.DataSet();
         ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
         if((ds.Tables["aspnet_Applications"] != null))
         {
            base.Tables.Add(new aspnet_ApplicationsDataTable(ds.Tables["aspnet_Applications"]));
         }
         if((ds.Tables["aspnet_Membership"] != null))
         {
            base.Tables.Add(new aspnet_MembershipDataTable(ds.Tables["aspnet_Membership"]));
         }
         if((ds.Tables["aspnet_Paths"] != null))
         {
            base.Tables.Add(new aspnet_PathsDataTable(ds.Tables["aspnet_Paths"]));
         }
         if((ds.Tables["aspnet_PersonalizationAllUsers"] != null))
         {
            base.Tables.Add(new aspnet_PersonalizationAllUsersDataTable(ds.Tables["aspnet_PersonalizationAllUsers"]));
         }
         if((ds.Tables["aspnet_PersonalizationPerUser"] != null))
         {
            base.Tables.Add(new aspnet_PersonalizationPerUserDataTable(ds.Tables["aspnet_PersonalizationPerUser"]));
         }
         if((ds.Tables["aspnet_Profile"] != null))
         {
            base.Tables.Add(new aspnet_ProfileDataTable(ds.Tables["aspnet_Profile"]));
         }
         if((ds.Tables["aspnet_Roles"] != null))
         {
            base.Tables.Add(new aspnet_RolesDataTable(ds.Tables["aspnet_Roles"]));
         }
         if((ds.Tables["aspnet_SchemaVersions"] != null))
         {
            base.Tables.Add(new aspnet_SchemaVersionsDataTable(ds.Tables["aspnet_SchemaVersions"]));
         }
         if((ds.Tables["aspnet_Users"] != null))
         {
            base.Tables.Add(new aspnet_UsersDataTable(ds.Tables["aspnet_Users"]));
         }
         if((ds.Tables["aspnet_UsersInRoles"] != null))
         {
            base.Tables.Add(new aspnet_UsersInRolesDataTable(ds.Tables["aspnet_UsersInRoles"]));
         }
         if((ds.Tables["aspnet_WebEvent_Events"] != null))
         {
            base.Tables.Add(new aspnet_WebEvent_EventsDataTable(ds.Tables["aspnet_WebEvent_Events"]));
         }
         this.DataSetName = ds.DataSetName;
         this.Prefix = ds.Prefix;
         this.Namespace = ds.Namespace;
         this.Locale = ds.Locale;
         this.CaseSensitive = ds.CaseSensitive;
         this.EnforceConstraints = ds.EnforceConstraints;
         this.Merge(ds,false,System.Data.MissingSchemaAction.Add);
         this.InitVars();
      }
      else
      {
         this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
      }
      this.GetSerializationData(info,context);
      System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
      base.Tables.CollectionChanged += schemaChangedHandler;
      this.Relations.CollectionChanged += schemaChangedHandler;
   }

   [System.ComponentModel.Browsable(false)]
   [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
   public aspnet_ApplicationsDataTable aspnet_Applications
   {
      get
      {
         return this.tableaspnet_Applications;
      }
   }

   [System.ComponentModel.Browsable(false)]
   [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
   public aspnet_MembershipDataTable aspnet_Membership
   {
      get
      {
         return this.tableaspnet_Membership;
      }
   }

   [System.ComponentModel.Browsable(false)]
   [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
   public aspnet_PathsDataTable aspnet_Paths
   {
      get
      {
         return this.tableaspnet_Paths;
      }
   }

   [System.ComponentModel.Browsable(false)]
   [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
   public aspnet_PersonalizationAllUsersDataTable aspnet_PersonalizationAllUsers
   {
      get
      {
         return this.tableaspnet_PersonalizationAllUsers;
      }
   }

   [System.ComponentModel.Browsable(false)]
   [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
   public aspnet_PersonalizationPerUserDataTable aspnet_PersonalizationPerUser
   {
      get
      {
         return this.tableaspnet_PersonalizationPerUser;
      }
   }

   [System.ComponentModel.Browsable(false)]
   [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
   public aspnet_ProfileDataTable aspnet_Profile
   {
      get
      {
         return this.tableaspnet_Profile;
      }
   }

   [System.ComponentModel.Browsable(false)]
   [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
   public aspnet_RolesDataTable aspnet_Roles
   {
      get
      {
         return this.tableaspnet_Roles;
      }
   }

   [System.ComponentModel.Browsable(false)]
   [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
   public aspnet_SchemaVersionsDataTable aspnet_SchemaVersions
   {
      get
      {
         return this.tableaspnet_SchemaVersions;
      }
   }

   [System.ComponentModel.Browsable(false)]
   [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
   public aspnet_UsersDataTable aspnet_Users
   {
      get
      {
         return this.tableaspnet_Users;
      }
   }

   [System.ComponentModel.Browsable(false)]
   [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
   public aspnet_UsersInRolesDataTable aspnet_UsersInRoles
   {
      get
      {
         return this.tableaspnet_UsersInRoles;
      }
   }

   [System.ComponentModel.Browsable(false)]
   [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
   public aspnet_WebEvent_EventsDataTable aspnet_WebEvent_Events
   {
      get
      {
         return this.tableaspnet_WebEvent_Events;
      }
   }

   public override System.Data.SchemaSerializationMode SchemaSerializationMode
   {
      get
      {
         return this._schemaSerializationMode;
      }
      set
      {
         this._schemaSerializationMode = value;
      }
   }

   [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
   public new System.Data.DataTableCollection Tables
   {
      get
      {
         return base.Tables;
      }
   }

   [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
   public new System.Data.DataRelationCollection Relations
   {
      get
      {
         return base.Relations;
      }
   }

   [System.ComponentModel.DefaultValueAttribute(true)]
   public new bool EnforceConstraints
   {
      get
      {
         return base.EnforceConstraints;
      }
      set
      {
         base.EnforceConstraints = value;
      }
   }

   protected override void InitializeDerivedDataSet()
   {
      this.BeginInit();
      this.InitClass();
      this.EndInit();
   }

   public override System.Data.DataSet Clone()
   {
      AspNetDbDataSet cln = ((AspNetDbDataSet)(base.Clone()));
      cln.InitVars();
      return cln;
   }

   protected override bool ShouldSerializeTables()
   {
      return false;
   }

   protected override bool ShouldSerializeRelations()
   {
      return false;
   }

   protected override void ReadXmlSerializable(System.Xml.XmlReader reader)
   {
      if((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema))
      {
         this.Reset();
         System.Data.DataSet ds = new System.Data.DataSet();
         ds.ReadXml(reader);
         if((ds.Tables["aspnet_Applications"] != null))
         {
            base.Tables.Add(new aspnet_ApplicationsDataTable(ds.Tables["aspnet_Applications"]));
         }
         if((ds.Tables["aspnet_Membership"] != null))
         {
            base.Tables.Add(new aspnet_MembershipDataTable(ds.Tables["aspnet_Membership"]));
         }
         if((ds.Tables["aspnet_Paths"] != null))
         {
            base.Tables.Add(new aspnet_PathsDataTable(ds.Tables["aspnet_Paths"]));
         }
         if((ds.Tables["aspnet_PersonalizationAllUsers"] != null))
         {
            base.Tables.Add(new aspnet_PersonalizationAllUsersDataTable(ds.Tables["aspnet_PersonalizationAllUsers"]));
         }
         if((ds.Tables["aspnet_PersonalizationPerUser"] != null))
         {
            base.Tables.Add(new aspnet_PersonalizationPerUserDataTable(ds.Tables["aspnet_PersonalizationPerUser"]));
         }
         if((ds.Tables["aspnet_Profile"] != null))
         {
            base.Tables.Add(new aspnet_ProfileDataTable(ds.Tables["aspnet_Profile"]));
         }
         if((ds.Tables["aspnet_Roles"] != null))
         {
            base.Tables.Add(new aspnet_RolesDataTable(ds.Tables["aspnet_Roles"]));
         }
         if((ds.Tables["aspnet_SchemaVersions"] != null))
         {
            base.Tables.Add(new aspnet_SchemaVersionsDataTable(ds.Tables["aspnet_SchemaVersions"]));
         }
         if((ds.Tables["aspnet_Users"] != null))
         {
            base.Tables.Add(new aspnet_UsersDataTable(ds.Tables["aspnet_Users"]));
         }
         if((ds.Tables["aspnet_UsersInRoles"] != null))
         {
            base.Tables.Add(new aspnet_UsersInRolesDataTable(ds.Tables["aspnet_UsersInRoles"]));
         }
         if((ds.Tables["aspnet_WebEvent_Events"] != null))
         {
            base.Tables.Add(new aspnet_WebEvent_EventsDataTable(ds.Tables["aspnet_WebEvent_Events"]));
         }
         this.DataSetName = ds.DataSetName;
         this.Prefix = ds.Prefix;
         this.Namespace = ds.Namespace;
         this.Locale = ds.Locale;
         this.CaseSensitive = ds.CaseSensitive;
         this.EnforceConstraints = ds.EnforceConstraints;
         this.Merge(ds,false,System.Data.MissingSchemaAction.Add);
         this.InitVars();
      }
      else
      {
         this.ReadXml(reader);
         this.InitVars();
      }
   }

   protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
   {
      System.IO.MemoryStream stream = new System.IO.MemoryStream();
      this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream,null));
      stream.Position = 0;
      return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream),null);
   }

   internal void InitVars()
   {
      this.InitVars(true);
   }

   internal void InitVars(bool initTable)
   {
      this.tableaspnet_Applications = ((aspnet_ApplicationsDataTable)(base.Tables["aspnet_Applications"]));
      if((initTable == true))
      {
         if((this.tableaspnet_Applications != null))
         {
            this.tableaspnet_Applications.InitVars();
         }
      }
      this.tableaspnet_Membership = ((aspnet_MembershipDataTable)(base.Tables["aspnet_Membership"]));
      if((initTable == true))
      {
         if((this.tableaspnet_Membership != null))
         {
            this.tableaspnet_Membership.InitVars();
         }
      }
      this.tableaspnet_Paths = ((aspnet_PathsDataTable)(base.Tables["aspnet_Paths"]));
      if((initTable == true))
      {
         if((this.tableaspnet_Paths != null))
         {
            this.tableaspnet_Paths.InitVars();
         }
      }
      this.tableaspnet_PersonalizationAllUsers = ((aspnet_PersonalizationAllUsersDataTable)(base.Tables["aspnet_PersonalizationAllUsers"]));
      if((initTable == true))
      {
         if((this.tableaspnet_PersonalizationAllUsers != null))
         {
            this.tableaspnet_PersonalizationAllUsers.InitVars();
         }
      }
      this.tableaspnet_PersonalizationPerUser = ((aspnet_PersonalizationPerUserDataTable)(base.Tables["aspnet_PersonalizationPerUser"]));
      if((initTable == true))
      {
         if((this.tableaspnet_PersonalizationPerUser != null))
         {
            this.tableaspnet_PersonalizationPerUser.InitVars();
         }
      }
      this.tableaspnet_Profile = ((aspnet_ProfileDataTable)(base.Tables["aspnet_Profile"]));
      if((initTable == true))
      {
         if((this.tableaspnet_Profile != null))
         {
            this.tableaspnet_Profile.InitVars();
         }
      }
      this.tableaspnet_Roles = ((aspnet_RolesDataTable)(base.Tables["aspnet_Roles"]));
      if((initTable == true))
      {
         if((this.tableaspnet_Roles != null))
         {
            this.tableaspnet_Roles.InitVars();
         }
      }
      this.tableaspnet_SchemaVersions = ((aspnet_SchemaVersionsDataTable)(base.Tables["aspnet_SchemaVersions"]));
      if((initTable == true))
      {
         if((this.tableaspnet_SchemaVersions != null))
         {
            this.tableaspnet_SchemaVersions.InitVars();
         }
      }
      this.tableaspnet_Users = ((aspnet_UsersDataTable)(base.Tables["aspnet_Users"]));
      if((initTable == true))
      {
         if((this.tableaspnet_Users != null))
         {
            this.tableaspnet_Users.InitVars();
         }
      }
      this.tableaspnet_UsersInRoles = ((aspnet_UsersInRolesDataTable)(base.Tables["aspnet_UsersInRoles"]));
      if((initTable == true))
      {
         if((this.tableaspnet_UsersInRoles != null))
         {
            this.tableaspnet_UsersInRoles.InitVars();
         }
      }
      this.tableaspnet_WebEvent_Events = ((aspnet_WebEvent_EventsDataTable)(base.Tables["aspnet_WebEvent_Events"]));
      if((initTable == true))
      {
         if((this.tableaspnet_WebEvent_Events != null))
         {
            this.tableaspnet_WebEvent_Events.InitVars();
         }
      }
      this.relationFK__aspnet_Me__Appli__0EA330E9 = this.Relations["FK__aspnet_Me__Appli__0EA330E9"];
      this.relationFK__aspnet_Me__UserI__0F975522 = this.Relations["FK__aspnet_Me__UserI__0F975522"];
      this.relationFK__aspnet_Pa__Appli__412EB0B6 = this.Relations["FK__aspnet_Pa__Appli__412EB0B6"];
      this.relationFK__aspnet_Pe__PathI__46E78A0C = this.Relations["FK__aspnet_Pe__PathI__46E78A0C"];
      this.relationFK__aspnet_Pe__PathI__4AB81AF0 = this.Relations["FK__aspnet_Pe__PathI__4AB81AF0"];
      this.relationFK__aspnet_Pe__UserI__4BAC3F29 = this.Relations["FK__aspnet_Pe__UserI__4BAC3F29"];
      this.relationFK__aspnet_Pr__UserI__24927208 = this.Relations["FK__aspnet_Pr__UserI__24927208"];
      this.relationFK__aspnet_Ro__Appli__2E1BDC42 = this.Relations["FK__aspnet_Ro__Appli__2E1BDC42"];
      this.relationFK__aspnet_Us__Appli__7E6CC920 = this.Relations["FK__aspnet_Us__Appli__7E6CC920"];
      this.relationFK__aspnet_Us__RoleI__32E0915F = this.Relations["FK__aspnet_Us__RoleI__32E0915F"];
      this.relationFK__aspnet_Us__UserI__31EC6D26 = this.Relations["FK__aspnet_Us__UserI__31EC6D26"];
   }

   private void InitClass()
   {
      this.DataSetName = "AspNetDbDataSet";
      this.Prefix = "";
      this.Namespace = "http://tempuri.org/AspNetDbDataSet.xsd";
      this.EnforceConstraints = true;
      this.tableaspnet_Applications = new aspnet_ApplicationsDataTable();
      base.Tables.Add(this.tableaspnet_Applications);
      this.tableaspnet_Membership = new aspnet_MembershipDataTable();
      base.Tables.Add(this.tableaspnet_Membership);
      this.tableaspnet_Paths = new aspnet_PathsDataTable();
      base.Tables.Add(this.tableaspnet_Paths);
      this.tableaspnet_PersonalizationAllUsers = new aspnet_PersonalizationAllUsersDataTable();
      base.Tables.Add(this.tableaspnet_PersonalizationAllUsers);
      this.tableaspnet_PersonalizationPerUser = new aspnet_PersonalizationPerUserDataTable();
      base.Tables.Add(this.tableaspnet_PersonalizationPerUser);
      this.tableaspnet_Profile = new aspnet_ProfileDataTable();
      base.Tables.Add(this.tableaspnet_Profile);
      this.tableaspnet_Roles = new aspnet_RolesDataTable();
      base.Tables.Add(this.tableaspnet_Roles);
      this.tableaspnet_SchemaVersions = new aspnet_SchemaVersionsDataTable();
      base.Tables.Add(this.tableaspnet_SchemaVersions);
      this.tableaspnet_Users = new aspnet_UsersDataTable();
      base.Tables.Add(this.tableaspnet_Users);
      this.tableaspnet_UsersInRoles = new aspnet_UsersInRolesDataTable();
      base.Tables.Add(this.tableaspnet_UsersInRoles);
      this.tableaspnet_WebEvent_Events = new aspnet_WebEvent_EventsDataTable();
      base.Tables.Add(this.tableaspnet_WebEvent_Events);
      this.relationFK__aspnet_Me__Appli__0EA330E9 = new System.Data.DataRelation("FK__aspnet_Me__Appli__0EA330E9",new System.Data.DataColumn[] {
                        this.tableaspnet_Applications.ApplicationIdColumn},new System.Data.DataColumn[] {
                        this.tableaspnet_Membership.ApplicationIdColumn},false);
      this.Relations.Add(this.relationFK__aspnet_Me__Appli__0EA330E9);
      this.relationFK__aspnet_Me__UserI__0F975522 = new System.Data.DataRelation("FK__aspnet_Me__UserI__0F975522",new System.Data.DataColumn[] {
                        this.tableaspnet_Users.UserIdColumn},new System.Data.DataColumn[] {
                        this.tableaspnet_Membership.UserIdColumn},false);
      this.Relations.Add(this.relationFK__aspnet_Me__UserI__0F975522);
      this.relationFK__aspnet_Pa__Appli__412EB0B6 = new System.Data.DataRelation("FK__aspnet_Pa__Appli__412EB0B6",new System.Data.DataColumn[] {
                        this.tableaspnet_Applications.ApplicationIdColumn},new System.Data.DataColumn[] {
                        this.tableaspnet_Paths.ApplicationIdColumn},false);
      this.Relations.Add(this.relationFK__aspnet_Pa__Appli__412EB0B6);
      this.relationFK__aspnet_Pe__PathI__46E78A0C = new System.Data.DataRelation("FK__aspnet_Pe__PathI__46E78A0C",new System.Data.DataColumn[] {
                        this.tableaspnet_Paths.PathIdColumn},new System.Data.DataColumn[] {
                        this.tableaspnet_PersonalizationAllUsers.PathIdColumn},false);
      this.Relations.Add(this.relationFK__aspnet_Pe__PathI__46E78A0C);
      this.relationFK__aspnet_Pe__PathI__4AB81AF0 = new System.Data.DataRelation("FK__aspnet_Pe__PathI__4AB81AF0",new System.Data.DataColumn[] {
                        this.tableaspnet_Paths.PathIdColumn},new System.Data.DataColumn[] {
                        this.tableaspnet_PersonalizationPerUser.PathIdColumn},false);
      this.Relations.Add(this.relationFK__aspnet_Pe__PathI__4AB81AF0);
      this.relationFK__aspnet_Pe__UserI__4BAC3F29 = new System.Data.DataRelation("FK__aspnet_Pe__UserI__4BAC3F29",new System.Data.DataColumn[] {
                        this.tableaspnet_Users.UserIdColumn},new System.Data.DataColumn[] {
                        this.tableaspnet_PersonalizationPerUser.UserIdColumn},false);
      this.Relations.Add(this.relationFK__aspnet_Pe__UserI__4BAC3F29);
      this.relationFK__aspnet_Pr__UserI__24927208 = new System.Data.DataRelation("FK__aspnet_Pr__UserI__24927208",new System.Data.DataColumn[] {
                        this.tableaspnet_Users.UserIdColumn},new System.Data.DataColumn[] {
                        this.tableaspnet_Profile.UserIdColumn},false);
      this.Relations.Add(this.relationFK__aspnet_Pr__UserI__24927208);
      this.relationFK__aspnet_Ro__Appli__2E1BDC42 = new System.Data.DataRelation("FK__aspnet_Ro__Appli__2E1BDC42",new System.Data.DataColumn[] {
                        this.tableaspnet_Applications.ApplicationIdColumn},new System.Data.DataColumn[] {
                        this.tableaspnet_Roles.ApplicationIdColumn},false);
      this.Relations.Add(this.relationFK__aspnet_Ro__Appli__2E1BDC42);
      this.relationFK__aspnet_Us__Appli__7E6CC920 = new System.Data.DataRelation("FK__aspnet_Us__Appli__7E6CC920",new System.Data.DataColumn[] {
                        this.tableaspnet_Applications.ApplicationIdColumn},new System.Data.DataColumn[] {
                        this.tableaspnet_Users.ApplicationIdColumn},false);
      this.Relations.Add(this.relationFK__aspnet_Us__Appli__7E6CC920);
      this.relationFK__aspnet_Us__RoleI__32E0915F = new System.Data.DataRelation("FK__aspnet_Us__RoleI__32E0915F",new System.Data.DataColumn[] {
                        this.tableaspnet_Roles.RoleIdColumn},new System.Data.DataColumn[] {
                        this.tableaspnet_UsersInRoles.RoleIdColumn},false);
      this.Relations.Add(this.relationFK__aspnet_Us__RoleI__32E0915F);
      this.relationFK__aspnet_Us__UserI__31EC6D26 = new System.Data.DataRelation("FK__aspnet_Us__UserI__31EC6D26",new System.Data.DataColumn[] {
                        this.tableaspnet_Users.UserIdColumn},new System.Data.DataColumn[] {
                        this.tableaspnet_UsersInRoles.UserIdColumn},false);
      this.Relations.Add(this.relationFK__aspnet_Us__UserI__31EC6D26);
   }

   private bool ShouldSerializeaspnet_Applications()
   {
      return false;
   }

   private bool ShouldSerializeaspnet_Membership()
   {
      return false;
   }

   private bool ShouldSerializeaspnet_Paths()
   {
      return false;
   }

   private bool ShouldSerializeaspnet_PersonalizationAllUsers()
   {
      return false;
   }

   private bool ShouldSerializeaspnet_PersonalizationPerUser()
   {
      return false;
   }

   private bool ShouldSerializeaspnet_Profile()
   {
      return false;
   }

   private bool ShouldSerializeaspnet_Roles()
   {
      return false;
   }

   private bool ShouldSerializeaspnet_SchemaVersions()
   {
      return false;
   }

   private bool ShouldSerializeaspnet_Users()
   {
      return false;
   }

   private bool ShouldSerializeaspnet_UsersInRoles()
   {
      return false;
   }

   private bool ShouldSerializeaspnet_WebEvent_Events()
   {
      return false;
   }

   private void SchemaChanged(object sender,System.ComponentModel.CollectionChangeEventArgs e)
   {
      if((e.Action == System.ComponentModel.CollectionChangeAction.Remove))
      {
         this.InitVars();
      }
   }

   public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs)
   {
      AspNetDbDataSet ds = new AspNetDbDataSet();
      System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
      System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
      xs.Add(ds.GetSchemaSerializable());
      System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
      any.Namespace = ds.Namespace;
      sequence.Items.Add(any);
      type.Particle = sequence;
      return type;
   }

   public delegate void aspnet_ApplicationsRowChangeEventHandler(object sender,aspnet_ApplicationsRowChangeEvent e);

   public delegate void aspnet_MembershipRowChangeEventHandler(object sender,aspnet_MembershipRowChangeEvent e);

   public delegate void aspnet_PathsRowChangeEventHandler(object sender,aspnet_PathsRowChangeEvent e);

   public delegate void aspnet_PersonalizationAllUsersRowChangeEventHandler(object sender,aspnet_PersonalizationAllUsersRowChangeEvent e);

   public delegate void aspnet_PersonalizationPerUserRowChangeEventHandler(object sender,aspnet_PersonalizationPerUserRowChangeEvent e);

   public delegate void aspnet_ProfileRowChangeEventHandler(object sender,aspnet_ProfileRowChangeEvent e);

   public delegate void aspnet_RolesRowChangeEventHandler(object sender,aspnet_RolesRowChangeEvent e);

   public delegate void aspnet_SchemaVersionsRowChangeEventHandler(object sender,aspnet_SchemaVersionsRowChangeEvent e);

   public delegate void aspnet_UsersRowChangeEventHandler(object sender,aspnet_UsersRowChangeEvent e);

   public delegate void aspnet_UsersInRolesRowChangeEventHandler(object sender,aspnet_UsersInRolesRowChangeEvent e);

   public delegate void aspnet_WebEvent_EventsRowChangeEventHandler(object sender,aspnet_WebEvent_EventsRowChangeEvent e);

   [System.Serializable()]
   [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
   public partial class aspnet_ApplicationsDataTable : System.Data.DataTable,System.Collections.IEnumerable
   {

      private System.Data.DataColumn columnApplicationName;

      private System.Data.DataColumn columnLoweredApplicationName;

      private System.Data.DataColumn columnApplicationId;

      private System.Data.DataColumn columnDescription;

      public aspnet_ApplicationsDataTable()
      {
         this.TableName = "aspnet_Applications";
         this.BeginInit();
         this.InitClass();
         this.EndInit();
      }

      internal aspnet_ApplicationsDataTable(System.Data.DataTable table)
      {
         this.TableName = table.TableName;
         if((table.CaseSensitive != table.DataSet.CaseSensitive))
         {
            this.CaseSensitive = table.CaseSensitive;
         }
         if((table.Locale.ToString() != table.DataSet.Locale.ToString()))
         {
            this.Locale = table.Locale;
         }
         if((table.Namespace != table.DataSet.Namespace))
         {
            this.Namespace = table.Namespace;
         }
         this.Prefix = table.Prefix;
         this.MinimumCapacity = table.MinimumCapacity;
      }

      protected aspnet_ApplicationsDataTable(System.Runtime.Serialization.SerializationInfo info,System.Runtime.Serialization.StreamingContext context)
         :
              base(info,context)
      {
         this.InitVars();
      }

      public System.Data.DataColumn ApplicationNameColumn
      {
         get
         {
            return this.columnApplicationName;
         }
      }

      public System.Data.DataColumn LoweredApplicationNameColumn
      {
         get
         {
            return this.columnLoweredApplicationName;
         }
      }

      public System.Data.DataColumn ApplicationIdColumn
      {
         get
         {
            return this.columnApplicationId;
         }
      }

      public System.Data.DataColumn DescriptionColumn
      {
         get
         {
            return this.columnDescription;
         }
      }

      [System.ComponentModel.Browsable(false)]
      public int Count
      {
         get
         {
            return this.Rows.Count;
         }
      }

      public aspnet_ApplicationsRow this[int index]
      {
         get
         {
            return ((aspnet_ApplicationsRow)(this.Rows[index]));
         }
      }

      public event aspnet_ApplicationsRowChangeEventHandler aspnet_ApplicationsRowChanged;

      public event aspnet_ApplicationsRowChangeEventHandler aspnet_ApplicationsRowChanging;

      public event aspnet_ApplicationsRowChangeEventHandler aspnet_ApplicationsRowDeleted;

      public event aspnet_ApplicationsRowChangeEventHandler aspnet_ApplicationsRowDeleting;

      public void Addaspnet_ApplicationsRow(aspnet_ApplicationsRow row)
      {
         this.Rows.Add(row);
      }

      public aspnet_ApplicationsRow Addaspnet_ApplicationsRow(string ApplicationName,string LoweredApplicationName,System.Guid ApplicationId,string Description)
      {
         aspnet_ApplicationsRow rowaspnet_ApplicationsRow = ((aspnet_ApplicationsRow)(this.NewRow()));
         rowaspnet_ApplicationsRow.ItemArray = new object[] {
                        ApplicationName,
                        LoweredApplicationName,
                        ApplicationId,
                        Description};
         this.Rows.Add(rowaspnet_ApplicationsRow);
         return rowaspnet_ApplicationsRow;
      }

      public aspnet_ApplicationsRow FindByApplicationId(System.Guid ApplicationId)
      {
         return ((aspnet_ApplicationsRow)(this.Rows.Find(new object[] {
                            ApplicationId})));
      }

      public virtual System.Collections.IEnumerator GetEnumerator()
      {
         return this.Rows.GetEnumerator();
      }

      public override System.Data.DataTable Clone()
      {
         aspnet_ApplicationsDataTable cln = ((aspnet_ApplicationsDataTable)(base.Clone()));
         cln.InitVars();
         return cln;
      }

      protected override System.Data.DataTable CreateInstance()
      {
         return new aspnet_ApplicationsDataTable();
      }

      internal void InitVars()
      {
         this.columnApplicationName = base.Columns["ApplicationName"];
         this.columnLoweredApplicationName = base.Columns["LoweredApplicationName"];
         this.columnApplicationId = base.Columns["ApplicationId"];
         this.columnDescription = base.Columns["Description"];
      }

      private void InitClass()
      {
         this.columnApplicationName = new System.Data.DataColumn("ApplicationName",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnApplicationName);
         this.columnLoweredApplicationName = new System.Data.DataColumn("LoweredApplicationName",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnLoweredApplicationName);
         this.columnApplicationId = new System.Data.DataColumn("ApplicationId",typeof(System.Guid),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnApplicationId);
         this.columnDescription = new System.Data.DataColumn("Description",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnDescription);
         this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1",new System.Data.DataColumn[] {
                                this.columnApplicationId},true));
         this.columnApplicationName.AllowDBNull = false;
         this.columnApplicationName.MaxLength = 256;
         this.columnLoweredApplicationName.AllowDBNull = false;
         this.columnLoweredApplicationName.MaxLength = 256;
         this.columnApplicationId.AllowDBNull = false;
         this.columnApplicationId.Unique = true;
         this.columnDescription.MaxLength = 256;
      }

      public aspnet_ApplicationsRow Newaspnet_ApplicationsRow()
      {
         return ((aspnet_ApplicationsRow)(this.NewRow()));
      }

      protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
      {
         return new aspnet_ApplicationsRow(builder);
      }

      protected override System.Type GetRowType()
      {
         return typeof(aspnet_ApplicationsRow);
      }

      protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowChanged(e);
         if((this.aspnet_ApplicationsRowChanged != null))
         {
            this.aspnet_ApplicationsRowChanged(this,new aspnet_ApplicationsRowChangeEvent(((aspnet_ApplicationsRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowChanging(e);
         if((this.aspnet_ApplicationsRowChanging != null))
         {
            this.aspnet_ApplicationsRowChanging(this,new aspnet_ApplicationsRowChangeEvent(((aspnet_ApplicationsRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowDeleted(e);
         if((this.aspnet_ApplicationsRowDeleted != null))
         {
            this.aspnet_ApplicationsRowDeleted(this,new aspnet_ApplicationsRowChangeEvent(((aspnet_ApplicationsRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowDeleting(e);
         if((this.aspnet_ApplicationsRowDeleting != null))
         {
            this.aspnet_ApplicationsRowDeleting(this,new aspnet_ApplicationsRowChangeEvent(((aspnet_ApplicationsRow)(e.Row)),e.Action));
         }
      }

      public void Removeaspnet_ApplicationsRow(aspnet_ApplicationsRow row)
      {
         this.Rows.Remove(row);
      }

      public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
      {
         System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
         System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
         AspNetDbDataSet ds = new AspNetDbDataSet();
         xs.Add(ds.GetSchemaSerializable());
         System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
         any1.Namespace = "http://www.w3.org/2001/XMLSchema";
         any1.MinOccurs = new decimal(0);
         any1.MaxOccurs = decimal.MaxValue;
         any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
         sequence.Items.Add(any1);
         System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
         any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
         any2.MinOccurs = new decimal(1);
         any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
         sequence.Items.Add(any2);
         System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
         attribute1.Name = "namespace";
         attribute1.FixedValue = ds.Namespace;
         type.Attributes.Add(attribute1);
         System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
         attribute2.Name = "tableTypeName";
         attribute2.FixedValue = "aspnet_ApplicationsDataTable";
         type.Attributes.Add(attribute2);
         type.Particle = sequence;
         return type;
      }
   }

   [System.Serializable()]
   [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
   public partial class aspnet_MembershipDataTable : System.Data.DataTable,System.Collections.IEnumerable
   {

      private System.Data.DataColumn columnApplicationId;

      private System.Data.DataColumn columnUserId;

      private System.Data.DataColumn columnPassword;

      private System.Data.DataColumn columnPasswordFormat;

      private System.Data.DataColumn columnPasswordSalt;

      private System.Data.DataColumn columnMobilePIN;

      private System.Data.DataColumn columnEmail;

      private System.Data.DataColumn columnLoweredEmail;

      private System.Data.DataColumn columnPasswordQuestion;

      private System.Data.DataColumn columnPasswordAnswer;

      private System.Data.DataColumn columnIsApproved;

      private System.Data.DataColumn columnIsLockedOut;

      private System.Data.DataColumn columnCreateDate;

      private System.Data.DataColumn columnLastLoginDate;

      private System.Data.DataColumn columnLastPasswordChangedDate;

      private System.Data.DataColumn columnLastLockoutDate;

      private System.Data.DataColumn columnFailedPasswordAttemptCount;

      private System.Data.DataColumn columnFailedPasswordAttemptWindowStart;

      private System.Data.DataColumn columnFailedPasswordAnswerAttemptCount;

      private System.Data.DataColumn columnFailedPasswordAnswerAttemptWindowStart;

      private System.Data.DataColumn columnComment;

      public aspnet_MembershipDataTable()
      {
         this.TableName = "aspnet_Membership";
         this.BeginInit();
         this.InitClass();
         this.EndInit();
      }

      internal aspnet_MembershipDataTable(System.Data.DataTable table)
      {
         this.TableName = table.TableName;
         if((table.CaseSensitive != table.DataSet.CaseSensitive))
         {
            this.CaseSensitive = table.CaseSensitive;
         }
         if((table.Locale.ToString() != table.DataSet.Locale.ToString()))
         {
            this.Locale = table.Locale;
         }
         if((table.Namespace != table.DataSet.Namespace))
         {
            this.Namespace = table.Namespace;
         }
         this.Prefix = table.Prefix;
         this.MinimumCapacity = table.MinimumCapacity;
      }

      protected aspnet_MembershipDataTable(System.Runtime.Serialization.SerializationInfo info,System.Runtime.Serialization.StreamingContext context)
         :
              base(info,context)
      {
         this.InitVars();
      }

      public System.Data.DataColumn ApplicationIdColumn
      {
         get
         {
            return this.columnApplicationId;
         }
      }

      public System.Data.DataColumn UserIdColumn
      {
         get
         {
            return this.columnUserId;
         }
      }

      public System.Data.DataColumn PasswordColumn
      {
         get
         {
            return this.columnPassword;
         }
      }

      public System.Data.DataColumn PasswordFormatColumn
      {
         get
         {
            return this.columnPasswordFormat;
         }
      }

      public System.Data.DataColumn PasswordSaltColumn
      {
         get
         {
            return this.columnPasswordSalt;
         }
      }

      public System.Data.DataColumn MobilePINColumn
      {
         get
         {
            return this.columnMobilePIN;
         }
      }

      public System.Data.DataColumn EmailColumn
      {
         get
         {
            return this.columnEmail;
         }
      }

      public System.Data.DataColumn LoweredEmailColumn
      {
         get
         {
            return this.columnLoweredEmail;
         }
      }

      public System.Data.DataColumn PasswordQuestionColumn
      {
         get
         {
            return this.columnPasswordQuestion;
         }
      }

      public System.Data.DataColumn PasswordAnswerColumn
      {
         get
         {
            return this.columnPasswordAnswer;
         }
      }

      public System.Data.DataColumn IsApprovedColumn
      {
         get
         {
            return this.columnIsApproved;
         }
      }

      public System.Data.DataColumn IsLockedOutColumn
      {
         get
         {
            return this.columnIsLockedOut;
         }
      }

      public System.Data.DataColumn CreateDateColumn
      {
         get
         {
            return this.columnCreateDate;
         }
      }

      public System.Data.DataColumn LastLoginDateColumn
      {
         get
         {
            return this.columnLastLoginDate;
         }
      }

      public System.Data.DataColumn LastPasswordChangedDateColumn
      {
         get
         {
            return this.columnLastPasswordChangedDate;
         }
      }

      public System.Data.DataColumn LastLockoutDateColumn
      {
         get
         {
            return this.columnLastLockoutDate;
         }
      }

      public System.Data.DataColumn FailedPasswordAttemptCountColumn
      {
         get
         {
            return this.columnFailedPasswordAttemptCount;
         }
      }

      public System.Data.DataColumn FailedPasswordAttemptWindowStartColumn
      {
         get
         {
            return this.columnFailedPasswordAttemptWindowStart;
         }
      }

      public System.Data.DataColumn FailedPasswordAnswerAttemptCountColumn
      {
         get
         {
            return this.columnFailedPasswordAnswerAttemptCount;
         }
      }

      public System.Data.DataColumn FailedPasswordAnswerAttemptWindowStartColumn
      {
         get
         {
            return this.columnFailedPasswordAnswerAttemptWindowStart;
         }
      }

      public System.Data.DataColumn CommentColumn
      {
         get
         {
            return this.columnComment;
         }
      }

      [System.ComponentModel.Browsable(false)]
      public int Count
      {
         get
         {
            return this.Rows.Count;
         }
      }

      public aspnet_MembershipRow this[int index]
      {
         get
         {
            return ((aspnet_MembershipRow)(this.Rows[index]));
         }
      }

      public event aspnet_MembershipRowChangeEventHandler aspnet_MembershipRowChanged;

      public event aspnet_MembershipRowChangeEventHandler aspnet_MembershipRowChanging;

      public event aspnet_MembershipRowChangeEventHandler aspnet_MembershipRowDeleted;

      public event aspnet_MembershipRowChangeEventHandler aspnet_MembershipRowDeleting;

      public void Addaspnet_MembershipRow(aspnet_MembershipRow row)
      {
         this.Rows.Add(row);
      }

      public aspnet_MembershipRow Addaspnet_MembershipRow(
                  aspnet_ApplicationsRow parentaspnet_ApplicationsRowByFK__aspnet_Me__Appli__0EA330E9,
                  aspnet_UsersRow parentaspnet_UsersRowByFK__aspnet_Me__UserI__0F975522,
                  string Password,
                  int PasswordFormat,
                  string PasswordSalt,
                  string MobilePIN,
                  string Email,
                  string LoweredEmail,
                  string PasswordQuestion,
                  string PasswordAnswer,
                  bool IsApproved,
                  bool IsLockedOut,
                  System.DateTime CreateDate,
                  System.DateTime LastLoginDate,
                  System.DateTime LastPasswordChangedDate,
                  System.DateTime LastLockoutDate,
                  int FailedPasswordAttemptCount,
                  System.DateTime FailedPasswordAttemptWindowStart,
                  int FailedPasswordAnswerAttemptCount,
                  System.DateTime FailedPasswordAnswerAttemptWindowStart,
                  string Comment)
      {
         aspnet_MembershipRow rowaspnet_MembershipRow = ((aspnet_MembershipRow)(this.NewRow()));
         rowaspnet_MembershipRow.ItemArray = new object[] {
                        parentaspnet_ApplicationsRowByFK__aspnet_Me__Appli__0EA330E9[2],
                        parentaspnet_UsersRowByFK__aspnet_Me__UserI__0F975522[1],
                        Password,
                        PasswordFormat,
                        PasswordSalt,
                        MobilePIN,
                        Email,
                        LoweredEmail,
                        PasswordQuestion,
                        PasswordAnswer,
                        IsApproved,
                        IsLockedOut,
                        CreateDate,
                        LastLoginDate,
                        LastPasswordChangedDate,
                        LastLockoutDate,
                        FailedPasswordAttemptCount,
                        FailedPasswordAttemptWindowStart,
                        FailedPasswordAnswerAttemptCount,
                        FailedPasswordAnswerAttemptWindowStart,
                        Comment};
         this.Rows.Add(rowaspnet_MembershipRow);
         return rowaspnet_MembershipRow;
      }

      public aspnet_MembershipRow FindByUserId(System.Guid UserId)
      {
         return ((aspnet_MembershipRow)(this.Rows.Find(new object[] {
                            UserId})));
      }

      public virtual System.Collections.IEnumerator GetEnumerator()
      {
         return this.Rows.GetEnumerator();
      }

      public override System.Data.DataTable Clone()
      {
         aspnet_MembershipDataTable cln = ((aspnet_MembershipDataTable)(base.Clone()));
         cln.InitVars();
         return cln;
      }

      protected override System.Data.DataTable CreateInstance()
      {
         return new aspnet_MembershipDataTable();
      }

      internal void InitVars()
      {
         this.columnApplicationId = base.Columns["ApplicationId"];
         this.columnUserId = base.Columns["UserId"];
         this.columnPassword = base.Columns["Password"];
         this.columnPasswordFormat = base.Columns["PasswordFormat"];
         this.columnPasswordSalt = base.Columns["PasswordSalt"];
         this.columnMobilePIN = base.Columns["MobilePIN"];
         this.columnEmail = base.Columns["Email"];
         this.columnLoweredEmail = base.Columns["LoweredEmail"];
         this.columnPasswordQuestion = base.Columns["PasswordQuestion"];
         this.columnPasswordAnswer = base.Columns["PasswordAnswer"];
         this.columnIsApproved = base.Columns["IsApproved"];
         this.columnIsLockedOut = base.Columns["IsLockedOut"];
         this.columnCreateDate = base.Columns["CreateDate"];
         this.columnLastLoginDate = base.Columns["LastLoginDate"];
         this.columnLastPasswordChangedDate = base.Columns["LastPasswordChangedDate"];
         this.columnLastLockoutDate = base.Columns["LastLockoutDate"];
         this.columnFailedPasswordAttemptCount = base.Columns["FailedPasswordAttemptCount"];
         this.columnFailedPasswordAttemptWindowStart = base.Columns["FailedPasswordAttemptWindowStart"];
         this.columnFailedPasswordAnswerAttemptCount = base.Columns["FailedPasswordAnswerAttemptCount"];
         this.columnFailedPasswordAnswerAttemptWindowStart = base.Columns["FailedPasswordAnswerAttemptWindowStart"];
         this.columnComment = base.Columns["Comment"];
      }

      private void InitClass()
      {
         this.columnApplicationId = new System.Data.DataColumn("ApplicationId",typeof(System.Guid),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnApplicationId);
         this.columnUserId = new System.Data.DataColumn("UserId",typeof(System.Guid),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnUserId);
         this.columnPassword = new System.Data.DataColumn("Password",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnPassword);
         this.columnPasswordFormat = new System.Data.DataColumn("PasswordFormat",typeof(int),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnPasswordFormat);
         this.columnPasswordSalt = new System.Data.DataColumn("PasswordSalt",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnPasswordSalt);
         this.columnMobilePIN = new System.Data.DataColumn("MobilePIN",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnMobilePIN);
         this.columnEmail = new System.Data.DataColumn("Email",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnEmail);
         this.columnLoweredEmail = new System.Data.DataColumn("LoweredEmail",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnLoweredEmail);
         this.columnPasswordQuestion = new System.Data.DataColumn("PasswordQuestion",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnPasswordQuestion);
         this.columnPasswordAnswer = new System.Data.DataColumn("PasswordAnswer",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnPasswordAnswer);
         this.columnIsApproved = new System.Data.DataColumn("IsApproved",typeof(bool),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnIsApproved);
         this.columnIsLockedOut = new System.Data.DataColumn("IsLockedOut",typeof(bool),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnIsLockedOut);
         this.columnCreateDate = new System.Data.DataColumn("CreateDate",typeof(System.DateTime),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnCreateDate);
         this.columnLastLoginDate = new System.Data.DataColumn("LastLoginDate",typeof(System.DateTime),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnLastLoginDate);
         this.columnLastPasswordChangedDate = new System.Data.DataColumn("LastPasswordChangedDate",typeof(System.DateTime),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnLastPasswordChangedDate);
         this.columnLastLockoutDate = new System.Data.DataColumn("LastLockoutDate",typeof(System.DateTime),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnLastLockoutDate);
         this.columnFailedPasswordAttemptCount = new System.Data.DataColumn("FailedPasswordAttemptCount",typeof(int),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnFailedPasswordAttemptCount);
         this.columnFailedPasswordAttemptWindowStart = new System.Data.DataColumn("FailedPasswordAttemptWindowStart",typeof(System.DateTime),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnFailedPasswordAttemptWindowStart);
         this.columnFailedPasswordAnswerAttemptCount = new System.Data.DataColumn("FailedPasswordAnswerAttemptCount",typeof(int),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnFailedPasswordAnswerAttemptCount);
         this.columnFailedPasswordAnswerAttemptWindowStart = new System.Data.DataColumn("FailedPasswordAnswerAttemptWindowStart",typeof(System.DateTime),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnFailedPasswordAnswerAttemptWindowStart);
         this.columnComment = new System.Data.DataColumn("Comment",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnComment);
         this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1",new System.Data.DataColumn[] {
                                this.columnUserId},true));
         this.columnApplicationId.AllowDBNull = false;
         this.columnUserId.AllowDBNull = false;
         this.columnUserId.Unique = true;
         this.columnPassword.AllowDBNull = false;
         this.columnPassword.MaxLength = 128;
         this.columnPasswordFormat.AllowDBNull = false;
         this.columnPasswordSalt.AllowDBNull = false;
         this.columnPasswordSalt.MaxLength = 128;
         this.columnMobilePIN.MaxLength = 16;
         this.columnEmail.MaxLength = 256;
         this.columnLoweredEmail.MaxLength = 256;
         this.columnPasswordQuestion.MaxLength = 256;
         this.columnPasswordAnswer.MaxLength = 128;
         this.columnIsApproved.AllowDBNull = false;
         this.columnIsLockedOut.AllowDBNull = false;
         this.columnCreateDate.AllowDBNull = false;
         this.columnLastLoginDate.AllowDBNull = false;
         this.columnLastPasswordChangedDate.AllowDBNull = false;
         this.columnLastLockoutDate.AllowDBNull = false;
         this.columnFailedPasswordAttemptCount.AllowDBNull = false;
         this.columnFailedPasswordAttemptWindowStart.AllowDBNull = false;
         this.columnFailedPasswordAnswerAttemptCount.AllowDBNull = false;
         this.columnFailedPasswordAnswerAttemptWindowStart.AllowDBNull = false;
         this.columnComment.MaxLength = 1073741823;
      }

      public aspnet_MembershipRow Newaspnet_MembershipRow()
      {
         return ((aspnet_MembershipRow)(this.NewRow()));
      }

      protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
      {
         return new aspnet_MembershipRow(builder);
      }

      protected override System.Type GetRowType()
      {
         return typeof(aspnet_MembershipRow);
      }

      protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowChanged(e);
         if((this.aspnet_MembershipRowChanged != null))
         {
            this.aspnet_MembershipRowChanged(this,new aspnet_MembershipRowChangeEvent(((aspnet_MembershipRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowChanging(e);
         if((this.aspnet_MembershipRowChanging != null))
         {
            this.aspnet_MembershipRowChanging(this,new aspnet_MembershipRowChangeEvent(((aspnet_MembershipRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowDeleted(e);
         if((this.aspnet_MembershipRowDeleted != null))
         {
            this.aspnet_MembershipRowDeleted(this,new aspnet_MembershipRowChangeEvent(((aspnet_MembershipRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowDeleting(e);
         if((this.aspnet_MembershipRowDeleting != null))
         {
            this.aspnet_MembershipRowDeleting(this,new aspnet_MembershipRowChangeEvent(((aspnet_MembershipRow)(e.Row)),e.Action));
         }
      }

      public void Removeaspnet_MembershipRow(aspnet_MembershipRow row)
      {
         this.Rows.Remove(row);
      }

      public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
      {
         System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
         System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
         AspNetDbDataSet ds = new AspNetDbDataSet();
         xs.Add(ds.GetSchemaSerializable());
         System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
         any1.Namespace = "http://www.w3.org/2001/XMLSchema";
         any1.MinOccurs = new decimal(0);
         any1.MaxOccurs = decimal.MaxValue;
         any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
         sequence.Items.Add(any1);
         System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
         any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
         any2.MinOccurs = new decimal(1);
         any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
         sequence.Items.Add(any2);
         System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
         attribute1.Name = "namespace";
         attribute1.FixedValue = ds.Namespace;
         type.Attributes.Add(attribute1);
         System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
         attribute2.Name = "tableTypeName";
         attribute2.FixedValue = "aspnet_MembershipDataTable";
         type.Attributes.Add(attribute2);
         type.Particle = sequence;
         return type;
      }
   }

   [System.Serializable()]
   [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
   public partial class aspnet_PathsDataTable : System.Data.DataTable,System.Collections.IEnumerable
   {

      private System.Data.DataColumn columnApplicationId;

      private System.Data.DataColumn columnPathId;

      private System.Data.DataColumn columnPath;

      private System.Data.DataColumn columnLoweredPath;

      public aspnet_PathsDataTable()
      {
         this.TableName = "aspnet_Paths";
         this.BeginInit();
         this.InitClass();
         this.EndInit();
      }

      internal aspnet_PathsDataTable(System.Data.DataTable table)
      {
         this.TableName = table.TableName;
         if((table.CaseSensitive != table.DataSet.CaseSensitive))
         {
            this.CaseSensitive = table.CaseSensitive;
         }
         if((table.Locale.ToString() != table.DataSet.Locale.ToString()))
         {
            this.Locale = table.Locale;
         }
         if((table.Namespace != table.DataSet.Namespace))
         {
            this.Namespace = table.Namespace;
         }
         this.Prefix = table.Prefix;
         this.MinimumCapacity = table.MinimumCapacity;
      }

      protected aspnet_PathsDataTable(System.Runtime.Serialization.SerializationInfo info,System.Runtime.Serialization.StreamingContext context)
         :
              base(info,context)
      {
         this.InitVars();
      }

      public System.Data.DataColumn ApplicationIdColumn
      {
         get
         {
            return this.columnApplicationId;
         }
      }

      public System.Data.DataColumn PathIdColumn
      {
         get
         {
            return this.columnPathId;
         }
      }

      public System.Data.DataColumn PathColumn
      {
         get
         {
            return this.columnPath;
         }
      }

      public System.Data.DataColumn LoweredPathColumn
      {
         get
         {
            return this.columnLoweredPath;
         }
      }

      [System.ComponentModel.Browsable(false)]
      public int Count
      {
         get
         {
            return this.Rows.Count;
         }
      }

      public aspnet_PathsRow this[int index]
      {
         get
         {
            return ((aspnet_PathsRow)(this.Rows[index]));
         }
      }

      public event aspnet_PathsRowChangeEventHandler aspnet_PathsRowChanged;

      public event aspnet_PathsRowChangeEventHandler aspnet_PathsRowChanging;

      public event aspnet_PathsRowChangeEventHandler aspnet_PathsRowDeleted;

      public event aspnet_PathsRowChangeEventHandler aspnet_PathsRowDeleting;

      public void Addaspnet_PathsRow(aspnet_PathsRow row)
      {
         this.Rows.Add(row);
      }

      public aspnet_PathsRow Addaspnet_PathsRow(aspnet_ApplicationsRow parentaspnet_ApplicationsRowByFK__aspnet_Pa__Appli__412EB0B6,System.Guid PathId,string Path,string LoweredPath)
      {
         aspnet_PathsRow rowaspnet_PathsRow = ((aspnet_PathsRow)(this.NewRow()));
         rowaspnet_PathsRow.ItemArray = new object[] {
                        parentaspnet_ApplicationsRowByFK__aspnet_Pa__Appli__412EB0B6[2],
                        PathId,
                        Path,
                        LoweredPath};
         this.Rows.Add(rowaspnet_PathsRow);
         return rowaspnet_PathsRow;
      }

      public aspnet_PathsRow FindByApplicationIdLoweredPath(System.Guid ApplicationId,string LoweredPath)
      {
         return ((aspnet_PathsRow)(this.Rows.Find(new object[] {
                            ApplicationId,
                            LoweredPath})));
      }

      public virtual System.Collections.IEnumerator GetEnumerator()
      {
         return this.Rows.GetEnumerator();
      }

      public override System.Data.DataTable Clone()
      {
         aspnet_PathsDataTable cln = ((aspnet_PathsDataTable)(base.Clone()));
         cln.InitVars();
         return cln;
      }

      protected override System.Data.DataTable CreateInstance()
      {
         return new aspnet_PathsDataTable();
      }

      internal void InitVars()
      {
         this.columnApplicationId = base.Columns["ApplicationId"];
         this.columnPathId = base.Columns["PathId"];
         this.columnPath = base.Columns["Path"];
         this.columnLoweredPath = base.Columns["LoweredPath"];
      }

      private void InitClass()
      {
         this.columnApplicationId = new System.Data.DataColumn("ApplicationId",typeof(System.Guid),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnApplicationId);
         this.columnPathId = new System.Data.DataColumn("PathId",typeof(System.Guid),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnPathId);
         this.columnPath = new System.Data.DataColumn("Path",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnPath);
         this.columnLoweredPath = new System.Data.DataColumn("LoweredPath",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnLoweredPath);
         this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1",new System.Data.DataColumn[] {
                                this.columnApplicationId,
                                this.columnLoweredPath},true));
         this.columnApplicationId.AllowDBNull = false;
         this.columnPathId.AllowDBNull = false;
         this.columnPath.AllowDBNull = false;
         this.columnPath.MaxLength = 256;
         this.columnLoweredPath.AllowDBNull = false;
         this.columnLoweredPath.MaxLength = 256;
      }

      public aspnet_PathsRow Newaspnet_PathsRow()
      {
         return ((aspnet_PathsRow)(this.NewRow()));
      }

      protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
      {
         return new aspnet_PathsRow(builder);
      }

      protected override System.Type GetRowType()
      {
         return typeof(aspnet_PathsRow);
      }

      protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowChanged(e);
         if((this.aspnet_PathsRowChanged != null))
         {
            this.aspnet_PathsRowChanged(this,new aspnet_PathsRowChangeEvent(((aspnet_PathsRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowChanging(e);
         if((this.aspnet_PathsRowChanging != null))
         {
            this.aspnet_PathsRowChanging(this,new aspnet_PathsRowChangeEvent(((aspnet_PathsRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowDeleted(e);
         if((this.aspnet_PathsRowDeleted != null))
         {
            this.aspnet_PathsRowDeleted(this,new aspnet_PathsRowChangeEvent(((aspnet_PathsRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowDeleting(e);
         if((this.aspnet_PathsRowDeleting != null))
         {
            this.aspnet_PathsRowDeleting(this,new aspnet_PathsRowChangeEvent(((aspnet_PathsRow)(e.Row)),e.Action));
         }
      }

      public void Removeaspnet_PathsRow(aspnet_PathsRow row)
      {
         this.Rows.Remove(row);
      }

      public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
      {
         System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
         System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
         AspNetDbDataSet ds = new AspNetDbDataSet();
         xs.Add(ds.GetSchemaSerializable());
         System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
         any1.Namespace = "http://www.w3.org/2001/XMLSchema";
         any1.MinOccurs = new decimal(0);
         any1.MaxOccurs = decimal.MaxValue;
         any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
         sequence.Items.Add(any1);
         System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
         any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
         any2.MinOccurs = new decimal(1);
         any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
         sequence.Items.Add(any2);
         System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
         attribute1.Name = "namespace";
         attribute1.FixedValue = ds.Namespace;
         type.Attributes.Add(attribute1);
         System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
         attribute2.Name = "tableTypeName";
         attribute2.FixedValue = "aspnet_PathsDataTable";
         type.Attributes.Add(attribute2);
         type.Particle = sequence;
         return type;
      }
   }

   [System.Serializable()]
   [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
   public partial class aspnet_PersonalizationAllUsersDataTable : System.Data.DataTable,System.Collections.IEnumerable
   {

      private System.Data.DataColumn columnPathId;

      private System.Data.DataColumn columnPageSettings;

      private System.Data.DataColumn columnLastUpdatedDate;

      public aspnet_PersonalizationAllUsersDataTable()
      {
         this.TableName = "aspnet_PersonalizationAllUsers";
         this.BeginInit();
         this.InitClass();
         this.EndInit();
      }

      internal aspnet_PersonalizationAllUsersDataTable(System.Data.DataTable table)
      {
         this.TableName = table.TableName;
         if((table.CaseSensitive != table.DataSet.CaseSensitive))
         {
            this.CaseSensitive = table.CaseSensitive;
         }
         if((table.Locale.ToString() != table.DataSet.Locale.ToString()))
         {
            this.Locale = table.Locale;
         }
         if((table.Namespace != table.DataSet.Namespace))
         {
            this.Namespace = table.Namespace;
         }
         this.Prefix = table.Prefix;
         this.MinimumCapacity = table.MinimumCapacity;
      }

      protected aspnet_PersonalizationAllUsersDataTable(System.Runtime.Serialization.SerializationInfo info,System.Runtime.Serialization.StreamingContext context)
         :
              base(info,context)
      {
         this.InitVars();
      }

      public System.Data.DataColumn PathIdColumn
      {
         get
         {
            return this.columnPathId;
         }
      }

      public System.Data.DataColumn PageSettingsColumn
      {
         get
         {
            return this.columnPageSettings;
         }
      }

      public System.Data.DataColumn LastUpdatedDateColumn
      {
         get
         {
            return this.columnLastUpdatedDate;
         }
      }

      [System.ComponentModel.Browsable(false)]
      public int Count
      {
         get
         {
            return this.Rows.Count;
         }
      }

      public aspnet_PersonalizationAllUsersRow this[int index]
      {
         get
         {
            return ((aspnet_PersonalizationAllUsersRow)(this.Rows[index]));
         }
      }

      public event aspnet_PersonalizationAllUsersRowChangeEventHandler aspnet_PersonalizationAllUsersRowChanged;

      public event aspnet_PersonalizationAllUsersRowChangeEventHandler aspnet_PersonalizationAllUsersRowChanging;

      public event aspnet_PersonalizationAllUsersRowChangeEventHandler aspnet_PersonalizationAllUsersRowDeleted;

      public event aspnet_PersonalizationAllUsersRowChangeEventHandler aspnet_PersonalizationAllUsersRowDeleting;

      public void Addaspnet_PersonalizationAllUsersRow(aspnet_PersonalizationAllUsersRow row)
      {
         this.Rows.Add(row);
      }

      public aspnet_PersonalizationAllUsersRow Addaspnet_PersonalizationAllUsersRow(aspnet_PathsRow parentaspnet_PathsRowByFK__aspnet_Pe__PathI__46E78A0C,byte[] PageSettings,System.DateTime LastUpdatedDate)
      {
         aspnet_PersonalizationAllUsersRow rowaspnet_PersonalizationAllUsersRow = ((aspnet_PersonalizationAllUsersRow)(this.NewRow()));
         rowaspnet_PersonalizationAllUsersRow.ItemArray = new object[] {
                        parentaspnet_PathsRowByFK__aspnet_Pe__PathI__46E78A0C[1],
                        PageSettings,
                        LastUpdatedDate};
         this.Rows.Add(rowaspnet_PersonalizationAllUsersRow);
         return rowaspnet_PersonalizationAllUsersRow;
      }

      public aspnet_PersonalizationAllUsersRow FindByPathId(System.Guid PathId)
      {
         return ((aspnet_PersonalizationAllUsersRow)(this.Rows.Find(new object[] {
                            PathId})));
      }

      public virtual System.Collections.IEnumerator GetEnumerator()
      {
         return this.Rows.GetEnumerator();
      }

      public override System.Data.DataTable Clone()
      {
         aspnet_PersonalizationAllUsersDataTable cln = ((aspnet_PersonalizationAllUsersDataTable)(base.Clone()));
         cln.InitVars();
         return cln;
      }

      protected override System.Data.DataTable CreateInstance()
      {
         return new aspnet_PersonalizationAllUsersDataTable();
      }

      internal void InitVars()
      {
         this.columnPathId = base.Columns["PathId"];
         this.columnPageSettings = base.Columns["PageSettings"];
         this.columnLastUpdatedDate = base.Columns["LastUpdatedDate"];
      }

      private void InitClass()
      {
         this.columnPathId = new System.Data.DataColumn("PathId",typeof(System.Guid),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnPathId);
         this.columnPageSettings = new System.Data.DataColumn("PageSettings",typeof(byte[]),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnPageSettings);
         this.columnLastUpdatedDate = new System.Data.DataColumn("LastUpdatedDate",typeof(System.DateTime),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnLastUpdatedDate);
         this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1",new System.Data.DataColumn[] {
                                this.columnPathId},true));
         this.columnPathId.AllowDBNull = false;
         this.columnPathId.Unique = true;
         this.columnPageSettings.AllowDBNull = false;
         this.columnLastUpdatedDate.AllowDBNull = false;
      }

      public aspnet_PersonalizationAllUsersRow Newaspnet_PersonalizationAllUsersRow()
      {
         return ((aspnet_PersonalizationAllUsersRow)(this.NewRow()));
      }

      protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
      {
         return new aspnet_PersonalizationAllUsersRow(builder);
      }

      protected override System.Type GetRowType()
      {
         return typeof(aspnet_PersonalizationAllUsersRow);
      }

      protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowChanged(e);
         if((this.aspnet_PersonalizationAllUsersRowChanged != null))
         {
            this.aspnet_PersonalizationAllUsersRowChanged(this,new aspnet_PersonalizationAllUsersRowChangeEvent(((aspnet_PersonalizationAllUsersRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowChanging(e);
         if((this.aspnet_PersonalizationAllUsersRowChanging != null))
         {
            this.aspnet_PersonalizationAllUsersRowChanging(this,new aspnet_PersonalizationAllUsersRowChangeEvent(((aspnet_PersonalizationAllUsersRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowDeleted(e);
         if((this.aspnet_PersonalizationAllUsersRowDeleted != null))
         {
            this.aspnet_PersonalizationAllUsersRowDeleted(this,new aspnet_PersonalizationAllUsersRowChangeEvent(((aspnet_PersonalizationAllUsersRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowDeleting(e);
         if((this.aspnet_PersonalizationAllUsersRowDeleting != null))
         {
            this.aspnet_PersonalizationAllUsersRowDeleting(this,new aspnet_PersonalizationAllUsersRowChangeEvent(((aspnet_PersonalizationAllUsersRow)(e.Row)),e.Action));
         }
      }

      public void Removeaspnet_PersonalizationAllUsersRow(aspnet_PersonalizationAllUsersRow row)
      {
         this.Rows.Remove(row);
      }

      public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
      {
         System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
         System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
         AspNetDbDataSet ds = new AspNetDbDataSet();
         xs.Add(ds.GetSchemaSerializable());
         System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
         any1.Namespace = "http://www.w3.org/2001/XMLSchema";
         any1.MinOccurs = new decimal(0);
         any1.MaxOccurs = decimal.MaxValue;
         any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
         sequence.Items.Add(any1);
         System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
         any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
         any2.MinOccurs = new decimal(1);
         any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
         sequence.Items.Add(any2);
         System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
         attribute1.Name = "namespace";
         attribute1.FixedValue = ds.Namespace;
         type.Attributes.Add(attribute1);
         System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
         attribute2.Name = "tableTypeName";
         attribute2.FixedValue = "aspnet_PersonalizationAllUsersDataTable";
         type.Attributes.Add(attribute2);
         type.Particle = sequence;
         return type;
      }
   }

   [System.Serializable()]
   [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
   public partial class aspnet_PersonalizationPerUserDataTable : System.Data.DataTable,System.Collections.IEnumerable
   {

      private System.Data.DataColumn columnId;

      private System.Data.DataColumn columnPathId;

      private System.Data.DataColumn columnUserId;

      private System.Data.DataColumn columnPageSettings;

      private System.Data.DataColumn columnLastUpdatedDate;

      public aspnet_PersonalizationPerUserDataTable()
      {
         this.TableName = "aspnet_PersonalizationPerUser";
         this.BeginInit();
         this.InitClass();
         this.EndInit();
      }

      internal aspnet_PersonalizationPerUserDataTable(System.Data.DataTable table)
      {
         this.TableName = table.TableName;
         if((table.CaseSensitive != table.DataSet.CaseSensitive))
         {
            this.CaseSensitive = table.CaseSensitive;
         }
         if((table.Locale.ToString() != table.DataSet.Locale.ToString()))
         {
            this.Locale = table.Locale;
         }
         if((table.Namespace != table.DataSet.Namespace))
         {
            this.Namespace = table.Namespace;
         }
         this.Prefix = table.Prefix;
         this.MinimumCapacity = table.MinimumCapacity;
      }

      protected aspnet_PersonalizationPerUserDataTable(System.Runtime.Serialization.SerializationInfo info,System.Runtime.Serialization.StreamingContext context)
         :
              base(info,context)
      {
         this.InitVars();
      }

      public System.Data.DataColumn IdColumn
      {
         get
         {
            return this.columnId;
         }
      }

      public System.Data.DataColumn PathIdColumn
      {
         get
         {
            return this.columnPathId;
         }
      }

      public System.Data.DataColumn UserIdColumn
      {
         get
         {
            return this.columnUserId;
         }
      }

      public System.Data.DataColumn PageSettingsColumn
      {
         get
         {
            return this.columnPageSettings;
         }
      }

      public System.Data.DataColumn LastUpdatedDateColumn
      {
         get
         {
            return this.columnLastUpdatedDate;
         }
      }

      [System.ComponentModel.Browsable(false)]
      public int Count
      {
         get
         {
            return this.Rows.Count;
         }
      }

      public aspnet_PersonalizationPerUserRow this[int index]
      {
         get
         {
            return ((aspnet_PersonalizationPerUserRow)(this.Rows[index]));
         }
      }

      public event aspnet_PersonalizationPerUserRowChangeEventHandler aspnet_PersonalizationPerUserRowChanged;

      public event aspnet_PersonalizationPerUserRowChangeEventHandler aspnet_PersonalizationPerUserRowChanging;

      public event aspnet_PersonalizationPerUserRowChangeEventHandler aspnet_PersonalizationPerUserRowDeleted;

      public event aspnet_PersonalizationPerUserRowChangeEventHandler aspnet_PersonalizationPerUserRowDeleting;

      public void Addaspnet_PersonalizationPerUserRow(aspnet_PersonalizationPerUserRow row)
      {
         this.Rows.Add(row);
      }

      public aspnet_PersonalizationPerUserRow Addaspnet_PersonalizationPerUserRow(System.Guid Id,aspnet_PathsRow parentaspnet_PathsRowByFK__aspnet_Pe__PathI__4AB81AF0,aspnet_UsersRow parentaspnet_UsersRowByFK__aspnet_Pe__UserI__4BAC3F29,byte[] PageSettings,System.DateTime LastUpdatedDate)
      {
         aspnet_PersonalizationPerUserRow rowaspnet_PersonalizationPerUserRow = ((aspnet_PersonalizationPerUserRow)(this.NewRow()));
         rowaspnet_PersonalizationPerUserRow.ItemArray = new object[] {
                        Id,
                        parentaspnet_PathsRowByFK__aspnet_Pe__PathI__4AB81AF0[1],
                        parentaspnet_UsersRowByFK__aspnet_Pe__UserI__4BAC3F29[1],
                        PageSettings,
                        LastUpdatedDate};
         this.Rows.Add(rowaspnet_PersonalizationPerUserRow);
         return rowaspnet_PersonalizationPerUserRow;
      }

      public virtual System.Collections.IEnumerator GetEnumerator()
      {
         return this.Rows.GetEnumerator();
      }

      public override System.Data.DataTable Clone()
      {
         aspnet_PersonalizationPerUserDataTable cln = ((aspnet_PersonalizationPerUserDataTable)(base.Clone()));
         cln.InitVars();
         return cln;
      }

      protected override System.Data.DataTable CreateInstance()
      {
         return new aspnet_PersonalizationPerUserDataTable();
      }

      internal void InitVars()
      {
         this.columnId = base.Columns["Id"];
         this.columnPathId = base.Columns["PathId"];
         this.columnUserId = base.Columns["UserId"];
         this.columnPageSettings = base.Columns["PageSettings"];
         this.columnLastUpdatedDate = base.Columns["LastUpdatedDate"];
      }

      private void InitClass()
      {
         this.columnId = new System.Data.DataColumn("Id",typeof(System.Guid),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnId);
         this.columnPathId = new System.Data.DataColumn("PathId",typeof(System.Guid),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnPathId);
         this.columnUserId = new System.Data.DataColumn("UserId",typeof(System.Guid),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnUserId);
         this.columnPageSettings = new System.Data.DataColumn("PageSettings",typeof(byte[]),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnPageSettings);
         this.columnLastUpdatedDate = new System.Data.DataColumn("LastUpdatedDate",typeof(System.DateTime),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnLastUpdatedDate);
         this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1",new System.Data.DataColumn[] {
                                this.columnPathId,
                                this.columnUserId},false));
         this.columnId.AllowDBNull = false;
         this.columnPageSettings.AllowDBNull = false;
         this.columnLastUpdatedDate.AllowDBNull = false;
      }

      public aspnet_PersonalizationPerUserRow Newaspnet_PersonalizationPerUserRow()
      {
         return ((aspnet_PersonalizationPerUserRow)(this.NewRow()));
      }

      protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
      {
         return new aspnet_PersonalizationPerUserRow(builder);
      }

      protected override System.Type GetRowType()
      {
         return typeof(aspnet_PersonalizationPerUserRow);
      }

      protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowChanged(e);
         if((this.aspnet_PersonalizationPerUserRowChanged != null))
         {
            this.aspnet_PersonalizationPerUserRowChanged(this,new aspnet_PersonalizationPerUserRowChangeEvent(((aspnet_PersonalizationPerUserRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowChanging(e);
         if((this.aspnet_PersonalizationPerUserRowChanging != null))
         {
            this.aspnet_PersonalizationPerUserRowChanging(this,new aspnet_PersonalizationPerUserRowChangeEvent(((aspnet_PersonalizationPerUserRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowDeleted(e);
         if((this.aspnet_PersonalizationPerUserRowDeleted != null))
         {
            this.aspnet_PersonalizationPerUserRowDeleted(this,new aspnet_PersonalizationPerUserRowChangeEvent(((aspnet_PersonalizationPerUserRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowDeleting(e);
         if((this.aspnet_PersonalizationPerUserRowDeleting != null))
         {
            this.aspnet_PersonalizationPerUserRowDeleting(this,new aspnet_PersonalizationPerUserRowChangeEvent(((aspnet_PersonalizationPerUserRow)(e.Row)),e.Action));
         }
      }

      public void Removeaspnet_PersonalizationPerUserRow(aspnet_PersonalizationPerUserRow row)
      {
         this.Rows.Remove(row);
      }

      public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
      {
         System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
         System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
         AspNetDbDataSet ds = new AspNetDbDataSet();
         xs.Add(ds.GetSchemaSerializable());
         System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
         any1.Namespace = "http://www.w3.org/2001/XMLSchema";
         any1.MinOccurs = new decimal(0);
         any1.MaxOccurs = decimal.MaxValue;
         any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
         sequence.Items.Add(any1);
         System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
         any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
         any2.MinOccurs = new decimal(1);
         any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
         sequence.Items.Add(any2);
         System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
         attribute1.Name = "namespace";
         attribute1.FixedValue = ds.Namespace;
         type.Attributes.Add(attribute1);
         System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
         attribute2.Name = "tableTypeName";
         attribute2.FixedValue = "aspnet_PersonalizationPerUserDataTable";
         type.Attributes.Add(attribute2);
         type.Particle = sequence;
         return type;
      }
   }

   [System.Serializable()]
   [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
   public partial class aspnet_ProfileDataTable : System.Data.DataTable,System.Collections.IEnumerable
   {

      private System.Data.DataColumn columnUserId;

      private System.Data.DataColumn columnPropertyNames;

      private System.Data.DataColumn columnPropertyValuesString;

      private System.Data.DataColumn columnPropertyValuesBinary;

      private System.Data.DataColumn columnLastUpdatedDate;

      public aspnet_ProfileDataTable()
      {
         this.TableName = "aspnet_Profile";
         this.BeginInit();
         this.InitClass();
         this.EndInit();
      }

      internal aspnet_ProfileDataTable(System.Data.DataTable table)
      {
         this.TableName = table.TableName;
         if((table.CaseSensitive != table.DataSet.CaseSensitive))
         {
            this.CaseSensitive = table.CaseSensitive;
         }
         if((table.Locale.ToString() != table.DataSet.Locale.ToString()))
         {
            this.Locale = table.Locale;
         }
         if((table.Namespace != table.DataSet.Namespace))
         {
            this.Namespace = table.Namespace;
         }
         this.Prefix = table.Prefix;
         this.MinimumCapacity = table.MinimumCapacity;
      }

      protected aspnet_ProfileDataTable(System.Runtime.Serialization.SerializationInfo info,System.Runtime.Serialization.StreamingContext context)
         :
              base(info,context)
      {
         this.InitVars();
      }

      public System.Data.DataColumn UserIdColumn
      {
         get
         {
            return this.columnUserId;
         }
      }

      public System.Data.DataColumn PropertyNamesColumn
      {
         get
         {
            return this.columnPropertyNames;
         }
      }

      public System.Data.DataColumn PropertyValuesStringColumn
      {
         get
         {
            return this.columnPropertyValuesString;
         }
      }

      public System.Data.DataColumn PropertyValuesBinaryColumn
      {
         get
         {
            return this.columnPropertyValuesBinary;
         }
      }

      public System.Data.DataColumn LastUpdatedDateColumn
      {
         get
         {
            return this.columnLastUpdatedDate;
         }
      }

      [System.ComponentModel.Browsable(false)]
      public int Count
      {
         get
         {
            return this.Rows.Count;
         }
      }

      public aspnet_ProfileRow this[int index]
      {
         get
         {
            return ((aspnet_ProfileRow)(this.Rows[index]));
         }
      }

      public event aspnet_ProfileRowChangeEventHandler aspnet_ProfileRowChanged;

      public event aspnet_ProfileRowChangeEventHandler aspnet_ProfileRowChanging;

      public event aspnet_ProfileRowChangeEventHandler aspnet_ProfileRowDeleted;

      public event aspnet_ProfileRowChangeEventHandler aspnet_ProfileRowDeleting;

      public void Addaspnet_ProfileRow(aspnet_ProfileRow row)
      {
         this.Rows.Add(row);
      }

      public aspnet_ProfileRow Addaspnet_ProfileRow(aspnet_UsersRow parentaspnet_UsersRowByFK__aspnet_Pr__UserI__24927208,string PropertyNames,string PropertyValuesString,byte[] PropertyValuesBinary,System.DateTime LastUpdatedDate)
      {
         aspnet_ProfileRow rowaspnet_ProfileRow = ((aspnet_ProfileRow)(this.NewRow()));
         rowaspnet_ProfileRow.ItemArray = new object[] {
                        parentaspnet_UsersRowByFK__aspnet_Pr__UserI__24927208[1],
                        PropertyNames,
                        PropertyValuesString,
                        PropertyValuesBinary,
                        LastUpdatedDate};
         this.Rows.Add(rowaspnet_ProfileRow);
         return rowaspnet_ProfileRow;
      }

      public aspnet_ProfileRow FindByUserId(System.Guid UserId)
      {
         return ((aspnet_ProfileRow)(this.Rows.Find(new object[] {
                            UserId})));
      }

      public virtual System.Collections.IEnumerator GetEnumerator()
      {
         return this.Rows.GetEnumerator();
      }

      public override System.Data.DataTable Clone()
      {
         aspnet_ProfileDataTable cln = ((aspnet_ProfileDataTable)(base.Clone()));
         cln.InitVars();
         return cln;
      }

      protected override System.Data.DataTable CreateInstance()
      {
         return new aspnet_ProfileDataTable();
      }

      internal void InitVars()
      {
         this.columnUserId = base.Columns["UserId"];
         this.columnPropertyNames = base.Columns["PropertyNames"];
         this.columnPropertyValuesString = base.Columns["PropertyValuesString"];
         this.columnPropertyValuesBinary = base.Columns["PropertyValuesBinary"];
         this.columnLastUpdatedDate = base.Columns["LastUpdatedDate"];
      }

      private void InitClass()
      {
         this.columnUserId = new System.Data.DataColumn("UserId",typeof(System.Guid),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnUserId);
         this.columnPropertyNames = new System.Data.DataColumn("PropertyNames",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnPropertyNames);
         this.columnPropertyValuesString = new System.Data.DataColumn("PropertyValuesString",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnPropertyValuesString);
         this.columnPropertyValuesBinary = new System.Data.DataColumn("PropertyValuesBinary",typeof(byte[]),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnPropertyValuesBinary);
         this.columnLastUpdatedDate = new System.Data.DataColumn("LastUpdatedDate",typeof(System.DateTime),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnLastUpdatedDate);
         this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1",new System.Data.DataColumn[] {
                                this.columnUserId},true));
         this.columnUserId.AllowDBNull = false;
         this.columnUserId.Unique = true;
         this.columnPropertyNames.AllowDBNull = false;
         this.columnPropertyNames.MaxLength = 1073741823;
         this.columnPropertyValuesString.AllowDBNull = false;
         this.columnPropertyValuesString.MaxLength = 1073741823;
         this.columnPropertyValuesBinary.AllowDBNull = false;
         this.columnLastUpdatedDate.AllowDBNull = false;
      }

      public aspnet_ProfileRow Newaspnet_ProfileRow()
      {
         return ((aspnet_ProfileRow)(this.NewRow()));
      }

      protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
      {
         return new aspnet_ProfileRow(builder);
      }

      protected override System.Type GetRowType()
      {
         return typeof(aspnet_ProfileRow);
      }

      protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowChanged(e);
         if((this.aspnet_ProfileRowChanged != null))
         {
            this.aspnet_ProfileRowChanged(this,new aspnet_ProfileRowChangeEvent(((aspnet_ProfileRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowChanging(e);
         if((this.aspnet_ProfileRowChanging != null))
         {
            this.aspnet_ProfileRowChanging(this,new aspnet_ProfileRowChangeEvent(((aspnet_ProfileRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowDeleted(e);
         if((this.aspnet_ProfileRowDeleted != null))
         {
            this.aspnet_ProfileRowDeleted(this,new aspnet_ProfileRowChangeEvent(((aspnet_ProfileRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowDeleting(e);
         if((this.aspnet_ProfileRowDeleting != null))
         {
            this.aspnet_ProfileRowDeleting(this,new aspnet_ProfileRowChangeEvent(((aspnet_ProfileRow)(e.Row)),e.Action));
         }
      }

      public void Removeaspnet_ProfileRow(aspnet_ProfileRow row)
      {
         this.Rows.Remove(row);
      }

      public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
      {
         System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
         System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
         AspNetDbDataSet ds = new AspNetDbDataSet();
         xs.Add(ds.GetSchemaSerializable());
         System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
         any1.Namespace = "http://www.w3.org/2001/XMLSchema";
         any1.MinOccurs = new decimal(0);
         any1.MaxOccurs = decimal.MaxValue;
         any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
         sequence.Items.Add(any1);
         System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
         any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
         any2.MinOccurs = new decimal(1);
         any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
         sequence.Items.Add(any2);
         System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
         attribute1.Name = "namespace";
         attribute1.FixedValue = ds.Namespace;
         type.Attributes.Add(attribute1);
         System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
         attribute2.Name = "tableTypeName";
         attribute2.FixedValue = "aspnet_ProfileDataTable";
         type.Attributes.Add(attribute2);
         type.Particle = sequence;
         return type;
      }
   }

   [System.Serializable()]
   [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
   public partial class aspnet_RolesDataTable : System.Data.DataTable,System.Collections.IEnumerable
   {

      private System.Data.DataColumn columnApplicationId;

      private System.Data.DataColumn columnRoleId;

      private System.Data.DataColumn columnRoleName;

      private System.Data.DataColumn columnLoweredRoleName;

      private System.Data.DataColumn columnDescription;

      public aspnet_RolesDataTable()
      {
         this.TableName = "aspnet_Roles";
         this.BeginInit();
         this.InitClass();
         this.EndInit();
      }

      internal aspnet_RolesDataTable(System.Data.DataTable table)
      {
         this.TableName = table.TableName;
         if((table.CaseSensitive != table.DataSet.CaseSensitive))
         {
            this.CaseSensitive = table.CaseSensitive;
         }
         if((table.Locale.ToString() != table.DataSet.Locale.ToString()))
         {
            this.Locale = table.Locale;
         }
         if((table.Namespace != table.DataSet.Namespace))
         {
            this.Namespace = table.Namespace;
         }
         this.Prefix = table.Prefix;
         this.MinimumCapacity = table.MinimumCapacity;
      }

      protected aspnet_RolesDataTable(System.Runtime.Serialization.SerializationInfo info,System.Runtime.Serialization.StreamingContext context)
         :
              base(info,context)
      {
         this.InitVars();
      }

      public System.Data.DataColumn ApplicationIdColumn
      {
         get
         {
            return this.columnApplicationId;
         }
      }

      public System.Data.DataColumn RoleIdColumn
      {
         get
         {
            return this.columnRoleId;
         }
      }

      public System.Data.DataColumn RoleNameColumn
      {
         get
         {
            return this.columnRoleName;
         }
      }

      public System.Data.DataColumn LoweredRoleNameColumn
      {
         get
         {
            return this.columnLoweredRoleName;
         }
      }

      public System.Data.DataColumn DescriptionColumn
      {
         get
         {
            return this.columnDescription;
         }
      }

      [System.ComponentModel.Browsable(false)]
      public int Count
      {
         get
         {
            return this.Rows.Count;
         }
      }

      public aspnet_RolesRow this[int index]
      {
         get
         {
            return ((aspnet_RolesRow)(this.Rows[index]));
         }
      }

      public event aspnet_RolesRowChangeEventHandler aspnet_RolesRowChanged;

      public event aspnet_RolesRowChangeEventHandler aspnet_RolesRowChanging;

      public event aspnet_RolesRowChangeEventHandler aspnet_RolesRowDeleted;

      public event aspnet_RolesRowChangeEventHandler aspnet_RolesRowDeleting;

      public void Addaspnet_RolesRow(aspnet_RolesRow row)
      {
         this.Rows.Add(row);
      }

      public aspnet_RolesRow Addaspnet_RolesRow(aspnet_ApplicationsRow parentaspnet_ApplicationsRowByFK__aspnet_Ro__Appli__2E1BDC42,System.Guid RoleId,string RoleName,string LoweredRoleName,string Description)
      {
         aspnet_RolesRow rowaspnet_RolesRow = ((aspnet_RolesRow)(this.NewRow()));
         rowaspnet_RolesRow.ItemArray = new object[] {
                        parentaspnet_ApplicationsRowByFK__aspnet_Ro__Appli__2E1BDC42[2],
                        RoleId,
                        RoleName,
                        LoweredRoleName,
                        Description};
         this.Rows.Add(rowaspnet_RolesRow);
         return rowaspnet_RolesRow;
      }

      public aspnet_RolesRow FindByApplicationIdLoweredRoleName(System.Guid ApplicationId,string LoweredRoleName)
      {
         return ((aspnet_RolesRow)(this.Rows.Find(new object[] {
                            ApplicationId,
                            LoweredRoleName})));
      }

      public virtual System.Collections.IEnumerator GetEnumerator()
      {
         return this.Rows.GetEnumerator();
      }

      public override System.Data.DataTable Clone()
      {
         aspnet_RolesDataTable cln = ((aspnet_RolesDataTable)(base.Clone()));
         cln.InitVars();
         return cln;
      }

      protected override System.Data.DataTable CreateInstance()
      {
         return new aspnet_RolesDataTable();
      }

      internal void InitVars()
      {
         this.columnApplicationId = base.Columns["ApplicationId"];
         this.columnRoleId = base.Columns["RoleId"];
         this.columnRoleName = base.Columns["RoleName"];
         this.columnLoweredRoleName = base.Columns["LoweredRoleName"];
         this.columnDescription = base.Columns["Description"];
      }

      private void InitClass()
      {
         this.columnApplicationId = new System.Data.DataColumn("ApplicationId",typeof(System.Guid),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnApplicationId);
         this.columnRoleId = new System.Data.DataColumn("RoleId",typeof(System.Guid),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnRoleId);
         this.columnRoleName = new System.Data.DataColumn("RoleName",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnRoleName);
         this.columnLoweredRoleName = new System.Data.DataColumn("LoweredRoleName",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnLoweredRoleName);
         this.columnDescription = new System.Data.DataColumn("Description",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnDescription);
         this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1",new System.Data.DataColumn[] {
                                this.columnApplicationId,
                                this.columnLoweredRoleName},true));
         this.columnApplicationId.AllowDBNull = false;
         this.columnRoleId.AllowDBNull = false;
         this.columnRoleName.AllowDBNull = false;
         this.columnRoleName.MaxLength = 256;
         this.columnLoweredRoleName.AllowDBNull = false;
         this.columnLoweredRoleName.MaxLength = 256;
         this.columnDescription.MaxLength = 256;
      }

      public aspnet_RolesRow Newaspnet_RolesRow()
      {
         return ((aspnet_RolesRow)(this.NewRow()));
      }

      protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
      {
         return new aspnet_RolesRow(builder);
      }

      protected override System.Type GetRowType()
      {
         return typeof(aspnet_RolesRow);
      }

      protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowChanged(e);
         if((this.aspnet_RolesRowChanged != null))
         {
            this.aspnet_RolesRowChanged(this,new aspnet_RolesRowChangeEvent(((aspnet_RolesRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowChanging(e);
         if((this.aspnet_RolesRowChanging != null))
         {
            this.aspnet_RolesRowChanging(this,new aspnet_RolesRowChangeEvent(((aspnet_RolesRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowDeleted(e);
         if((this.aspnet_RolesRowDeleted != null))
         {
            this.aspnet_RolesRowDeleted(this,new aspnet_RolesRowChangeEvent(((aspnet_RolesRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowDeleting(e);
         if((this.aspnet_RolesRowDeleting != null))
         {
            this.aspnet_RolesRowDeleting(this,new aspnet_RolesRowChangeEvent(((aspnet_RolesRow)(e.Row)),e.Action));
         }
      }

      public void Removeaspnet_RolesRow(aspnet_RolesRow row)
      {
         this.Rows.Remove(row);
      }

      public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
      {
         System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
         System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
         AspNetDbDataSet ds = new AspNetDbDataSet();
         xs.Add(ds.GetSchemaSerializable());
         System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
         any1.Namespace = "http://www.w3.org/2001/XMLSchema";
         any1.MinOccurs = new decimal(0);
         any1.MaxOccurs = decimal.MaxValue;
         any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
         sequence.Items.Add(any1);
         System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
         any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
         any2.MinOccurs = new decimal(1);
         any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
         sequence.Items.Add(any2);
         System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
         attribute1.Name = "namespace";
         attribute1.FixedValue = ds.Namespace;
         type.Attributes.Add(attribute1);
         System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
         attribute2.Name = "tableTypeName";
         attribute2.FixedValue = "aspnet_RolesDataTable";
         type.Attributes.Add(attribute2);
         type.Particle = sequence;
         return type;
      }
   }

   [System.Serializable()]
   [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
   public partial class aspnet_SchemaVersionsDataTable : System.Data.DataTable,System.Collections.IEnumerable
   {

      private System.Data.DataColumn columnFeature;

      private System.Data.DataColumn columnCompatibleSchemaVersion;

      private System.Data.DataColumn columnIsCurrentVersion;

      public aspnet_SchemaVersionsDataTable()
      {
         this.TableName = "aspnet_SchemaVersions";
         this.BeginInit();
         this.InitClass();
         this.EndInit();
      }

      internal aspnet_SchemaVersionsDataTable(System.Data.DataTable table)
      {
         this.TableName = table.TableName;
         if((table.CaseSensitive != table.DataSet.CaseSensitive))
         {
            this.CaseSensitive = table.CaseSensitive;
         }
         if((table.Locale.ToString() != table.DataSet.Locale.ToString()))
         {
            this.Locale = table.Locale;
         }
         if((table.Namespace != table.DataSet.Namespace))
         {
            this.Namespace = table.Namespace;
         }
         this.Prefix = table.Prefix;
         this.MinimumCapacity = table.MinimumCapacity;
      }

      protected aspnet_SchemaVersionsDataTable(System.Runtime.Serialization.SerializationInfo info,System.Runtime.Serialization.StreamingContext context)
         :
              base(info,context)
      {
         this.InitVars();
      }

      public System.Data.DataColumn FeatureColumn
      {
         get
         {
            return this.columnFeature;
         }
      }

      public System.Data.DataColumn CompatibleSchemaVersionColumn
      {
         get
         {
            return this.columnCompatibleSchemaVersion;
         }
      }

      public System.Data.DataColumn IsCurrentVersionColumn
      {
         get
         {
            return this.columnIsCurrentVersion;
         }
      }

      [System.ComponentModel.Browsable(false)]
      public int Count
      {
         get
         {
            return this.Rows.Count;
         }
      }

      public aspnet_SchemaVersionsRow this[int index]
      {
         get
         {
            return ((aspnet_SchemaVersionsRow)(this.Rows[index]));
         }
      }

      public event aspnet_SchemaVersionsRowChangeEventHandler aspnet_SchemaVersionsRowChanged;

      public event aspnet_SchemaVersionsRowChangeEventHandler aspnet_SchemaVersionsRowChanging;

      public event aspnet_SchemaVersionsRowChangeEventHandler aspnet_SchemaVersionsRowDeleted;

      public event aspnet_SchemaVersionsRowChangeEventHandler aspnet_SchemaVersionsRowDeleting;

      public void Addaspnet_SchemaVersionsRow(aspnet_SchemaVersionsRow row)
      {
         this.Rows.Add(row);
      }

      public aspnet_SchemaVersionsRow Addaspnet_SchemaVersionsRow(string Feature,string CompatibleSchemaVersion,bool IsCurrentVersion)
      {
         aspnet_SchemaVersionsRow rowaspnet_SchemaVersionsRow = ((aspnet_SchemaVersionsRow)(this.NewRow()));
         rowaspnet_SchemaVersionsRow.ItemArray = new object[] {
                        Feature,
                        CompatibleSchemaVersion,
                        IsCurrentVersion};
         this.Rows.Add(rowaspnet_SchemaVersionsRow);
         return rowaspnet_SchemaVersionsRow;
      }

      public aspnet_SchemaVersionsRow FindByFeatureCompatibleSchemaVersion(string Feature,string CompatibleSchemaVersion)
      {
         return ((aspnet_SchemaVersionsRow)(this.Rows.Find(new object[] {
                            Feature,
                            CompatibleSchemaVersion})));
      }

      public virtual System.Collections.IEnumerator GetEnumerator()
      {
         return this.Rows.GetEnumerator();
      }

      public override System.Data.DataTable Clone()
      {
         aspnet_SchemaVersionsDataTable cln = ((aspnet_SchemaVersionsDataTable)(base.Clone()));
         cln.InitVars();
         return cln;
      }

      protected override System.Data.DataTable CreateInstance()
      {
         return new aspnet_SchemaVersionsDataTable();
      }

      internal void InitVars()
      {
         this.columnFeature = base.Columns["Feature"];
         this.columnCompatibleSchemaVersion = base.Columns["CompatibleSchemaVersion"];
         this.columnIsCurrentVersion = base.Columns["IsCurrentVersion"];
      }

      private void InitClass()
      {
         this.columnFeature = new System.Data.DataColumn("Feature",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnFeature);
         this.columnCompatibleSchemaVersion = new System.Data.DataColumn("CompatibleSchemaVersion",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnCompatibleSchemaVersion);
         this.columnIsCurrentVersion = new System.Data.DataColumn("IsCurrentVersion",typeof(bool),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnIsCurrentVersion);
         this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1",new System.Data.DataColumn[] {
                                this.columnFeature,
                                this.columnCompatibleSchemaVersion},true));
         this.columnFeature.AllowDBNull = false;
         this.columnFeature.MaxLength = 128;
         this.columnCompatibleSchemaVersion.AllowDBNull = false;
         this.columnCompatibleSchemaVersion.MaxLength = 128;
         this.columnIsCurrentVersion.AllowDBNull = false;
      }

      public aspnet_SchemaVersionsRow Newaspnet_SchemaVersionsRow()
      {
         return ((aspnet_SchemaVersionsRow)(this.NewRow()));
      }

      protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
      {
         return new aspnet_SchemaVersionsRow(builder);
      }

      protected override System.Type GetRowType()
      {
         return typeof(aspnet_SchemaVersionsRow);
      }

      protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowChanged(e);
         if((this.aspnet_SchemaVersionsRowChanged != null))
         {
            this.aspnet_SchemaVersionsRowChanged(this,new aspnet_SchemaVersionsRowChangeEvent(((aspnet_SchemaVersionsRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowChanging(e);
         if((this.aspnet_SchemaVersionsRowChanging != null))
         {
            this.aspnet_SchemaVersionsRowChanging(this,new aspnet_SchemaVersionsRowChangeEvent(((aspnet_SchemaVersionsRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowDeleted(e);
         if((this.aspnet_SchemaVersionsRowDeleted != null))
         {
            this.aspnet_SchemaVersionsRowDeleted(this,new aspnet_SchemaVersionsRowChangeEvent(((aspnet_SchemaVersionsRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowDeleting(e);
         if((this.aspnet_SchemaVersionsRowDeleting != null))
         {
            this.aspnet_SchemaVersionsRowDeleting(this,new aspnet_SchemaVersionsRowChangeEvent(((aspnet_SchemaVersionsRow)(e.Row)),e.Action));
         }
      }

      public void Removeaspnet_SchemaVersionsRow(aspnet_SchemaVersionsRow row)
      {
         this.Rows.Remove(row);
      }

      public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
      {
         System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
         System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
         AspNetDbDataSet ds = new AspNetDbDataSet();
         xs.Add(ds.GetSchemaSerializable());
         System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
         any1.Namespace = "http://www.w3.org/2001/XMLSchema";
         any1.MinOccurs = new decimal(0);
         any1.MaxOccurs = decimal.MaxValue;
         any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
         sequence.Items.Add(any1);
         System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
         any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
         any2.MinOccurs = new decimal(1);
         any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
         sequence.Items.Add(any2);
         System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
         attribute1.Name = "namespace";
         attribute1.FixedValue = ds.Namespace;
         type.Attributes.Add(attribute1);
         System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
         attribute2.Name = "tableTypeName";
         attribute2.FixedValue = "aspnet_SchemaVersionsDataTable";
         type.Attributes.Add(attribute2);
         type.Particle = sequence;
         return type;
      }
   }

   [System.Serializable()]
   [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
   public partial class aspnet_UsersDataTable : System.Data.DataTable,System.Collections.IEnumerable
   {

      private System.Data.DataColumn columnApplicationId;

      private System.Data.DataColumn columnUserId;

      private System.Data.DataColumn columnUserName;

      private System.Data.DataColumn columnLoweredUserName;

      private System.Data.DataColumn columnMobileAlias;

      private System.Data.DataColumn columnIsAnonymous;

      private System.Data.DataColumn columnLastActivityDate;

      public aspnet_UsersDataTable()
      {
         this.TableName = "aspnet_Users";
         this.BeginInit();
         this.InitClass();
         this.EndInit();
      }

      internal aspnet_UsersDataTable(System.Data.DataTable table)
      {
         this.TableName = table.TableName;
         if((table.CaseSensitive != table.DataSet.CaseSensitive))
         {
            this.CaseSensitive = table.CaseSensitive;
         }
         if((table.Locale.ToString() != table.DataSet.Locale.ToString()))
         {
            this.Locale = table.Locale;
         }
         if((table.Namespace != table.DataSet.Namespace))
         {
            this.Namespace = table.Namespace;
         }
         this.Prefix = table.Prefix;
         this.MinimumCapacity = table.MinimumCapacity;
      }

      protected aspnet_UsersDataTable(System.Runtime.Serialization.SerializationInfo info,System.Runtime.Serialization.StreamingContext context)
         :
              base(info,context)
      {
         this.InitVars();
      }

      public System.Data.DataColumn ApplicationIdColumn
      {
         get
         {
            return this.columnApplicationId;
         }
      }

      public System.Data.DataColumn UserIdColumn
      {
         get
         {
            return this.columnUserId;
         }
      }

      public System.Data.DataColumn UserNameColumn
      {
         get
         {
            return this.columnUserName;
         }
      }

      public System.Data.DataColumn LoweredUserNameColumn
      {
         get
         {
            return this.columnLoweredUserName;
         }
      }

      public System.Data.DataColumn MobileAliasColumn
      {
         get
         {
            return this.columnMobileAlias;
         }
      }

      public System.Data.DataColumn IsAnonymousColumn
      {
         get
         {
            return this.columnIsAnonymous;
         }
      }

      public System.Data.DataColumn LastActivityDateColumn
      {
         get
         {
            return this.columnLastActivityDate;
         }
      }

      [System.ComponentModel.Browsable(false)]
      public int Count
      {
         get
         {
            return this.Rows.Count;
         }
      }

      public aspnet_UsersRow this[int index]
      {
         get
         {
            return ((aspnet_UsersRow)(this.Rows[index]));
         }
      }

      public event aspnet_UsersRowChangeEventHandler aspnet_UsersRowChanged;

      public event aspnet_UsersRowChangeEventHandler aspnet_UsersRowChanging;

      public event aspnet_UsersRowChangeEventHandler aspnet_UsersRowDeleted;

      public event aspnet_UsersRowChangeEventHandler aspnet_UsersRowDeleting;

      public void Addaspnet_UsersRow(aspnet_UsersRow row)
      {
         this.Rows.Add(row);
      }

      public aspnet_UsersRow Addaspnet_UsersRow(aspnet_ApplicationsRow parentaspnet_ApplicationsRowByFK__aspnet_Us__Appli__7E6CC920,System.Guid UserId,string UserName,string LoweredUserName,string MobileAlias,bool IsAnonymous,System.DateTime LastActivityDate)
      {
         aspnet_UsersRow rowaspnet_UsersRow = ((aspnet_UsersRow)(this.NewRow()));
         rowaspnet_UsersRow.ItemArray = new object[] {
                        parentaspnet_ApplicationsRowByFK__aspnet_Us__Appli__7E6CC920[2],
                        UserId,
                        UserName,
                        LoweredUserName,
                        MobileAlias,
                        IsAnonymous,
                        LastActivityDate};
         this.Rows.Add(rowaspnet_UsersRow);
         return rowaspnet_UsersRow;
      }

      public aspnet_UsersRow FindByApplicationIdLoweredUserName(System.Guid ApplicationId,string LoweredUserName)
      {
         return ((aspnet_UsersRow)(this.Rows.Find(new object[] {
                            ApplicationId,
                            LoweredUserName})));
      }

      public virtual System.Collections.IEnumerator GetEnumerator()
      {
         return this.Rows.GetEnumerator();
      }

      public override System.Data.DataTable Clone()
      {
         aspnet_UsersDataTable cln = ((aspnet_UsersDataTable)(base.Clone()));
         cln.InitVars();
         return cln;
      }

      protected override System.Data.DataTable CreateInstance()
      {
         return new aspnet_UsersDataTable();
      }

      internal void InitVars()
      {
         this.columnApplicationId = base.Columns["ApplicationId"];
         this.columnUserId = base.Columns["UserId"];
         this.columnUserName = base.Columns["UserName"];
         this.columnLoweredUserName = base.Columns["LoweredUserName"];
         this.columnMobileAlias = base.Columns["MobileAlias"];
         this.columnIsAnonymous = base.Columns["IsAnonymous"];
         this.columnLastActivityDate = base.Columns["LastActivityDate"];
      }

      private void InitClass()
      {
         this.columnApplicationId = new System.Data.DataColumn("ApplicationId",typeof(System.Guid),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnApplicationId);
         this.columnUserId = new System.Data.DataColumn("UserId",typeof(System.Guid),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnUserId);
         this.columnUserName = new System.Data.DataColumn("UserName",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnUserName);
         this.columnLoweredUserName = new System.Data.DataColumn("LoweredUserName",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnLoweredUserName);
         this.columnMobileAlias = new System.Data.DataColumn("MobileAlias",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnMobileAlias);
         this.columnIsAnonymous = new System.Data.DataColumn("IsAnonymous",typeof(bool),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnIsAnonymous);
         this.columnLastActivityDate = new System.Data.DataColumn("LastActivityDate",typeof(System.DateTime),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnLastActivityDate);
         this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1",new System.Data.DataColumn[] {
                                this.columnApplicationId,
                                this.columnLoweredUserName},true));
         this.columnApplicationId.AllowDBNull = false;
         this.columnUserId.AllowDBNull = false;
         this.columnUserName.AllowDBNull = false;
         this.columnUserName.MaxLength = 256;
         this.columnLoweredUserName.AllowDBNull = false;
         this.columnLoweredUserName.MaxLength = 256;
         this.columnMobileAlias.MaxLength = 16;
         this.columnIsAnonymous.AllowDBNull = false;
         this.columnLastActivityDate.AllowDBNull = false;
      }

      public aspnet_UsersRow Newaspnet_UsersRow()
      {
         return ((aspnet_UsersRow)(this.NewRow()));
      }

      protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
      {
         return new aspnet_UsersRow(builder);
      }

      protected override System.Type GetRowType()
      {
         return typeof(aspnet_UsersRow);
      }

      protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowChanged(e);
         if((this.aspnet_UsersRowChanged != null))
         {
            this.aspnet_UsersRowChanged(this,new aspnet_UsersRowChangeEvent(((aspnet_UsersRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowChanging(e);
         if((this.aspnet_UsersRowChanging != null))
         {
            this.aspnet_UsersRowChanging(this,new aspnet_UsersRowChangeEvent(((aspnet_UsersRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowDeleted(e);
         if((this.aspnet_UsersRowDeleted != null))
         {
            this.aspnet_UsersRowDeleted(this,new aspnet_UsersRowChangeEvent(((aspnet_UsersRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowDeleting(e);
         if((this.aspnet_UsersRowDeleting != null))
         {
            this.aspnet_UsersRowDeleting(this,new aspnet_UsersRowChangeEvent(((aspnet_UsersRow)(e.Row)),e.Action));
         }
      }

      public void Removeaspnet_UsersRow(aspnet_UsersRow row)
      {
         this.Rows.Remove(row);
      }

      public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
      {
         System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
         System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
         AspNetDbDataSet ds = new AspNetDbDataSet();
         xs.Add(ds.GetSchemaSerializable());
         System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
         any1.Namespace = "http://www.w3.org/2001/XMLSchema";
         any1.MinOccurs = new decimal(0);
         any1.MaxOccurs = decimal.MaxValue;
         any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
         sequence.Items.Add(any1);
         System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
         any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
         any2.MinOccurs = new decimal(1);
         any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
         sequence.Items.Add(any2);
         System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
         attribute1.Name = "namespace";
         attribute1.FixedValue = ds.Namespace;
         type.Attributes.Add(attribute1);
         System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
         attribute2.Name = "tableTypeName";
         attribute2.FixedValue = "aspnet_UsersDataTable";
         type.Attributes.Add(attribute2);
         type.Particle = sequence;
         return type;
      }
   }

   [System.Serializable()]
   [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
   public partial class aspnet_UsersInRolesDataTable : System.Data.DataTable,System.Collections.IEnumerable
   {

      private System.Data.DataColumn columnUserId;

      private System.Data.DataColumn columnRoleId;

      public aspnet_UsersInRolesDataTable()
      {
         this.TableName = "aspnet_UsersInRoles";
         this.BeginInit();
         this.InitClass();
         this.EndInit();
      }

      internal aspnet_UsersInRolesDataTable(System.Data.DataTable table)
      {
         this.TableName = table.TableName;
         if((table.CaseSensitive != table.DataSet.CaseSensitive))
         {
            this.CaseSensitive = table.CaseSensitive;
         }
         if((table.Locale.ToString() != table.DataSet.Locale.ToString()))
         {
            this.Locale = table.Locale;
         }
         if((table.Namespace != table.DataSet.Namespace))
         {
            this.Namespace = table.Namespace;
         }
         this.Prefix = table.Prefix;
         this.MinimumCapacity = table.MinimumCapacity;
      }

      protected aspnet_UsersInRolesDataTable(System.Runtime.Serialization.SerializationInfo info,System.Runtime.Serialization.StreamingContext context)
         :
              base(info,context)
      {
         this.InitVars();
      }

      public System.Data.DataColumn UserIdColumn
      {
         get
         {
            return this.columnUserId;
         }
      }

      public System.Data.DataColumn RoleIdColumn
      {
         get
         {
            return this.columnRoleId;
         }
      }

      [System.ComponentModel.Browsable(false)]
      public int Count
      {
         get
         {
            return this.Rows.Count;
         }
      }

      public aspnet_UsersInRolesRow this[int index]
      {
         get
         {
            return ((aspnet_UsersInRolesRow)(this.Rows[index]));
         }
      }

      public event aspnet_UsersInRolesRowChangeEventHandler aspnet_UsersInRolesRowChanged;

      public event aspnet_UsersInRolesRowChangeEventHandler aspnet_UsersInRolesRowChanging;

      public event aspnet_UsersInRolesRowChangeEventHandler aspnet_UsersInRolesRowDeleted;

      public event aspnet_UsersInRolesRowChangeEventHandler aspnet_UsersInRolesRowDeleting;

      public void Addaspnet_UsersInRolesRow(aspnet_UsersInRolesRow row)
      {
         this.Rows.Add(row);
      }

      public aspnet_UsersInRolesRow Addaspnet_UsersInRolesRow(aspnet_UsersRow parentaspnet_UsersRowByFK__aspnet_Us__UserI__31EC6D26,aspnet_RolesRow parentaspnet_RolesRowByFK__aspnet_Us__RoleI__32E0915F)
      {
         aspnet_UsersInRolesRow rowaspnet_UsersInRolesRow = ((aspnet_UsersInRolesRow)(this.NewRow()));
         rowaspnet_UsersInRolesRow.ItemArray = new object[] {
                        parentaspnet_UsersRowByFK__aspnet_Us__UserI__31EC6D26[1],
                        parentaspnet_RolesRowByFK__aspnet_Us__RoleI__32E0915F[1]};
         this.Rows.Add(rowaspnet_UsersInRolesRow);
         return rowaspnet_UsersInRolesRow;
      }

      public aspnet_UsersInRolesRow FindByUserIdRoleId(System.Guid UserId,System.Guid RoleId)
      {
         return ((aspnet_UsersInRolesRow)(this.Rows.Find(new object[] {
                            UserId,
                            RoleId})));
      }

      public virtual System.Collections.IEnumerator GetEnumerator()
      {
         return this.Rows.GetEnumerator();
      }

      public override System.Data.DataTable Clone()
      {
         aspnet_UsersInRolesDataTable cln = ((aspnet_UsersInRolesDataTable)(base.Clone()));
         cln.InitVars();
         return cln;
      }

      protected override System.Data.DataTable CreateInstance()
      {
         return new aspnet_UsersInRolesDataTable();
      }

      internal void InitVars()
      {
         this.columnUserId = base.Columns["UserId"];
         this.columnRoleId = base.Columns["RoleId"];
      }

      private void InitClass()
      {
         this.columnUserId = new System.Data.DataColumn("UserId",typeof(System.Guid),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnUserId);
         this.columnRoleId = new System.Data.DataColumn("RoleId",typeof(System.Guid),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnRoleId);
         this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1",new System.Data.DataColumn[] {
                                this.columnUserId,
                                this.columnRoleId},true));
         this.columnUserId.AllowDBNull = false;
         this.columnRoleId.AllowDBNull = false;
      }

      public aspnet_UsersInRolesRow Newaspnet_UsersInRolesRow()
      {
         return ((aspnet_UsersInRolesRow)(this.NewRow()));
      }

      protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
      {
         return new aspnet_UsersInRolesRow(builder);
      }

      protected override System.Type GetRowType()
      {
         return typeof(aspnet_UsersInRolesRow);
      }

      protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowChanged(e);
         if((this.aspnet_UsersInRolesRowChanged != null))
         {
            this.aspnet_UsersInRolesRowChanged(this,new aspnet_UsersInRolesRowChangeEvent(((aspnet_UsersInRolesRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowChanging(e);
         if((this.aspnet_UsersInRolesRowChanging != null))
         {
            this.aspnet_UsersInRolesRowChanging(this,new aspnet_UsersInRolesRowChangeEvent(((aspnet_UsersInRolesRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowDeleted(e);
         if((this.aspnet_UsersInRolesRowDeleted != null))
         {
            this.aspnet_UsersInRolesRowDeleted(this,new aspnet_UsersInRolesRowChangeEvent(((aspnet_UsersInRolesRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowDeleting(e);
         if((this.aspnet_UsersInRolesRowDeleting != null))
         {
            this.aspnet_UsersInRolesRowDeleting(this,new aspnet_UsersInRolesRowChangeEvent(((aspnet_UsersInRolesRow)(e.Row)),e.Action));
         }
      }

      public void Removeaspnet_UsersInRolesRow(aspnet_UsersInRolesRow row)
      {
         this.Rows.Remove(row);
      }

      public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
      {
         System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
         System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
         AspNetDbDataSet ds = new AspNetDbDataSet();
         xs.Add(ds.GetSchemaSerializable());
         System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
         any1.Namespace = "http://www.w3.org/2001/XMLSchema";
         any1.MinOccurs = new decimal(0);
         any1.MaxOccurs = decimal.MaxValue;
         any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
         sequence.Items.Add(any1);
         System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
         any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
         any2.MinOccurs = new decimal(1);
         any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
         sequence.Items.Add(any2);
         System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
         attribute1.Name = "namespace";
         attribute1.FixedValue = ds.Namespace;
         type.Attributes.Add(attribute1);
         System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
         attribute2.Name = "tableTypeName";
         attribute2.FixedValue = "aspnet_UsersInRolesDataTable";
         type.Attributes.Add(attribute2);
         type.Particle = sequence;
         return type;
      }
   }

   [System.Serializable()]
   [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
   public partial class aspnet_WebEvent_EventsDataTable : System.Data.DataTable,System.Collections.IEnumerable
   {

      private System.Data.DataColumn columnEventId;

      private System.Data.DataColumn columnEventTimeUtc;

      private System.Data.DataColumn columnEventTime;

      private System.Data.DataColumn columnEventType;

      private System.Data.DataColumn columnEventSequence;

      private System.Data.DataColumn columnEventOccurrence;

      private System.Data.DataColumn columnEventCode;

      private System.Data.DataColumn columnEventDetailCode;

      private System.Data.DataColumn columnMessage;

      private System.Data.DataColumn columnApplicationPath;

      private System.Data.DataColumn columnApplicationVirtualPath;

      private System.Data.DataColumn columnMachineName;

      private System.Data.DataColumn columnRequestUrl;

      private System.Data.DataColumn columnExceptionType;

      private System.Data.DataColumn columnDetails;

      public aspnet_WebEvent_EventsDataTable()
      {
         this.TableName = "aspnet_WebEvent_Events";
         this.BeginInit();
         this.InitClass();
         this.EndInit();
      }

      internal aspnet_WebEvent_EventsDataTable(System.Data.DataTable table)
      {
         this.TableName = table.TableName;
         if((table.CaseSensitive != table.DataSet.CaseSensitive))
         {
            this.CaseSensitive = table.CaseSensitive;
         }
         if((table.Locale.ToString() != table.DataSet.Locale.ToString()))
         {
            this.Locale = table.Locale;
         }
         if((table.Namespace != table.DataSet.Namespace))
         {
            this.Namespace = table.Namespace;
         }
         this.Prefix = table.Prefix;
         this.MinimumCapacity = table.MinimumCapacity;
      }

      protected aspnet_WebEvent_EventsDataTable(System.Runtime.Serialization.SerializationInfo info,System.Runtime.Serialization.StreamingContext context)
         :
              base(info,context)
      {
         this.InitVars();
      }

      public System.Data.DataColumn EventIdColumn
      {
         get
         {
            return this.columnEventId;
         }
      }

      public System.Data.DataColumn EventTimeUtcColumn
      {
         get
         {
            return this.columnEventTimeUtc;
         }
      }

      public System.Data.DataColumn EventTimeColumn
      {
         get
         {
            return this.columnEventTime;
         }
      }

      public System.Data.DataColumn EventTypeColumn
      {
         get
         {
            return this.columnEventType;
         }
      }

      public System.Data.DataColumn EventSequenceColumn
      {
         get
         {
            return this.columnEventSequence;
         }
      }

      public System.Data.DataColumn EventOccurrenceColumn
      {
         get
         {
            return this.columnEventOccurrence;
         }
      }

      public System.Data.DataColumn EventCodeColumn
      {
         get
         {
            return this.columnEventCode;
         }
      }

      public System.Data.DataColumn EventDetailCodeColumn
      {
         get
         {
            return this.columnEventDetailCode;
         }
      }

      public System.Data.DataColumn MessageColumn
      {
         get
         {
            return this.columnMessage;
         }
      }

      public System.Data.DataColumn ApplicationPathColumn
      {
         get
         {
            return this.columnApplicationPath;
         }
      }

      public System.Data.DataColumn ApplicationVirtualPathColumn
      {
         get
         {
            return this.columnApplicationVirtualPath;
         }
      }

      public System.Data.DataColumn MachineNameColumn
      {
         get
         {
            return this.columnMachineName;
         }
      }

      public System.Data.DataColumn RequestUrlColumn
      {
         get
         {
            return this.columnRequestUrl;
         }
      }

      public System.Data.DataColumn ExceptionTypeColumn
      {
         get
         {
            return this.columnExceptionType;
         }
      }

      public System.Data.DataColumn DetailsColumn
      {
         get
         {
            return this.columnDetails;
         }
      }

      [System.ComponentModel.Browsable(false)]
      public int Count
      {
         get
         {
            return this.Rows.Count;
         }
      }

      public aspnet_WebEvent_EventsRow this[int index]
      {
         get
         {
            return ((aspnet_WebEvent_EventsRow)(this.Rows[index]));
         }
      }

      public event aspnet_WebEvent_EventsRowChangeEventHandler aspnet_WebEvent_EventsRowChanged;

      public event aspnet_WebEvent_EventsRowChangeEventHandler aspnet_WebEvent_EventsRowChanging;

      public event aspnet_WebEvent_EventsRowChangeEventHandler aspnet_WebEvent_EventsRowDeleted;

      public event aspnet_WebEvent_EventsRowChangeEventHandler aspnet_WebEvent_EventsRowDeleting;

      public void Addaspnet_WebEvent_EventsRow(aspnet_WebEvent_EventsRow row)
      {
         this.Rows.Add(row);
      }

      public aspnet_WebEvent_EventsRow Addaspnet_WebEvent_EventsRow(string EventId,System.DateTime EventTimeUtc,System.DateTime EventTime,string EventType,decimal EventSequence,decimal EventOccurrence,int EventCode,int EventDetailCode,string Message,string ApplicationPath,string ApplicationVirtualPath,string MachineName,string RequestUrl,string ExceptionType,string Details)
      {
         aspnet_WebEvent_EventsRow rowaspnet_WebEvent_EventsRow = ((aspnet_WebEvent_EventsRow)(this.NewRow()));
         rowaspnet_WebEvent_EventsRow.ItemArray = new object[] {
                        EventId,
                        EventTimeUtc,
                        EventTime,
                        EventType,
                        EventSequence,
                        EventOccurrence,
                        EventCode,
                        EventDetailCode,
                        Message,
                        ApplicationPath,
                        ApplicationVirtualPath,
                        MachineName,
                        RequestUrl,
                        ExceptionType,
                        Details};
         this.Rows.Add(rowaspnet_WebEvent_EventsRow);
         return rowaspnet_WebEvent_EventsRow;
      }

      public aspnet_WebEvent_EventsRow FindByEventId(string EventId)
      {
         return ((aspnet_WebEvent_EventsRow)(this.Rows.Find(new object[] {
                            EventId})));
      }

      public virtual System.Collections.IEnumerator GetEnumerator()
      {
         return this.Rows.GetEnumerator();
      }

      public override System.Data.DataTable Clone()
      {
         aspnet_WebEvent_EventsDataTable cln = ((aspnet_WebEvent_EventsDataTable)(base.Clone()));
         cln.InitVars();
         return cln;
      }

      protected override System.Data.DataTable CreateInstance()
      {
         return new aspnet_WebEvent_EventsDataTable();
      }

      internal void InitVars()
      {
         this.columnEventId = base.Columns["EventId"];
         this.columnEventTimeUtc = base.Columns["EventTimeUtc"];
         this.columnEventTime = base.Columns["EventTime"];
         this.columnEventType = base.Columns["EventType"];
         this.columnEventSequence = base.Columns["EventSequence"];
         this.columnEventOccurrence = base.Columns["EventOccurrence"];
         this.columnEventCode = base.Columns["EventCode"];
         this.columnEventDetailCode = base.Columns["EventDetailCode"];
         this.columnMessage = base.Columns["Message"];
         this.columnApplicationPath = base.Columns["ApplicationPath"];
         this.columnApplicationVirtualPath = base.Columns["ApplicationVirtualPath"];
         this.columnMachineName = base.Columns["MachineName"];
         this.columnRequestUrl = base.Columns["RequestUrl"];
         this.columnExceptionType = base.Columns["ExceptionType"];
         this.columnDetails = base.Columns["Details"];
      }

      private void InitClass()
      {
         this.columnEventId = new System.Data.DataColumn("EventId",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnEventId);
         this.columnEventTimeUtc = new System.Data.DataColumn("EventTimeUtc",typeof(System.DateTime),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnEventTimeUtc);
         this.columnEventTime = new System.Data.DataColumn("EventTime",typeof(System.DateTime),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnEventTime);
         this.columnEventType = new System.Data.DataColumn("EventType",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnEventType);
         this.columnEventSequence = new System.Data.DataColumn("EventSequence",typeof(decimal),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnEventSequence);
         this.columnEventOccurrence = new System.Data.DataColumn("EventOccurrence",typeof(decimal),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnEventOccurrence);
         this.columnEventCode = new System.Data.DataColumn("EventCode",typeof(int),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnEventCode);
         this.columnEventDetailCode = new System.Data.DataColumn("EventDetailCode",typeof(int),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnEventDetailCode);
         this.columnMessage = new System.Data.DataColumn("Message",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnMessage);
         this.columnApplicationPath = new System.Data.DataColumn("ApplicationPath",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnApplicationPath);
         this.columnApplicationVirtualPath = new System.Data.DataColumn("ApplicationVirtualPath",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnApplicationVirtualPath);
         this.columnMachineName = new System.Data.DataColumn("MachineName",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnMachineName);
         this.columnRequestUrl = new System.Data.DataColumn("RequestUrl",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnRequestUrl);
         this.columnExceptionType = new System.Data.DataColumn("ExceptionType",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnExceptionType);
         this.columnDetails = new System.Data.DataColumn("Details",typeof(string),null,System.Data.MappingType.Element);
         base.Columns.Add(this.columnDetails);
         this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1",new System.Data.DataColumn[] {
                                this.columnEventId},true));
         this.columnEventId.AllowDBNull = false;
         this.columnEventId.Unique = true;
         this.columnEventId.MaxLength = 32;
         this.columnEventTimeUtc.AllowDBNull = false;
         this.columnEventTime.AllowDBNull = false;
         this.columnEventType.AllowDBNull = false;
         this.columnEventType.MaxLength = 256;
         this.columnEventSequence.AllowDBNull = false;
         this.columnEventOccurrence.AllowDBNull = false;
         this.columnEventCode.AllowDBNull = false;
         this.columnEventDetailCode.AllowDBNull = false;
         this.columnMessage.MaxLength = 1024;
         this.columnApplicationPath.MaxLength = 256;
         this.columnApplicationVirtualPath.MaxLength = 256;
         this.columnMachineName.AllowDBNull = false;
         this.columnMachineName.MaxLength = 256;
         this.columnRequestUrl.MaxLength = 1024;
         this.columnExceptionType.MaxLength = 256;
         this.columnDetails.MaxLength = 1073741823;
      }

      public aspnet_WebEvent_EventsRow Newaspnet_WebEvent_EventsRow()
      {
         return ((aspnet_WebEvent_EventsRow)(this.NewRow()));
      }

      protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
      {
         return new aspnet_WebEvent_EventsRow(builder);
      }

      protected override System.Type GetRowType()
      {
         return typeof(aspnet_WebEvent_EventsRow);
      }

      protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowChanged(e);
         if((this.aspnet_WebEvent_EventsRowChanged != null))
         {
            this.aspnet_WebEvent_EventsRowChanged(this,new aspnet_WebEvent_EventsRowChangeEvent(((aspnet_WebEvent_EventsRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowChanging(e);
         if((this.aspnet_WebEvent_EventsRowChanging != null))
         {
            this.aspnet_WebEvent_EventsRowChanging(this,new aspnet_WebEvent_EventsRowChangeEvent(((aspnet_WebEvent_EventsRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowDeleted(e);
         if((this.aspnet_WebEvent_EventsRowDeleted != null))
         {
            this.aspnet_WebEvent_EventsRowDeleted(this,new aspnet_WebEvent_EventsRowChangeEvent(((aspnet_WebEvent_EventsRow)(e.Row)),e.Action));
         }
      }

      protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e)
      {
         base.OnRowDeleting(e);
         if((this.aspnet_WebEvent_EventsRowDeleting != null))
         {
            this.aspnet_WebEvent_EventsRowDeleting(this,new aspnet_WebEvent_EventsRowChangeEvent(((aspnet_WebEvent_EventsRow)(e.Row)),e.Action));
         }
      }

      public void Removeaspnet_WebEvent_EventsRow(aspnet_WebEvent_EventsRow row)
      {
         this.Rows.Remove(row);
      }

      public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
      {
         System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
         System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
         AspNetDbDataSet ds = new AspNetDbDataSet();
         xs.Add(ds.GetSchemaSerializable());
         System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
         any1.Namespace = "http://www.w3.org/2001/XMLSchema";
         any1.MinOccurs = new decimal(0);
         any1.MaxOccurs = decimal.MaxValue;
         any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
         sequence.Items.Add(any1);
         System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
         any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
         any2.MinOccurs = new decimal(1);
         any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
         sequence.Items.Add(any2);
         System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
         attribute1.Name = "namespace";
         attribute1.FixedValue = ds.Namespace;
         type.Attributes.Add(attribute1);
         System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
         attribute2.Name = "tableTypeName";
         attribute2.FixedValue = "aspnet_WebEvent_EventsDataTable";
         type.Attributes.Add(attribute2);
         type.Particle = sequence;
         return type;
      }
   }

   public partial class aspnet_ApplicationsRow : System.Data.DataRow
   {

      private aspnet_ApplicationsDataTable tableaspnet_Applications;

      internal aspnet_ApplicationsRow(System.Data.DataRowBuilder rb)
         :
              base(rb)
      {
         this.tableaspnet_Applications = ((aspnet_ApplicationsDataTable)(this.Table));
      }

      public string ApplicationName
      {
         get
         {
            return ((string)(this[this.tableaspnet_Applications.ApplicationNameColumn]));
         }
         set
         {
            this[this.tableaspnet_Applications.ApplicationNameColumn] = value;
         }
      }

      public string LoweredApplicationName
      {
         get
         {
            return ((string)(this[this.tableaspnet_Applications.LoweredApplicationNameColumn]));
         }
         set
         {
            this[this.tableaspnet_Applications.LoweredApplicationNameColumn] = value;
         }
      }

      public System.Guid ApplicationId
      {
         get
         {
            return ((System.Guid)(this[this.tableaspnet_Applications.ApplicationIdColumn]));
         }
         set
         {
            this[this.tableaspnet_Applications.ApplicationIdColumn] = value;
         }
      }

      public string Description
      {
         get
         {
            try
            {
               return ((string)(this[this.tableaspnet_Applications.DescriptionColumn]));
            }
            catch(System.InvalidCastException e)
            {
               throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'aspnet_Applications\' is DBNull.",e);
            }
         }
         set
         {
            this[this.tableaspnet_Applications.DescriptionColumn] = value;
         }
      }

      public bool IsDescriptionNull()
      {
         return this.IsNull(this.tableaspnet_Applications.DescriptionColumn);
      }

      public void SetDescriptionNull()
      {
         this[this.tableaspnet_Applications.DescriptionColumn] = System.Convert.DBNull;
      }

      public aspnet_MembershipRow[] Getaspnet_MembershipRows()
      {
         return ((aspnet_MembershipRow[])(base.GetChildRows(this.Table.ChildRelations["FK__aspnet_Me__Appli__0EA330E9"])));
      }

      public aspnet_PathsRow[] Getaspnet_PathsRows()
      {
         return ((aspnet_PathsRow[])(base.GetChildRows(this.Table.ChildRelations["FK__aspnet_Pa__Appli__412EB0B6"])));
      }

      public aspnet_RolesRow[] Getaspnet_RolesRows()
      {
         return ((aspnet_RolesRow[])(base.GetChildRows(this.Table.ChildRelations["FK__aspnet_Ro__Appli__2E1BDC42"])));
      }

      public aspnet_UsersRow[] Getaspnet_UsersRows()
      {
         return ((aspnet_UsersRow[])(base.GetChildRows(this.Table.ChildRelations["FK__aspnet_Us__Appli__7E6CC920"])));
      }
   }

   public partial class aspnet_MembershipRow : System.Data.DataRow
   {

      private aspnet_MembershipDataTable tableaspnet_Membership;

      internal aspnet_MembershipRow(System.Data.DataRowBuilder rb)
         :
              base(rb)
      {
         this.tableaspnet_Membership = ((aspnet_MembershipDataTable)(this.Table));
      }

      public System.Guid ApplicationId
      {
         get
         {
            return ((System.Guid)(this[this.tableaspnet_Membership.ApplicationIdColumn]));
         }
         set
         {
            this[this.tableaspnet_Membership.ApplicationIdColumn] = value;
         }
      }

      public System.Guid UserId
      {
         get
         {
            return ((System.Guid)(this[this.tableaspnet_Membership.UserIdColumn]));
         }
         set
         {
            this[this.tableaspnet_Membership.UserIdColumn] = value;
         }
      }

      public string Password
      {
         get
         {
            return ((string)(this[this.tableaspnet_Membership.PasswordColumn]));
         }
         set
         {
            this[this.tableaspnet_Membership.PasswordColumn] = value;
         }
      }

      public int PasswordFormat
      {
         get
         {
            return ((int)(this[this.tableaspnet_Membership.PasswordFormatColumn]));
         }
         set
         {
            this[this.tableaspnet_Membership.PasswordFormatColumn] = value;
         }
      }

      public string PasswordSalt
      {
         get
         {
            return ((string)(this[this.tableaspnet_Membership.PasswordSaltColumn]));
         }
         set
         {
            this[this.tableaspnet_Membership.PasswordSaltColumn] = value;
         }
      }

      public string MobilePIN
      {
         get
         {
            try
            {
               return ((string)(this[this.tableaspnet_Membership.MobilePINColumn]));
            }
            catch(System.InvalidCastException e)
            {
               throw new System.Data.StrongTypingException("The value for column \'MobilePIN\' in table \'aspnet_Membership\' is DBNull.",e);
            }
         }
         set
         {
            this[this.tableaspnet_Membership.MobilePINColumn] = value;
         }
      }

      public string Email
      {
         get
         {
            try
            {
               return ((string)(this[this.tableaspnet_Membership.EmailColumn]));
            }
            catch(System.InvalidCastException e)
            {
               throw new System.Data.StrongTypingException("The value for column \'Email\' in table \'aspnet_Membership\' is DBNull.",e);
            }
         }
         set
         {
            this[this.tableaspnet_Membership.EmailColumn] = value;
         }
      }

      public string LoweredEmail
      {
         get
         {
            try
            {
               return ((string)(this[this.tableaspnet_Membership.LoweredEmailColumn]));
            }
            catch(System.InvalidCastException e)
            {
               throw new System.Data.StrongTypingException("The value for column \'LoweredEmail\' in table \'aspnet_Membership\' is DBNull.",e);
            }
         }
         set
         {
            this[this.tableaspnet_Membership.LoweredEmailColumn] = value;
         }
      }

      public string PasswordQuestion
      {
         get
         {
            try
            {
               return ((string)(this[this.tableaspnet_Membership.PasswordQuestionColumn]));
            }
            catch(System.InvalidCastException e)
            {
               throw new System.Data.StrongTypingException("The value for column \'PasswordQuestion\' in table \'aspnet_Membership\' is DBNull.",e);
            }
         }
         set
         {
            this[this.tableaspnet_Membership.PasswordQuestionColumn] = value;
         }
      }

      public string PasswordAnswer
      {
         get
         {
            try
            {
               return ((string)(this[this.tableaspnet_Membership.PasswordAnswerColumn]));
            }
            catch(System.InvalidCastException e)
            {
               throw new System.Data.StrongTypingException("The value for column \'PasswordAnswer\' in table \'aspnet_Membership\' is DBNull.",e);
            }
         }
         set
         {
            this[this.tableaspnet_Membership.PasswordAnswerColumn] = value;
         }
      }

      public bool IsApproved
      {
         get
         {
            return ((bool)(this[this.tableaspnet_Membership.IsApprovedColumn]));
         }
         set
         {
            this[this.tableaspnet_Membership.IsApprovedColumn] = value;
         }
      }

      public bool IsLockedOut
      {
         get
         {
            return ((bool)(this[this.tableaspnet_Membership.IsLockedOutColumn]));
         }
         set
         {
            this[this.tableaspnet_Membership.IsLockedOutColumn] = value;
         }
      }

      public System.DateTime CreateDate
      {
         get
         {
            return ((System.DateTime)(this[this.tableaspnet_Membership.CreateDateColumn]));
         }
         set
         {
            this[this.tableaspnet_Membership.CreateDateColumn] = value;
         }
      }

      public System.DateTime LastLoginDate
      {
         get
         {
            return ((System.DateTime)(this[this.tableaspnet_Membership.LastLoginDateColumn]));
         }
         set
         {
            this[this.tableaspnet_Membership.LastLoginDateColumn] = value;
         }
      }

      public System.DateTime LastPasswordChangedDate
      {
         get
         {
            return ((System.DateTime)(this[this.tableaspnet_Membership.LastPasswordChangedDateColumn]));
         }
         set
         {
            this[this.tableaspnet_Membership.LastPasswordChangedDateColumn] = value;
         }
      }

      public System.DateTime LastLockoutDate
      {
         get
         {
            return ((System.DateTime)(this[this.tableaspnet_Membership.LastLockoutDateColumn]));
         }
         set
         {
            this[this.tableaspnet_Membership.LastLockoutDateColumn] = value;
         }
      }

      public int FailedPasswordAttemptCount
      {
         get
         {
            return ((int)(this[this.tableaspnet_Membership.FailedPasswordAttemptCountColumn]));
         }
         set
         {
            this[this.tableaspnet_Membership.FailedPasswordAttemptCountColumn] = value;
         }
      }

      public System.DateTime FailedPasswordAttemptWindowStart
      {
         get
         {
            return ((System.DateTime)(this[this.tableaspnet_Membership.FailedPasswordAttemptWindowStartColumn]));
         }
         set
         {
            this[this.tableaspnet_Membership.FailedPasswordAttemptWindowStartColumn] = value;
         }
      }

      public int FailedPasswordAnswerAttemptCount
      {
         get
         {
            return ((int)(this[this.tableaspnet_Membership.FailedPasswordAnswerAttemptCountColumn]));
         }
         set
         {
            this[this.tableaspnet_Membership.FailedPasswordAnswerAttemptCountColumn] = value;
         }
      }

      public System.DateTime FailedPasswordAnswerAttemptWindowStart
      {
         get
         {
            return ((System.DateTime)(this[this.tableaspnet_Membership.FailedPasswordAnswerAttemptWindowStartColumn]));
         }
         set
         {
            this[this.tableaspnet_Membership.FailedPasswordAnswerAttemptWindowStartColumn] = value;
         }
      }

      public string Comment
      {
         get
         {
            try
            {
               return ((string)(this[this.tableaspnet_Membership.CommentColumn]));
            }
            catch(System.InvalidCastException e)
            {
               throw new System.Data.StrongTypingException("The value for column \'Comment\' in table \'aspnet_Membership\' is DBNull.",e);
            }
         }
         set
         {
            this[this.tableaspnet_Membership.CommentColumn] = value;
         }
      }

      public aspnet_ApplicationsRow aspnet_ApplicationsRow
      {
         get
         {
            return ((aspnet_ApplicationsRow)(this.GetParentRow(this.Table.ParentRelations["FK__aspnet_Me__Appli__0EA330E9"])));
         }
         set
         {
            this.SetParentRow(value,this.Table.ParentRelations["FK__aspnet_Me__Appli__0EA330E9"]);
         }
      }

      public aspnet_UsersRow aspnet_UsersRow
      {
         get
         {
            return ((aspnet_UsersRow)(this.GetParentRow(this.Table.ParentRelations["FK__aspnet_Me__UserI__0F975522"])));
         }
         set
         {
            this.SetParentRow(value,this.Table.ParentRelations["FK__aspnet_Me__UserI__0F975522"]);
         }
      }

      public bool IsMobilePINNull()
      {
         return this.IsNull(this.tableaspnet_Membership.MobilePINColumn);
      }

      public void SetMobilePINNull()
      {
         this[this.tableaspnet_Membership.MobilePINColumn] = System.Convert.DBNull;
      }

      public bool IsEmailNull()
      {
         return this.IsNull(this.tableaspnet_Membership.EmailColumn);
      }

      public void SetEmailNull()
      {
         this[this.tableaspnet_Membership.EmailColumn] = System.Convert.DBNull;
      }

      public bool IsLoweredEmailNull()
      {
         return this.IsNull(this.tableaspnet_Membership.LoweredEmailColumn);
      }

      public void SetLoweredEmailNull()
      {
         this[this.tableaspnet_Membership.LoweredEmailColumn] = System.Convert.DBNull;
      }

      public bool IsPasswordQuestionNull()
      {
         return this.IsNull(this.tableaspnet_Membership.PasswordQuestionColumn);
      }

      public void SetPasswordQuestionNull()
      {
         this[this.tableaspnet_Membership.PasswordQuestionColumn] = System.Convert.DBNull;
      }

      public bool IsPasswordAnswerNull()
      {
         return this.IsNull(this.tableaspnet_Membership.PasswordAnswerColumn);
      }

      public void SetPasswordAnswerNull()
      {
         this[this.tableaspnet_Membership.PasswordAnswerColumn] = System.Convert.DBNull;
      }

      public bool IsCommentNull()
      {
         return this.IsNull(this.tableaspnet_Membership.CommentColumn);
      }

      public void SetCommentNull()
      {
         this[this.tableaspnet_Membership.CommentColumn] = System.Convert.DBNull;
      }
   }

   public partial class aspnet_PathsRow : System.Data.DataRow
   {

      private aspnet_PathsDataTable tableaspnet_Paths;

      internal aspnet_PathsRow(System.Data.DataRowBuilder rb)
         :
              base(rb)
      {
         this.tableaspnet_Paths = ((aspnet_PathsDataTable)(this.Table));
      }

      public System.Guid ApplicationId
      {
         get
         {
            return ((System.Guid)(this[this.tableaspnet_Paths.ApplicationIdColumn]));
         }
         set
         {
            this[this.tableaspnet_Paths.ApplicationIdColumn] = value;
         }
      }

      public System.Guid PathId
      {
         get
         {
            return ((System.Guid)(this[this.tableaspnet_Paths.PathIdColumn]));
         }
         set
         {
            this[this.tableaspnet_Paths.PathIdColumn] = value;
         }
      }

      public string Path
      {
         get
         {
            return ((string)(this[this.tableaspnet_Paths.PathColumn]));
         }
         set
         {
            this[this.tableaspnet_Paths.PathColumn] = value;
         }
      }

      public string LoweredPath
      {
         get
         {
            return ((string)(this[this.tableaspnet_Paths.LoweredPathColumn]));
         }
         set
         {
            this[this.tableaspnet_Paths.LoweredPathColumn] = value;
         }
      }

      public aspnet_ApplicationsRow aspnet_ApplicationsRow
      {
         get
         {
            return ((aspnet_ApplicationsRow)(this.GetParentRow(this.Table.ParentRelations["FK__aspnet_Pa__Appli__412EB0B6"])));
         }
         set
         {
            this.SetParentRow(value,this.Table.ParentRelations["FK__aspnet_Pa__Appli__412EB0B6"]);
         }
      }

      public aspnet_PersonalizationAllUsersRow[] Getaspnet_PersonalizationAllUsersRows()
      {
         return ((aspnet_PersonalizationAllUsersRow[])(base.GetChildRows(this.Table.ChildRelations["FK__aspnet_Pe__PathI__46E78A0C"])));
      }

      public aspnet_PersonalizationPerUserRow[] Getaspnet_PersonalizationPerUserRows()
      {
         return ((aspnet_PersonalizationPerUserRow[])(base.GetChildRows(this.Table.ChildRelations["FK__aspnet_Pe__PathI__4AB81AF0"])));
      }
   }

   public partial class aspnet_PersonalizationAllUsersRow : System.Data.DataRow
   {

      private aspnet_PersonalizationAllUsersDataTable tableaspnet_PersonalizationAllUsers;

      internal aspnet_PersonalizationAllUsersRow(System.Data.DataRowBuilder rb)
         :
              base(rb)
      {
         this.tableaspnet_PersonalizationAllUsers = ((aspnet_PersonalizationAllUsersDataTable)(this.Table));
      }

      public System.Guid PathId
      {
         get
         {
            return ((System.Guid)(this[this.tableaspnet_PersonalizationAllUsers.PathIdColumn]));
         }
         set
         {
            this[this.tableaspnet_PersonalizationAllUsers.PathIdColumn] = value;
         }
      }

      public byte[] PageSettings
      {
         get
         {
            return ((byte[])(this[this.tableaspnet_PersonalizationAllUsers.PageSettingsColumn]));
         }
         set
         {
            this[this.tableaspnet_PersonalizationAllUsers.PageSettingsColumn] = value;
         }
      }

      public System.DateTime LastUpdatedDate
      {
         get
         {
            return ((System.DateTime)(this[this.tableaspnet_PersonalizationAllUsers.LastUpdatedDateColumn]));
         }
         set
         {
            this[this.tableaspnet_PersonalizationAllUsers.LastUpdatedDateColumn] = value;
         }
      }

      public aspnet_PathsRow aspnet_PathsRow
      {
         get
         {
            return ((aspnet_PathsRow)(this.GetParentRow(this.Table.ParentRelations["FK__aspnet_Pe__PathI__46E78A0C"])));
         }
         set
         {
            this.SetParentRow(value,this.Table.ParentRelations["FK__aspnet_Pe__PathI__46E78A0C"]);
         }
      }
   }

   public partial class aspnet_PersonalizationPerUserRow : System.Data.DataRow
   {

      private aspnet_PersonalizationPerUserDataTable tableaspnet_PersonalizationPerUser;

      internal aspnet_PersonalizationPerUserRow(System.Data.DataRowBuilder rb)
         :
              base(rb)
      {
         this.tableaspnet_PersonalizationPerUser = ((aspnet_PersonalizationPerUserDataTable)(this.Table));
      }

      public System.Guid Id
      {
         get
         {
            return ((System.Guid)(this[this.tableaspnet_PersonalizationPerUser.IdColumn]));
         }
         set
         {
            this[this.tableaspnet_PersonalizationPerUser.IdColumn] = value;
         }
      }

      public System.Guid PathId
      {
         get
         {
            try
            {
               return ((System.Guid)(this[this.tableaspnet_PersonalizationPerUser.PathIdColumn]));
            }
            catch(System.InvalidCastException e)
            {
               throw new System.Data.StrongTypingException("The value for column \'PathId\' in table \'aspnet_PersonalizationPerUser\' is DBNull." +
                                "",e);
            }
         }
         set
         {
            this[this.tableaspnet_PersonalizationPerUser.PathIdColumn] = value;
         }
      }

      public System.Guid UserId
      {
         get
         {
            try
            {
               return ((System.Guid)(this[this.tableaspnet_PersonalizationPerUser.UserIdColumn]));
            }
            catch(System.InvalidCastException e)
            {
               throw new System.Data.StrongTypingException("The value for column \'UserId\' in table \'aspnet_PersonalizationPerUser\' is DBNull." +
                                "",e);
            }
         }
         set
         {
            this[this.tableaspnet_PersonalizationPerUser.UserIdColumn] = value;
         }
      }

      public byte[] PageSettings
      {
         get
         {
            return ((byte[])(this[this.tableaspnet_PersonalizationPerUser.PageSettingsColumn]));
         }
         set
         {
            this[this.tableaspnet_PersonalizationPerUser.PageSettingsColumn] = value;
         }
      }

      public System.DateTime LastUpdatedDate
      {
         get
         {
            return ((System.DateTime)(this[this.tableaspnet_PersonalizationPerUser.LastUpdatedDateColumn]));
         }
         set
         {
            this[this.tableaspnet_PersonalizationPerUser.LastUpdatedDateColumn] = value;
         }
      }

      public aspnet_PathsRow aspnet_PathsRow
      {
         get
         {
            return ((aspnet_PathsRow)(this.GetParentRow(this.Table.ParentRelations["FK__aspnet_Pe__PathI__4AB81AF0"])));
         }
         set
         {
            this.SetParentRow(value,this.Table.ParentRelations["FK__aspnet_Pe__PathI__4AB81AF0"]);
         }
      }

      public aspnet_UsersRow aspnet_UsersRow
      {
         get
         {
            return ((aspnet_UsersRow)(this.GetParentRow(this.Table.ParentRelations["FK__aspnet_Pe__UserI__4BAC3F29"])));
         }
         set
         {
            this.SetParentRow(value,this.Table.ParentRelations["FK__aspnet_Pe__UserI__4BAC3F29"]);
         }
      }

      public bool IsPathIdNull()
      {
         return this.IsNull(this.tableaspnet_PersonalizationPerUser.PathIdColumn);
      }

      public void SetPathIdNull()
      {
         this[this.tableaspnet_PersonalizationPerUser.PathIdColumn] = System.Convert.DBNull;
      }

      public bool IsUserIdNull()
      {
         return this.IsNull(this.tableaspnet_PersonalizationPerUser.UserIdColumn);
      }

      public void SetUserIdNull()
      {
         this[this.tableaspnet_PersonalizationPerUser.UserIdColumn] = System.Convert.DBNull;
      }
   }

   public partial class aspnet_ProfileRow : System.Data.DataRow
   {

      private aspnet_ProfileDataTable tableaspnet_Profile;

      internal aspnet_ProfileRow(System.Data.DataRowBuilder rb)
         :
              base(rb)
      {
         this.tableaspnet_Profile = ((aspnet_ProfileDataTable)(this.Table));
      }

      public System.Guid UserId
      {
         get
         {
            return ((System.Guid)(this[this.tableaspnet_Profile.UserIdColumn]));
         }
         set
         {
            this[this.tableaspnet_Profile.UserIdColumn] = value;
         }
      }

      public string PropertyNames
      {
         get
         {
            return ((string)(this[this.tableaspnet_Profile.PropertyNamesColumn]));
         }
         set
         {
            this[this.tableaspnet_Profile.PropertyNamesColumn] = value;
         }
      }

      public string PropertyValuesString
      {
         get
         {
            return ((string)(this[this.tableaspnet_Profile.PropertyValuesStringColumn]));
         }
         set
         {
            this[this.tableaspnet_Profile.PropertyValuesStringColumn] = value;
         }
      }

      public byte[] PropertyValuesBinary
      {
         get
         {
            return ((byte[])(this[this.tableaspnet_Profile.PropertyValuesBinaryColumn]));
         }
         set
         {
            this[this.tableaspnet_Profile.PropertyValuesBinaryColumn] = value;
         }
      }

      public System.DateTime LastUpdatedDate
      {
         get
         {
            return ((System.DateTime)(this[this.tableaspnet_Profile.LastUpdatedDateColumn]));
         }
         set
         {
            this[this.tableaspnet_Profile.LastUpdatedDateColumn] = value;
         }
      }

      public aspnet_UsersRow aspnet_UsersRow
      {
         get
         {
            return ((aspnet_UsersRow)(this.GetParentRow(this.Table.ParentRelations["FK__aspnet_Pr__UserI__24927208"])));
         }
         set
         {
            this.SetParentRow(value,this.Table.ParentRelations["FK__aspnet_Pr__UserI__24927208"]);
         }
      }
   }

   public partial class aspnet_RolesRow : System.Data.DataRow
   {

      private aspnet_RolesDataTable tableaspnet_Roles;

      internal aspnet_RolesRow(System.Data.DataRowBuilder rb)
         :
              base(rb)
      {
         this.tableaspnet_Roles = ((aspnet_RolesDataTable)(this.Table));
      }

      public System.Guid ApplicationId
      {
         get
         {
            return ((System.Guid)(this[this.tableaspnet_Roles.ApplicationIdColumn]));
         }
         set
         {
            this[this.tableaspnet_Roles.ApplicationIdColumn] = value;
         }
      }

      public System.Guid RoleId
      {
         get
         {
            return ((System.Guid)(this[this.tableaspnet_Roles.RoleIdColumn]));
         }
         set
         {
            this[this.tableaspnet_Roles.RoleIdColumn] = value;
         }
      }

      public string RoleName
      {
         get
         {
            return ((string)(this[this.tableaspnet_Roles.RoleNameColumn]));
         }
         set
         {
            this[this.tableaspnet_Roles.RoleNameColumn] = value;
         }
      }

      public string LoweredRoleName
      {
         get
         {
            return ((string)(this[this.tableaspnet_Roles.LoweredRoleNameColumn]));
         }
         set
         {
            this[this.tableaspnet_Roles.LoweredRoleNameColumn] = value;
         }
      }

      public string Description
      {
         get
         {
            try
            {
               return ((string)(this[this.tableaspnet_Roles.DescriptionColumn]));
            }
            catch(System.InvalidCastException e)
            {
               throw new System.Data.StrongTypingException("The value for column \'Description\' in table \'aspnet_Roles\' is DBNull.",e);
            }
         }
         set
         {
            this[this.tableaspnet_Roles.DescriptionColumn] = value;
         }
      }

      public aspnet_ApplicationsRow aspnet_ApplicationsRow
      {
         get
         {
            return ((aspnet_ApplicationsRow)(this.GetParentRow(this.Table.ParentRelations["FK__aspnet_Ro__Appli__2E1BDC42"])));
         }
         set
         {
            this.SetParentRow(value,this.Table.ParentRelations["FK__aspnet_Ro__Appli__2E1BDC42"]);
         }
      }

      public bool IsDescriptionNull()
      {
         return this.IsNull(this.tableaspnet_Roles.DescriptionColumn);
      }

      public void SetDescriptionNull()
      {
         this[this.tableaspnet_Roles.DescriptionColumn] = System.Convert.DBNull;
      }

      public aspnet_UsersInRolesRow[] Getaspnet_UsersInRolesRows()
      {
         return ((aspnet_UsersInRolesRow[])(base.GetChildRows(this.Table.ChildRelations["FK__aspnet_Us__RoleI__32E0915F"])));
      }
   }

   public partial class aspnet_SchemaVersionsRow : System.Data.DataRow
   {

      private aspnet_SchemaVersionsDataTable tableaspnet_SchemaVersions;

      internal aspnet_SchemaVersionsRow(System.Data.DataRowBuilder rb)
         :
              base(rb)
      {
         this.tableaspnet_SchemaVersions = ((aspnet_SchemaVersionsDataTable)(this.Table));
      }

      public string Feature
      {
         get
         {
            return ((string)(this[this.tableaspnet_SchemaVersions.FeatureColumn]));
         }
         set
         {
            this[this.tableaspnet_SchemaVersions.FeatureColumn] = value;
         }
      }

      public string CompatibleSchemaVersion
      {
         get
         {
            return ((string)(this[this.tableaspnet_SchemaVersions.CompatibleSchemaVersionColumn]));
         }
         set
         {
            this[this.tableaspnet_SchemaVersions.CompatibleSchemaVersionColumn] = value;
         }
      }

      public bool IsCurrentVersion
      {
         get
         {
            return ((bool)(this[this.tableaspnet_SchemaVersions.IsCurrentVersionColumn]));
         }
         set
         {
            this[this.tableaspnet_SchemaVersions.IsCurrentVersionColumn] = value;
         }
      }
   }

   public partial class aspnet_UsersRow : System.Data.DataRow
   {

      private aspnet_UsersDataTable tableaspnet_Users;

      internal aspnet_UsersRow(System.Data.DataRowBuilder rb)
         :
              base(rb)
      {
         this.tableaspnet_Users = ((aspnet_UsersDataTable)(this.Table));
      }

      public System.Guid ApplicationId
      {
         get
         {
            return ((System.Guid)(this[this.tableaspnet_Users.ApplicationIdColumn]));
         }
         set
         {
            this[this.tableaspnet_Users.ApplicationIdColumn] = value;
         }
      }

      public System.Guid UserId
      {
         get
         {
            return ((System.Guid)(this[this.tableaspnet_Users.UserIdColumn]));
         }
         set
         {
            this[this.tableaspnet_Users.UserIdColumn] = value;
         }
      }

      public string UserName
      {
         get
         {
            return ((string)(this[this.tableaspnet_Users.UserNameColumn]));
         }
         set
         {
            this[this.tableaspnet_Users.UserNameColumn] = value;
         }
      }

      public string LoweredUserName
      {
         get
         {
            return ((string)(this[this.tableaspnet_Users.LoweredUserNameColumn]));
         }
         set
         {
            this[this.tableaspnet_Users.LoweredUserNameColumn] = value;
         }
      }

      public string MobileAlias
      {
         get
         {
            try
            {
               return ((string)(this[this.tableaspnet_Users.MobileAliasColumn]));
            }
            catch(System.InvalidCastException e)
            {
               throw new System.Data.StrongTypingException("The value for column \'MobileAlias\' in table \'aspnet_Users\' is DBNull.",e);
            }
         }
         set
         {
            this[this.tableaspnet_Users.MobileAliasColumn] = value;
         }
      }

      public bool IsAnonymous
      {
         get
         {
            return ((bool)(this[this.tableaspnet_Users.IsAnonymousColumn]));
         }
         set
         {
            this[this.tableaspnet_Users.IsAnonymousColumn] = value;
         }
      }

      public System.DateTime LastActivityDate
      {
         get
         {
            return ((System.DateTime)(this[this.tableaspnet_Users.LastActivityDateColumn]));
         }
         set
         {
            this[this.tableaspnet_Users.LastActivityDateColumn] = value;
         }
      }

      public aspnet_ApplicationsRow aspnet_ApplicationsRow
      {
         get
         {
            return ((aspnet_ApplicationsRow)(this.GetParentRow(this.Table.ParentRelations["FK__aspnet_Us__Appli__7E6CC920"])));
         }
         set
         {
            this.SetParentRow(value,this.Table.ParentRelations["FK__aspnet_Us__Appli__7E6CC920"]);
         }
      }

      public bool IsMobileAliasNull()
      {
         return this.IsNull(this.tableaspnet_Users.MobileAliasColumn);
      }

      public void SetMobileAliasNull()
      {
         this[this.tableaspnet_Users.MobileAliasColumn] = System.Convert.DBNull;
      }

      public aspnet_MembershipRow[] Getaspnet_MembershipRows()
      {
         return ((aspnet_MembershipRow[])(base.GetChildRows(this.Table.ChildRelations["FK__aspnet_Me__UserI__0F975522"])));
      }

      public aspnet_PersonalizationPerUserRow[] Getaspnet_PersonalizationPerUserRows()
      {
         return ((aspnet_PersonalizationPerUserRow[])(base.GetChildRows(this.Table.ChildRelations["FK__aspnet_Pe__UserI__4BAC3F29"])));
      }

      public aspnet_ProfileRow[] Getaspnet_ProfileRows()
      {
         return ((aspnet_ProfileRow[])(base.GetChildRows(this.Table.ChildRelations["FK__aspnet_Pr__UserI__24927208"])));
      }

      public aspnet_UsersInRolesRow[] Getaspnet_UsersInRolesRows()
      {
         return ((aspnet_UsersInRolesRow[])(base.GetChildRows(this.Table.ChildRelations["FK__aspnet_Us__UserI__31EC6D26"])));
      }
   }

   public partial class aspnet_UsersInRolesRow : System.Data.DataRow
   {

      private aspnet_UsersInRolesDataTable tableaspnet_UsersInRoles;

      internal aspnet_UsersInRolesRow(System.Data.DataRowBuilder rb)
         :
              base(rb)
      {
         this.tableaspnet_UsersInRoles = ((aspnet_UsersInRolesDataTable)(this.Table));
      }

      public System.Guid UserId
      {
         get
         {
            return ((System.Guid)(this[this.tableaspnet_UsersInRoles.UserIdColumn]));
         }
         set
         {
            this[this.tableaspnet_UsersInRoles.UserIdColumn] = value;
         }
      }

      public System.Guid RoleId
      {
         get
         {
            return ((System.Guid)(this[this.tableaspnet_UsersInRoles.RoleIdColumn]));
         }
         set
         {
            this[this.tableaspnet_UsersInRoles.RoleIdColumn] = value;
         }
      }

      public aspnet_RolesRow aspnet_RolesRow
      {
         get
         {
            return ((aspnet_RolesRow)(this.GetParentRow(this.Table.ParentRelations["FK__aspnet_Us__RoleI__32E0915F"])));
         }
         set
         {
            this.SetParentRow(value,this.Table.ParentRelations["FK__aspnet_Us__RoleI__32E0915F"]);
         }
      }

      public aspnet_UsersRow aspnet_UsersRow
      {
         get
         {
            return ((aspnet_UsersRow)(this.GetParentRow(this.Table.ParentRelations["FK__aspnet_Us__UserI__31EC6D26"])));
         }
         set
         {
            this.SetParentRow(value,this.Table.ParentRelations["FK__aspnet_Us__UserI__31EC6D26"]);
         }
      }
   }

   public partial class aspnet_WebEvent_EventsRow : System.Data.DataRow
   {

      private aspnet_WebEvent_EventsDataTable tableaspnet_WebEvent_Events;

      internal aspnet_WebEvent_EventsRow(System.Data.DataRowBuilder rb)
         :
              base(rb)
      {
         this.tableaspnet_WebEvent_Events = ((aspnet_WebEvent_EventsDataTable)(this.Table));
      }

      public string EventId
      {
         get
         {
            return ((string)(this[this.tableaspnet_WebEvent_Events.EventIdColumn]));
         }
         set
         {
            this[this.tableaspnet_WebEvent_Events.EventIdColumn] = value;
         }
      }

      public System.DateTime EventTimeUtc
      {
         get
         {
            return ((System.DateTime)(this[this.tableaspnet_WebEvent_Events.EventTimeUtcColumn]));
         }
         set
         {
            this[this.tableaspnet_WebEvent_Events.EventTimeUtcColumn] = value;
         }
      }

      public System.DateTime EventTime
      {
         get
         {
            return ((System.DateTime)(this[this.tableaspnet_WebEvent_Events.EventTimeColumn]));
         }
         set
         {
            this[this.tableaspnet_WebEvent_Events.EventTimeColumn] = value;
         }
      }

      public string EventType
      {
         get
         {
            return ((string)(this[this.tableaspnet_WebEvent_Events.EventTypeColumn]));
         }
         set
         {
            this[this.tableaspnet_WebEvent_Events.EventTypeColumn] = value;
         }
      }

      public decimal EventSequence
      {
         get
         {
            return ((decimal)(this[this.tableaspnet_WebEvent_Events.EventSequenceColumn]));
         }
         set
         {
            this[this.tableaspnet_WebEvent_Events.EventSequenceColumn] = value;
         }
      }

      public decimal EventOccurrence
      {
         get
         {
            return ((decimal)(this[this.tableaspnet_WebEvent_Events.EventOccurrenceColumn]));
         }
         set
         {
            this[this.tableaspnet_WebEvent_Events.EventOccurrenceColumn] = value;
         }
      }

      public int EventCode
      {
         get
         {
            return ((int)(this[this.tableaspnet_WebEvent_Events.EventCodeColumn]));
         }
         set
         {
            this[this.tableaspnet_WebEvent_Events.EventCodeColumn] = value;
         }
      }

      public int EventDetailCode
      {
         get
         {
            return ((int)(this[this.tableaspnet_WebEvent_Events.EventDetailCodeColumn]));
         }
         set
         {
            this[this.tableaspnet_WebEvent_Events.EventDetailCodeColumn] = value;
         }
      }

      public string Message
      {
         get
         {
            try
            {
               return ((string)(this[this.tableaspnet_WebEvent_Events.MessageColumn]));
            }
            catch(System.InvalidCastException e)
            {
               throw new System.Data.StrongTypingException("The value for column \'Message\' in table \'aspnet_WebEvent_Events\' is DBNull.",e);
            }
         }
         set
         {
            this[this.tableaspnet_WebEvent_Events.MessageColumn] = value;
         }
      }

      public string ApplicationPath
      {
         get
         {
            try
            {
               return ((string)(this[this.tableaspnet_WebEvent_Events.ApplicationPathColumn]));
            }
            catch(System.InvalidCastException e)
            {
               throw new System.Data.StrongTypingException("The value for column \'ApplicationPath\' in table \'aspnet_WebEvent_Events\' is DBNul" +
                                "l.",e);
            }
         }
         set
         {
            this[this.tableaspnet_WebEvent_Events.ApplicationPathColumn] = value;
         }
      }

      public string ApplicationVirtualPath
      {
         get
         {
            try
            {
               return ((string)(this[this.tableaspnet_WebEvent_Events.ApplicationVirtualPathColumn]));
            }
            catch(System.InvalidCastException e)
            {
               throw new System.Data.StrongTypingException("The value for column \'ApplicationVirtualPath\' in table \'aspnet_WebEvent_Events\' i" +
                                "s DBNull.",e);
            }
         }
         set
         {
            this[this.tableaspnet_WebEvent_Events.ApplicationVirtualPathColumn] = value;
         }
      }

      public string MachineName
      {
         get
         {
            return ((string)(this[this.tableaspnet_WebEvent_Events.MachineNameColumn]));
         }
         set
         {
            this[this.tableaspnet_WebEvent_Events.MachineNameColumn] = value;
         }
      }

      public string RequestUrl
      {
         get
         {
            try
            {
               return ((string)(this[this.tableaspnet_WebEvent_Events.RequestUrlColumn]));
            }
            catch(System.InvalidCastException e)
            {
               throw new System.Data.StrongTypingException("The value for column \'RequestUrl\' in table \'aspnet_WebEvent_Events\' is DBNull.",e);
            }
         }
         set
         {
            this[this.tableaspnet_WebEvent_Events.RequestUrlColumn] = value;
         }
      }

      public string ExceptionType
      {
         get
         {
            try
            {
               return ((string)(this[this.tableaspnet_WebEvent_Events.ExceptionTypeColumn]));
            }
            catch(System.InvalidCastException e)
            {
               throw new System.Data.StrongTypingException("The value for column \'ExceptionType\' in table \'aspnet_WebEvent_Events\' is DBNull." +
                                "",e);
            }
         }
         set
         {
            this[this.tableaspnet_WebEvent_Events.ExceptionTypeColumn] = value;
         }
      }

      public string Details
      {
         get
         {
            try
            {
               return ((string)(this[this.tableaspnet_WebEvent_Events.DetailsColumn]));
            }
            catch(System.InvalidCastException e)
            {
               throw new System.Data.StrongTypingException("The value for column \'Details\' in table \'aspnet_WebEvent_Events\' is DBNull.",e);
            }
         }
         set
         {
            this[this.tableaspnet_WebEvent_Events.DetailsColumn] = value;
         }
      }

      public bool IsMessageNull()
      {
         return this.IsNull(this.tableaspnet_WebEvent_Events.MessageColumn);
      }

      public void SetMessageNull()
      {
         this[this.tableaspnet_WebEvent_Events.MessageColumn] = System.Convert.DBNull;
      }

      public bool IsApplicationPathNull()
      {
         return this.IsNull(this.tableaspnet_WebEvent_Events.ApplicationPathColumn);
      }

      public void SetApplicationPathNull()
      {
         this[this.tableaspnet_WebEvent_Events.ApplicationPathColumn] = System.Convert.DBNull;
      }

      public bool IsApplicationVirtualPathNull()
      {
         return this.IsNull(this.tableaspnet_WebEvent_Events.ApplicationVirtualPathColumn);
      }

      public void SetApplicationVirtualPathNull()
      {
         this[this.tableaspnet_WebEvent_Events.ApplicationVirtualPathColumn] = System.Convert.DBNull;
      }

      public bool IsRequestUrlNull()
      {
         return this.IsNull(this.tableaspnet_WebEvent_Events.RequestUrlColumn);
      }

      public void SetRequestUrlNull()
      {
         this[this.tableaspnet_WebEvent_Events.RequestUrlColumn] = System.Convert.DBNull;
      }

      public bool IsExceptionTypeNull()
      {
         return this.IsNull(this.tableaspnet_WebEvent_Events.ExceptionTypeColumn);
      }

      public void SetExceptionTypeNull()
      {
         this[this.tableaspnet_WebEvent_Events.ExceptionTypeColumn] = System.Convert.DBNull;
      }

      public bool IsDetailsNull()
      {
         return this.IsNull(this.tableaspnet_WebEvent_Events.DetailsColumn);
      }

      public void SetDetailsNull()
      {
         this[this.tableaspnet_WebEvent_Events.DetailsColumn] = System.Convert.DBNull;
      }
   }

   public class aspnet_ApplicationsRowChangeEvent : System.EventArgs
   {

      private aspnet_ApplicationsRow eventRow;

      private System.Data.DataRowAction eventAction;

      public aspnet_ApplicationsRowChangeEvent(aspnet_ApplicationsRow row,System.Data.DataRowAction action)
      {
         this.eventRow = row;
         this.eventAction = action;
      }

      public aspnet_ApplicationsRow Row
      {
         get
         {
            return this.eventRow;
         }
      }

      public System.Data.DataRowAction Action
      {
         get
         {
            return this.eventAction;
         }
      }
   }

   public class aspnet_MembershipRowChangeEvent : System.EventArgs
   {

      private aspnet_MembershipRow eventRow;

      private System.Data.DataRowAction eventAction;

      public aspnet_MembershipRowChangeEvent(aspnet_MembershipRow row,System.Data.DataRowAction action)
      {
         this.eventRow = row;
         this.eventAction = action;
      }

      public aspnet_MembershipRow Row
      {
         get
         {
            return this.eventRow;
         }
      }

      public System.Data.DataRowAction Action
      {
         get
         {
            return this.eventAction;
         }
      }
   }

   public class aspnet_PathsRowChangeEvent : System.EventArgs
   {

      private aspnet_PathsRow eventRow;

      private System.Data.DataRowAction eventAction;

      public aspnet_PathsRowChangeEvent(aspnet_PathsRow row,System.Data.DataRowAction action)
      {
         this.eventRow = row;
         this.eventAction = action;
      }

      public aspnet_PathsRow Row
      {
         get
         {
            return this.eventRow;
         }
      }

      public System.Data.DataRowAction Action
      {
         get
         {
            return this.eventAction;
         }
      }
   }

   public class aspnet_PersonalizationAllUsersRowChangeEvent : System.EventArgs
   {

      private aspnet_PersonalizationAllUsersRow eventRow;

      private System.Data.DataRowAction eventAction;

      public aspnet_PersonalizationAllUsersRowChangeEvent(aspnet_PersonalizationAllUsersRow row,System.Data.DataRowAction action)
      {
         this.eventRow = row;
         this.eventAction = action;
      }

      public aspnet_PersonalizationAllUsersRow Row
      {
         get
         {
            return this.eventRow;
         }
      }

      public System.Data.DataRowAction Action
      {
         get
         {
            return this.eventAction;
         }
      }
   }

   public class aspnet_PersonalizationPerUserRowChangeEvent : System.EventArgs
   {

      private aspnet_PersonalizationPerUserRow eventRow;

      private System.Data.DataRowAction eventAction;

      public aspnet_PersonalizationPerUserRowChangeEvent(aspnet_PersonalizationPerUserRow row,System.Data.DataRowAction action)
      {
         this.eventRow = row;
         this.eventAction = action;
      }

      public aspnet_PersonalizationPerUserRow Row
      {
         get
         {
            return this.eventRow;
         }
      }

      public System.Data.DataRowAction Action
      {
         get
         {
            return this.eventAction;
         }
      }
   }

   public class aspnet_ProfileRowChangeEvent : System.EventArgs
   {

      private aspnet_ProfileRow eventRow;

      private System.Data.DataRowAction eventAction;

      public aspnet_ProfileRowChangeEvent(aspnet_ProfileRow row,System.Data.DataRowAction action)
      {
         this.eventRow = row;
         this.eventAction = action;
      }

      public aspnet_ProfileRow Row
      {
         get
         {
            return this.eventRow;
         }
      }

      public System.Data.DataRowAction Action
      {
         get
         {
            return this.eventAction;
         }
      }
   }

   public class aspnet_RolesRowChangeEvent : System.EventArgs
   {

      private aspnet_RolesRow eventRow;

      private System.Data.DataRowAction eventAction;

      public aspnet_RolesRowChangeEvent(aspnet_RolesRow row,System.Data.DataRowAction action)
      {
         this.eventRow = row;
         this.eventAction = action;
      }

      public aspnet_RolesRow Row
      {
         get
         {
            return this.eventRow;
         }
      }

      public System.Data.DataRowAction Action
      {
         get
         {
            return this.eventAction;
         }
      }
   }

   public class aspnet_SchemaVersionsRowChangeEvent : System.EventArgs
   {

      private aspnet_SchemaVersionsRow eventRow;

      private System.Data.DataRowAction eventAction;

      public aspnet_SchemaVersionsRowChangeEvent(aspnet_SchemaVersionsRow row,System.Data.DataRowAction action)
      {
         this.eventRow = row;
         this.eventAction = action;
      }

      public aspnet_SchemaVersionsRow Row
      {
         get
         {
            return this.eventRow;
         }
      }

      public System.Data.DataRowAction Action
      {
         get
         {
            return this.eventAction;
         }
      }
   }

   public class aspnet_UsersRowChangeEvent : System.EventArgs
   {

      private aspnet_UsersRow eventRow;

      private System.Data.DataRowAction eventAction;

      public aspnet_UsersRowChangeEvent(aspnet_UsersRow row,System.Data.DataRowAction action)
      {
         this.eventRow = row;
         this.eventAction = action;
      }

      public aspnet_UsersRow Row
      {
         get
         {
            return this.eventRow;
         }
      }

      public System.Data.DataRowAction Action
      {
         get
         {
            return this.eventAction;
         }
      }
   }

   public class aspnet_UsersInRolesRowChangeEvent : System.EventArgs
   {

      private aspnet_UsersInRolesRow eventRow;

      private System.Data.DataRowAction eventAction;

      public aspnet_UsersInRolesRowChangeEvent(aspnet_UsersInRolesRow row,System.Data.DataRowAction action)
      {
         this.eventRow = row;
         this.eventAction = action;
      }

      public aspnet_UsersInRolesRow Row
      {
         get
         {
            return this.eventRow;
         }
      }

      public System.Data.DataRowAction Action
      {
         get
         {
            return this.eventAction;
         }
      }
   }

   public class aspnet_WebEvent_EventsRowChangeEvent : System.EventArgs
   {

      private aspnet_WebEvent_EventsRow eventRow;

      private System.Data.DataRowAction eventAction;

      public aspnet_WebEvent_EventsRowChangeEvent(aspnet_WebEvent_EventsRow row,System.Data.DataRowAction action)
      {
         this.eventRow = row;
         this.eventAction = action;
      }

      public aspnet_WebEvent_EventsRow Row
      {
         get
         {
            return this.eventRow;
         }
      }

      public System.Data.DataRowAction Action
      {
         get
         {
            return this.eventAction;
         }
      }
   }
}



[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.ComponentModel.ToolboxItem(true)]
[System.ComponentModel.DataObjectAttribute(true)]
[System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner,Microsoft.VSDesigner" +
        ",Version=8.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a")]
[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
public partial class ApplicationsTableAdapter : System.ComponentModel.Component
{

   private System.Data.SqlClient.SqlDataAdapter m_adapter;

   private System.Data.SqlClient.SqlConnection m_connection;

   private System.Data.SqlClient.SqlCommand[] m_commandCollection;

   private bool m_clearBeforeFill;

   public ApplicationsTableAdapter()
   {
      this.m_clearBeforeFill = true;
   }

   private System.Data.SqlClient.SqlDataAdapter Adapter
   {
      get
      {
         if((this.m_adapter == null))
         {
            this.InitAdapter();
         }
         return this.m_adapter;
      }
   }

   internal System.Data.SqlClient.SqlConnection Connection
   {
      get
      {
         if((this.m_connection == null))
         {
            this.InitConnection();
         }
         return this.m_connection;
      }
      set
      {
         this.m_connection = value;
         if((this.Adapter.InsertCommand != null))
         {
            this.Adapter.InsertCommand.Connection = value;
         }
         if((this.Adapter.DeleteCommand != null))
         {
            this.Adapter.DeleteCommand.Connection = value;
         }
         if((this.Adapter.UpdateCommand != null))
         {
            this.Adapter.UpdateCommand.Connection = value;
         }
         for(int i = 0;(i < this.CommandCollection.Length);i = (i + 1))
         {
            if((this.CommandCollection[i] != null))
            {
               ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
            }
         }
      }
   }

   protected System.Data.SqlClient.SqlCommand[] CommandCollection
   {
      get
      {
         if((this.m_commandCollection == null))
         {
            this.InitCommandCollection();
         }
         return this.m_commandCollection;
      }
   }

   public bool ClearBeforeFill
   {
      get
      {
         return this.m_clearBeforeFill;
      }
      set
      {
         this.m_clearBeforeFill = value;
      }
   }

   private void InitAdapter()
   {
      this.m_adapter = new System.Data.SqlClient.SqlDataAdapter();
      System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
      tableMapping.SourceTable = "Table";
      tableMapping.DataSetTable = "aspnet_Applications";
      tableMapping.ColumnMappings.Add("ApplicationName","ApplicationName");
      tableMapping.ColumnMappings.Add("LoweredApplicationName","LoweredApplicationName");
      tableMapping.ColumnMappings.Add("ApplicationId","ApplicationId");
      tableMapping.ColumnMappings.Add("Description","Description");
      this.m_adapter.TableMappings.Add(tableMapping);
      this.m_adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.DeleteCommand.Connection = this.Connection;
      this.m_adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[aspnet_Applications] WHERE (([ApplicationName] = @Original_ApplicationName) AND ([LoweredApplicationName] = @Original_LoweredApplicationName) AND ([ApplicationId] = @Original_ApplicationId) AND ((@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description] = @Original_Description)))";
      this.m_adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ApplicationName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"ApplicationName",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LoweredApplicationName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"LoweredApplicationName",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ApplicationId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"ApplicationId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Description",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"Description",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Description",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Description",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.InsertCommand.Connection = this.Connection;
      this.m_adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[aspnet_Applications] ([ApplicationName],[LoweredApplicationName],[ApplicationId],[Description]) VALUES (@ApplicationName,@LoweredApplicationName,@ApplicationId,@Description);
SELECT ApplicationName,LoweredApplicationName,ApplicationId,Description FROM aspnet_Applications WHERE (ApplicationId = @ApplicationId)";
      this.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ApplicationName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"ApplicationName",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LoweredApplicationName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"LoweredApplicationName",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ApplicationId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"ApplicationId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Description",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.UpdateCommand.Connection = this.Connection;
      this.m_adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[aspnet_Applications] SET [ApplicationName] = @ApplicationName,[LoweredApplicationName] = @LoweredApplicationName,[ApplicationId] = @ApplicationId,[Description] = @Description WHERE (([ApplicationName] = @Original_ApplicationName) AND ([LoweredApplicationName] = @Original_LoweredApplicationName) AND ([ApplicationId] = @Original_ApplicationId) AND ((@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description] = @Original_Description)));
SELECT ApplicationName,LoweredApplicationName,ApplicationId,Description FROM aspnet_Applications WHERE (ApplicationId = @ApplicationId)";
      this.m_adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ApplicationName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"ApplicationName",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LoweredApplicationName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"LoweredApplicationName",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ApplicationId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"ApplicationId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Description",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ApplicationName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"ApplicationName",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LoweredApplicationName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"LoweredApplicationName",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ApplicationId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"ApplicationId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Description",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"Description",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Description",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Description",System.Data.DataRowVersion.Original,false,null,"","",""));
   }

   private void InitConnection()
   {
      this.m_connection = new System.Data.SqlClient.SqlConnection();
      this.m_connection.ConnectionString = DataAccessUtil.GetConnectionString();
   }


   private void InitCommandCollection()
   {
      this.m_commandCollection = new System.Data.SqlClient.SqlCommand[1];
      this.m_commandCollection[0] = new System.Data.SqlClient.SqlCommand();
      this.m_commandCollection[0].Connection = this.Connection;
      this.m_commandCollection[0].CommandText = "SELECT ApplicationName,LoweredApplicationName,ApplicationId,Description FROM d" +
                "bo.aspnet_Applications";
      this.m_commandCollection[0].CommandType = System.Data.CommandType.Text;
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill,true)]
   public virtual int Fill(AspNetDbDataSet.aspnet_ApplicationsDataTable dataTable)
   {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      if((this.m_clearBeforeFill == true))
      {
         dataTable.Clear();
      }
      int returnValue = this.Adapter.Fill(dataTable);
      return returnValue;
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select,true)]
   public virtual AspNetDbDataSet.aspnet_ApplicationsDataTable GetData()
   {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      AspNetDbDataSet.aspnet_ApplicationsDataTable dataTable = new AspNetDbDataSet.aspnet_ApplicationsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
   }

   public virtual int Update(AspNetDbDataSet.aspnet_ApplicationsDataTable dataTable)
   {
      return this.Adapter.Update(dataTable);
   }

   public virtual int Update(AspNetDbDataSet dataSet)
   {
      return this.Adapter.Update(dataSet,"aspnet_Applications");
   }

   public virtual int Update(System.Data.DataRow dataRow)
   {
      return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
   }

   public virtual int Update(System.Data.DataRow[] dataRows)
   {
      return this.Adapter.Update(dataRows);
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete,true)]
   public virtual int Delete(string Original_ApplicationName,string Original_LoweredApplicationName,System.Guid Original_ApplicationId,string Original_Description)
   {
      if((Original_ApplicationName == null))
      {
         throw new System.ArgumentNullException("Original_ApplicationName");
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_ApplicationName));
      }
      if((Original_LoweredApplicationName == null))
      {
         throw new System.ArgumentNullException("Original_LoweredApplicationName");
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_LoweredApplicationName));
      }
      this.Adapter.DeleteCommand.Parameters[2].Value = ((System.Guid)(Original_ApplicationId));
      if((Original_Description == null))
      {
         this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(1));
         this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(0));
         this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Description));
      }
      System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
      this.Adapter.DeleteCommand.Connection.Open();
      try
      {
         return this.Adapter.DeleteCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.DeleteCommand.Connection.Close();
         }
      }
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert,true)]
   public virtual int Insert(string ApplicationName,string LoweredApplicationName,System.Guid ApplicationId,string Description)
   {
      if((ApplicationName == null))
      {
         throw new System.ArgumentNullException("ApplicationName");
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ApplicationName));
      }
      if((LoweredApplicationName == null))
      {
         throw new System.ArgumentNullException("LoweredApplicationName");
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[1].Value = ((string)(LoweredApplicationName));
      }
      this.Adapter.InsertCommand.Parameters[2].Value = ((System.Guid)(ApplicationId));
      if((Description == null))
      {
         this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Description));
      }
      System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
      this.Adapter.InsertCommand.Connection.Open();
      try
      {
         return this.Adapter.InsertCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.InsertCommand.Connection.Close();
         }
      }
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update,true)]
   public virtual int Update(string ApplicationName,string LoweredApplicationName,System.Guid ApplicationId,string Description,string Original_ApplicationName,string Original_LoweredApplicationName,System.Guid Original_ApplicationId,string Original_Description)
   {
      if((ApplicationName == null))
      {
         throw new System.ArgumentNullException("ApplicationName");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ApplicationName));
      }
      if((LoweredApplicationName == null))
      {
         throw new System.ArgumentNullException("LoweredApplicationName");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(LoweredApplicationName));
      }
      this.Adapter.UpdateCommand.Parameters[2].Value = ((System.Guid)(ApplicationId));
      if((Description == null))
      {
         this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Description));
      }
      if((Original_ApplicationName == null))
      {
         throw new System.ArgumentNullException("Original_ApplicationName");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_ApplicationName));
      }
      if((Original_LoweredApplicationName == null))
      {
         throw new System.ArgumentNullException("Original_LoweredApplicationName");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_LoweredApplicationName));
      }
      this.Adapter.UpdateCommand.Parameters[6].Value = ((System.Guid)(Original_ApplicationId));
      if((Original_Description == null))
      {
         this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(1));
         this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(0));
         this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_Description));
      }
      System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
      this.Adapter.UpdateCommand.Connection.Open();
      try
      {
         return this.Adapter.UpdateCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.UpdateCommand.Connection.Close();
         }
      }
   }
}

[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.ComponentModel.ToolboxItem(true)]
[System.ComponentModel.DataObjectAttribute(true)]
[System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner,Microsoft.VSDesigner" +
        ",Version=8.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a")]
[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
public partial class aspnet_MembershipTableAdapter : System.ComponentModel.Component
{

   private System.Data.SqlClient.SqlDataAdapter m_adapter;

   private System.Data.SqlClient.SqlConnection m_connection;

   private System.Data.SqlClient.SqlCommand[] m_commandCollection;

   private bool m_clearBeforeFill;

   public aspnet_MembershipTableAdapter()
   {
      this.m_clearBeforeFill = true;
   }

   private System.Data.SqlClient.SqlDataAdapter Adapter
   {
      get
      {
         if((this.m_adapter == null))
         {
            this.InitAdapter();
         }
         return this.m_adapter;
      }
   }

   internal System.Data.SqlClient.SqlConnection Connection
   {
      get
      {
         if((this.m_connection == null))
         {
            this.InitConnection();
         }
         return this.m_connection;
      }
      set
      {
         this.m_connection = value;
         if((this.Adapter.InsertCommand != null))
         {
            this.Adapter.InsertCommand.Connection = value;
         }
         if((this.Adapter.DeleteCommand != null))
         {
            this.Adapter.DeleteCommand.Connection = value;
         }
         if((this.Adapter.UpdateCommand != null))
         {
            this.Adapter.UpdateCommand.Connection = value;
         }
         for(int i = 0;(i < this.CommandCollection.Length);i = (i + 1))
         {
            if((this.CommandCollection[i] != null))
            {
               ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
            }
         }
      }
   }

   protected System.Data.SqlClient.SqlCommand[] CommandCollection
   {
      get
      {
         if((this.m_commandCollection == null))
         {
            this.InitCommandCollection();
         }
         return this.m_commandCollection;
      }
   }

   public bool ClearBeforeFill
   {
      get
      {
         return this.m_clearBeforeFill;
      }
      set
      {
         this.m_clearBeforeFill = value;
      }
   }

   private void InitAdapter()
   {
      this.m_adapter = new System.Data.SqlClient.SqlDataAdapter();
      System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
      tableMapping.SourceTable = "Table";
      tableMapping.DataSetTable = "aspnet_Membership";
      tableMapping.ColumnMappings.Add("ApplicationId","ApplicationId");
      tableMapping.ColumnMappings.Add("UserId","UserId");
      tableMapping.ColumnMappings.Add("Password","Password");
      tableMapping.ColumnMappings.Add("PasswordFormat","PasswordFormat");
      tableMapping.ColumnMappings.Add("PasswordSalt","PasswordSalt");
      tableMapping.ColumnMappings.Add("MobilePIN","MobilePIN");
      tableMapping.ColumnMappings.Add("Email","Email");
      tableMapping.ColumnMappings.Add("LoweredEmail","LoweredEmail");
      tableMapping.ColumnMappings.Add("PasswordQuestion","PasswordQuestion");
      tableMapping.ColumnMappings.Add("PasswordAnswer","PasswordAnswer");
      tableMapping.ColumnMappings.Add("IsApproved","IsApproved");
      tableMapping.ColumnMappings.Add("IsLockedOut","IsLockedOut");
      tableMapping.ColumnMappings.Add("CreateDate","CreateDate");
      tableMapping.ColumnMappings.Add("LastLoginDate","LastLoginDate");
      tableMapping.ColumnMappings.Add("LastPasswordChangedDate","LastPasswordChangedDate");
      tableMapping.ColumnMappings.Add("LastLockoutDate","LastLockoutDate");
      tableMapping.ColumnMappings.Add("FailedPasswordAttemptCount","FailedPasswordAttemptCount");
      tableMapping.ColumnMappings.Add("FailedPasswordAttemptWindowStart","FailedPasswordAttemptWindowStart");
      tableMapping.ColumnMappings.Add("FailedPasswordAnswerAttemptCount","FailedPasswordAnswerAttemptCount");
      tableMapping.ColumnMappings.Add("FailedPasswordAnswerAttemptWindowStart","FailedPasswordAnswerAttemptWindowStart");
      tableMapping.ColumnMappings.Add("Comment","Comment");
      this.m_adapter.TableMappings.Add(tableMapping);
      this.m_adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.DeleteCommand.Connection = this.Connection;
      this.m_adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[aspnet_Membership] WHERE (([ApplicationId] = @Original_ApplicationId) AND ([UserId] = @Original_UserId) AND ([Password] = @Original_Password) AND ([PasswordFormat] = @Original_PasswordFormat) AND ([PasswordSalt] = @Original_PasswordSalt) AND ((@IsNull_MobilePIN = 1 AND [MobilePIN] IS NULL) OR ([MobilePIN] = @Original_MobilePIN)) AND ((@IsNull_Email = 1 AND [Email] IS NULL) OR ([Email] = @Original_Email)) AND ((@IsNull_LoweredEmail = 1 AND [LoweredEmail] IS NULL) OR ([LoweredEmail] = @Original_LoweredEmail)) AND ((@IsNull_PasswordQuestion = 1 AND [PasswordQuestion] IS NULL) OR ([PasswordQuestion] = @Original_PasswordQuestion)) AND ((@IsNull_PasswordAnswer = 1 AND [PasswordAnswer] IS NULL) OR ([PasswordAnswer] = @Original_PasswordAnswer)) AND ([IsApproved] = @Original_IsApproved) AND ([IsLockedOut] = @Original_IsLockedOut) AND ([CreateDate] = @Original_CreateDate) AND ([LastLoginDate] = @Original_LastLoginDate) AND ([LastPasswordChangedDate] = @Original_LastPasswordChangedDate) AND ([LastLockoutDate] = @Original_LastLockoutDate) AND ([FailedPasswordAttemptCount] = @Original_FailedPasswordAttemptCount) AND ([FailedPasswordAttemptWindowStart] = @Original_FailedPasswordAttemptWindowStart) AND ([FailedPasswordAnswerAttemptCount] = @Original_FailedPasswordAnswerAttemptCount) AND ([FailedPasswordAnswerAttemptWindowStart] = @Original_FailedPasswordAnswerAttemptWindowStart))";
      this.m_adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ApplicationId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"ApplicationId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"UserId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Password",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Password",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PasswordFormat",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"PasswordFormat",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PasswordSalt",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"PasswordSalt",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MobilePIN",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"MobilePIN",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MobilePIN",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"MobilePIN",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Email",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"Email",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Email",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Email",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_LoweredEmail",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"LoweredEmail",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LoweredEmail",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"LoweredEmail",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PasswordQuestion",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"PasswordQuestion",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PasswordQuestion",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"PasswordQuestion",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PasswordAnswer",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"PasswordAnswer",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PasswordAnswer",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"PasswordAnswer",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsApproved",System.Data.SqlDbType.Bit,0,System.Data.ParameterDirection.Input,0,0,"IsApproved",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsLockedOut",System.Data.SqlDbType.Bit,0,System.Data.ParameterDirection.Input,0,0,"IsLockedOut",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CreateDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"CreateDate",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LastLoginDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastLoginDate",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LastPasswordChangedDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastPasswordChangedDate",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LastLockoutDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastLockoutDate",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FailedPasswordAttemptCount",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"FailedPasswordAttemptCount",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FailedPasswordAttemptWindowStart",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"FailedPasswordAttemptWindowStart",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FailedPasswordAnswerAttemptCount",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"FailedPasswordAnswerAttemptCount",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FailedPasswordAnswerAttemptWindowStart",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"FailedPasswordAnswerAttemptWindowStart",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.InsertCommand.Connection = this.Connection;
      this.m_adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[aspnet_Membership] ([ApplicationId],[UserId],[Password],[PasswordFormat],[PasswordSalt],[MobilePIN],[Email],[LoweredEmail],[PasswordQuestion],[PasswordAnswer],[IsApproved],[IsLockedOut],[CreateDate],[LastLoginDate],[LastPasswordChangedDate],[LastLockoutDate],[FailedPasswordAttemptCount],[FailedPasswordAttemptWindowStart],[FailedPasswordAnswerAttemptCount],[FailedPasswordAnswerAttemptWindowStart],[Comment]) VALUES (@ApplicationId,@UserId,@Password,@PasswordFormat,@PasswordSalt,@MobilePIN,@Email,@LoweredEmail,@PasswordQuestion,@PasswordAnswer,@IsApproved,@IsLockedOut,@CreateDate,@LastLoginDate,@LastPasswordChangedDate,@LastLockoutDate,@FailedPasswordAttemptCount,@FailedPasswordAttemptWindowStart,@FailedPasswordAnswerAttemptCount,@FailedPasswordAnswerAttemptWindowStart,@Comment);
SELECT ApplicationId,UserId,Password,PasswordFormat,PasswordSalt,MobilePIN,Email,LoweredEmail,PasswordQuestion,PasswordAnswer,IsApproved,IsLockedOut,CreateDate,LastLoginDate,LastPasswordChangedDate,LastLockoutDate,FailedPasswordAttemptCount,FailedPasswordAttemptWindowStart,FailedPasswordAnswerAttemptCount,FailedPasswordAnswerAttemptWindowStart,Comment FROM aspnet_Membership WHERE (UserId = @UserId)";
      this.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ApplicationId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"ApplicationId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"UserId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Password",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Password",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PasswordFormat",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"PasswordFormat",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PasswordSalt",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"PasswordSalt",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MobilePIN",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"MobilePIN",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Email",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Email",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LoweredEmail",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"LoweredEmail",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PasswordQuestion",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"PasswordQuestion",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PasswordAnswer",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"PasswordAnswer",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsApproved",System.Data.SqlDbType.Bit,0,System.Data.ParameterDirection.Input,0,0,"IsApproved",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsLockedOut",System.Data.SqlDbType.Bit,0,System.Data.ParameterDirection.Input,0,0,"IsLockedOut",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreateDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"CreateDate",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastLoginDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastLoginDate",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastPasswordChangedDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastPasswordChangedDate",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastLockoutDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastLockoutDate",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FailedPasswordAttemptCount",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"FailedPasswordAttemptCount",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FailedPasswordAttemptWindowStart",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"FailedPasswordAttemptWindowStart",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FailedPasswordAnswerAttemptCount",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"FailedPasswordAnswerAttemptCount",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FailedPasswordAnswerAttemptWindowStart",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"FailedPasswordAnswerAttemptWindowStart",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Comment",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Comment",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.UpdateCommand.Connection = this.Connection;
      this.m_adapter.UpdateCommand.CommandText = "UPDATE [dbo].[aspnet_Membership] SET [ApplicationId] = @ApplicationId,[UserId] =" +
                " @UserId,[Password] = @Password,[PasswordFormat] = @PasswordFormat,[PasswordS" +
                "alt] = @PasswordSalt,[MobilePIN] = @MobilePIN,[Email] = @Email,[LoweredEmail]" +
                " = @LoweredEmail,[PasswordQuestion] = @PasswordQuestion,[PasswordAnswer] = @Pa" +
                "sswordAnswer,[IsApproved] = @IsApproved,[IsLockedOut] = @IsLockedOut,[CreateD" +
                "ate] = @CreateDate,[LastLoginDate] = @LastLoginDate,[LastPasswordChangedDate] " +
                "= @LastPasswordChangedDate,[LastLockoutDate] = @LastLockoutDate,[FailedPasswor" +
                "dAttemptCount] = @FailedPasswordAttemptCount,[FailedPasswordAttemptWindowStart]" +
                " = @FailedPasswordAttemptWindowStart,[FailedPasswordAnswerAttemptCount] = @Fail" +
                "edPasswordAnswerAttemptCount,[FailedPasswordAnswerAttemptWindowStart] = @Failed" +
                "PasswordAnswerAttemptWindowStart,[Comment] = @Comment WHERE (([ApplicationId] =" +
                " @Original_ApplicationId) AND ([UserId] = @Original_UserId) AND ([Password] = @O" +
                "riginal_Password) AND ([PasswordFormat] = @Original_PasswordFormat) AND ([Passwo" +
                "rdSalt] = @Original_PasswordSalt) AND ((@IsNull_MobilePIN = 1 AND [MobilePIN] IS" +
                " NULL) OR ([MobilePIN] = @Original_MobilePIN)) AND ((@IsNull_Email = 1 AND [Emai" +
                "l] IS NULL) OR ([Email] = @Original_Email)) AND ((@IsNull_LoweredEmail = 1 AND [" +
                "LoweredEmail] IS NULL) OR ([LoweredEmail] = @Original_LoweredEmail)) AND ((@IsNu" +
                "ll_PasswordQuestion = 1 AND [PasswordQuestion] IS NULL) OR ([PasswordQuestion] =" +
                " @Original_PasswordQuestion)) AND ((@IsNull_PasswordAnswer = 1 AND [PasswordAnsw" +
                "er] IS NULL) OR ([PasswordAnswer] = @Original_PasswordAnswer)) AND ([IsApproved]" +
                " = @Original_IsApproved) AND ([IsLockedOut] = @Original_IsLockedOut) AND ([Creat" +
                "eDate] = @Original_CreateDate) AND ([LastLoginDate] = @Original_LastLoginDate) A" +
                "ND ([LastPasswordChangedDate] = @Original_LastPasswordChangedDate) AND ([LastLoc" +
                "koutDate] = @Original_LastLockoutDate) AND ([FailedPasswordAttemptCount] = @Orig" +
                "inal_FailedPasswordAttemptCount) AND ([FailedPasswordAttemptWindowStart] = @Orig" +
                "inal_FailedPasswordAttemptWindowStart) AND ([FailedPasswordAnswerAttemptCount] =" +
                " @Original_FailedPasswordAnswerAttemptCount) AND ([FailedPasswordAnswerAttemptWi" +
                "ndowStart] = @Original_FailedPasswordAnswerAttemptWindowStart));\r\nSELECT Applica" +
                "tionId,UserId,Password,PasswordFormat,PasswordSalt,MobilePIN,Email,Lowere" +
                "dEmail,PasswordQuestion,PasswordAnswer,IsApproved,IsLockedOut,CreateDate,L" +
                "astLoginDate,LastPasswordChangedDate,LastLockoutDate,FailedPasswordAttemptCou" +
                "nt,FailedPasswordAttemptWindowStart,FailedPasswordAnswerAttemptCount,FailedPa" +
                "sswordAnswerAttemptWindowStart,Comment FROM aspnet_Membership WHERE (UserId = @" +
                "UserId)";
      this.m_adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ApplicationId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"ApplicationId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"UserId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Password",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Password",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PasswordFormat",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"PasswordFormat",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PasswordSalt",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"PasswordSalt",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MobilePIN",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"MobilePIN",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Email",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Email",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LoweredEmail",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"LoweredEmail",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PasswordQuestion",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"PasswordQuestion",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PasswordAnswer",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"PasswordAnswer",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsApproved",System.Data.SqlDbType.Bit,0,System.Data.ParameterDirection.Input,0,0,"IsApproved",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsLockedOut",System.Data.SqlDbType.Bit,0,System.Data.ParameterDirection.Input,0,0,"IsLockedOut",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreateDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"CreateDate",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastLoginDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastLoginDate",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastPasswordChangedDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastPasswordChangedDate",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastLockoutDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastLockoutDate",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FailedPasswordAttemptCount",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"FailedPasswordAttemptCount",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FailedPasswordAttemptWindowStart",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"FailedPasswordAttemptWindowStart",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FailedPasswordAnswerAttemptCount",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"FailedPasswordAnswerAttemptCount",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FailedPasswordAnswerAttemptWindowStart",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"FailedPasswordAnswerAttemptWindowStart",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Comment",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Comment",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ApplicationId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"ApplicationId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"UserId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Password",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Password",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PasswordFormat",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"PasswordFormat",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PasswordSalt",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"PasswordSalt",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MobilePIN",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"MobilePIN",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MobilePIN",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"MobilePIN",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Email",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"Email",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Email",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Email",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_LoweredEmail",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"LoweredEmail",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LoweredEmail",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"LoweredEmail",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PasswordQuestion",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"PasswordQuestion",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PasswordQuestion",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"PasswordQuestion",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PasswordAnswer",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"PasswordAnswer",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PasswordAnswer",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"PasswordAnswer",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsApproved",System.Data.SqlDbType.Bit,0,System.Data.ParameterDirection.Input,0,0,"IsApproved",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsLockedOut",System.Data.SqlDbType.Bit,0,System.Data.ParameterDirection.Input,0,0,"IsLockedOut",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CreateDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"CreateDate",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LastLoginDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastLoginDate",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LastPasswordChangedDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastPasswordChangedDate",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LastLockoutDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastLockoutDate",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FailedPasswordAttemptCount",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"FailedPasswordAttemptCount",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FailedPasswordAttemptWindowStart",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"FailedPasswordAttemptWindowStart",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FailedPasswordAnswerAttemptCount",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"FailedPasswordAnswerAttemptCount",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_FailedPasswordAnswerAttemptWindowStart",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"FailedPasswordAnswerAttemptWindowStart",System.Data.DataRowVersion.Original,false,null,"","",""));
   }

   private void InitConnection()
   {
      this.m_connection = new System.Data.SqlClient.SqlConnection();
      this.m_connection.ConnectionString = DataAccessUtil.GetConnectionString();
   }


   private void InitCommandCollection()
   {
      this.m_commandCollection = new System.Data.SqlClient.SqlCommand[1];
      this.m_commandCollection[0] = new System.Data.SqlClient.SqlCommand();
      this.m_commandCollection[0].Connection = this.Connection;
      this.m_commandCollection[0].CommandText = @"SELECT ApplicationId,UserId,Password,PasswordFormat,PasswordSalt,MobilePIN,Email,LoweredEmail,PasswordQuestion,PasswordAnswer,IsApproved,IsLockedOut,CreateDate,LastLoginDate,LastPasswordChangedDate,LastLockoutDate,FailedPasswordAttemptCount,FailedPasswordAttemptWindowStart,FailedPasswordAnswerAttemptCount,FailedPasswordAnswerAttemptWindowStart,Comment FROM dbo.aspnet_Membership";
      this.m_commandCollection[0].CommandType = System.Data.CommandType.Text;
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill,true)]
   public virtual int Fill(AspNetDbDataSet.aspnet_MembershipDataTable dataTable)
   {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      if((this.m_clearBeforeFill == true))
      {
         dataTable.Clear();
      }
      int returnValue = this.Adapter.Fill(dataTable);
      return returnValue;
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select,true)]
   public virtual AspNetDbDataSet.aspnet_MembershipDataTable GetData()
   {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      AspNetDbDataSet.aspnet_MembershipDataTable dataTable = new AspNetDbDataSet.aspnet_MembershipDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
   }

   public virtual int Update(AspNetDbDataSet.aspnet_MembershipDataTable dataTable)
   {
      return this.Adapter.Update(dataTable);
   }

   public virtual int Update(AspNetDbDataSet dataSet)
   {
      return this.Adapter.Update(dataSet,"aspnet_Membership");
   }

   public virtual int Update(System.Data.DataRow dataRow)
   {
      return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
   }

   public virtual int Update(System.Data.DataRow[] dataRows)
   {
      return this.Adapter.Update(dataRows);
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete,true)]
   public virtual int Delete(
               System.Guid Original_ApplicationId,
               System.Guid Original_UserId,
               string Original_Password,
               int Original_PasswordFormat,
               string Original_PasswordSalt,
               string Original_MobilePIN,
               string Original_Email,
               string Original_LoweredEmail,
               string Original_PasswordQuestion,
               string Original_PasswordAnswer,
               bool Original_IsApproved,
               bool Original_IsLockedOut,
               System.DateTime Original_CreateDate,
               System.DateTime Original_LastLoginDate,
               System.DateTime Original_LastPasswordChangedDate,
               System.DateTime Original_LastLockoutDate,
               int Original_FailedPasswordAttemptCount,
               System.DateTime Original_FailedPasswordAttemptWindowStart,
               int Original_FailedPasswordAnswerAttemptCount,
               System.DateTime Original_FailedPasswordAnswerAttemptWindowStart)
   {
      this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_ApplicationId));
      this.Adapter.DeleteCommand.Parameters[1].Value = ((System.Guid)(Original_UserId));
      if((Original_Password == null))
      {
         throw new System.ArgumentNullException("Original_Password");
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Password));
      }
      this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_PasswordFormat));
      if((Original_PasswordSalt == null))
      {
         throw new System.ArgumentNullException("Original_PasswordSalt");
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_PasswordSalt));
      }
      if((Original_MobilePIN == null))
      {
         this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(1));
         this.Adapter.DeleteCommand.Parameters[6].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[5].Value = ((int)(0));
         this.Adapter.DeleteCommand.Parameters[6].Value = ((string)(Original_MobilePIN));
      }
      if((Original_Email == null))
      {
         this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(1));
         this.Adapter.DeleteCommand.Parameters[8].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(0));
         this.Adapter.DeleteCommand.Parameters[8].Value = ((string)(Original_Email));
      }
      if((Original_LoweredEmail == null))
      {
         this.Adapter.DeleteCommand.Parameters[9].Value = ((int)(1));
         this.Adapter.DeleteCommand.Parameters[10].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[9].Value = ((int)(0));
         this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_LoweredEmail));
      }
      if((Original_PasswordQuestion == null))
      {
         this.Adapter.DeleteCommand.Parameters[11].Value = ((int)(1));
         this.Adapter.DeleteCommand.Parameters[12].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[11].Value = ((int)(0));
         this.Adapter.DeleteCommand.Parameters[12].Value = ((string)(Original_PasswordQuestion));
      }
      if((Original_PasswordAnswer == null))
      {
         this.Adapter.DeleteCommand.Parameters[13].Value = ((int)(1));
         this.Adapter.DeleteCommand.Parameters[14].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[13].Value = ((int)(0));
         this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_PasswordAnswer));
      }
      this.Adapter.DeleteCommand.Parameters[15].Value = ((bool)(Original_IsApproved));
      this.Adapter.DeleteCommand.Parameters[16].Value = ((bool)(Original_IsLockedOut));
      this.Adapter.DeleteCommand.Parameters[17].Value = ((System.DateTime)(Original_CreateDate));
      this.Adapter.DeleteCommand.Parameters[18].Value = ((System.DateTime)(Original_LastLoginDate));
      this.Adapter.DeleteCommand.Parameters[19].Value = ((System.DateTime)(Original_LastPasswordChangedDate));
      this.Adapter.DeleteCommand.Parameters[20].Value = ((System.DateTime)(Original_LastLockoutDate));
      this.Adapter.DeleteCommand.Parameters[21].Value = ((int)(Original_FailedPasswordAttemptCount));
      this.Adapter.DeleteCommand.Parameters[22].Value = ((System.DateTime)(Original_FailedPasswordAttemptWindowStart));
      this.Adapter.DeleteCommand.Parameters[23].Value = ((int)(Original_FailedPasswordAnswerAttemptCount));
      this.Adapter.DeleteCommand.Parameters[24].Value = ((System.DateTime)(Original_FailedPasswordAnswerAttemptWindowStart));
      System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
      this.Adapter.DeleteCommand.Connection.Open();
      try
      {
         return this.Adapter.DeleteCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.DeleteCommand.Connection.Close();
         }
      }
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert,true)]
   public virtual int Insert(
               System.Guid ApplicationId,
               System.Guid UserId,
               string Password,
               int PasswordFormat,
               string PasswordSalt,
               string MobilePIN,
               string Email,
               string LoweredEmail,
               string PasswordQuestion,
               string PasswordAnswer,
               bool IsApproved,
               bool IsLockedOut,
               System.DateTime CreateDate,
               System.DateTime LastLoginDate,
               System.DateTime LastPasswordChangedDate,
               System.DateTime LastLockoutDate,
               int FailedPasswordAttemptCount,
               System.DateTime FailedPasswordAttemptWindowStart,
               int FailedPasswordAnswerAttemptCount,
               System.DateTime FailedPasswordAnswerAttemptWindowStart,
               string Comment)
   {
      this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(ApplicationId));
      this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(UserId));
      if((Password == null))
      {
         throw new System.ArgumentNullException("Password");
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Password));
      }
      this.Adapter.InsertCommand.Parameters[3].Value = ((int)(PasswordFormat));
      if((PasswordSalt == null))
      {
         throw new System.ArgumentNullException("PasswordSalt");
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[4].Value = ((string)(PasswordSalt));
      }
      if((MobilePIN == null))
      {
         this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[5].Value = ((string)(MobilePIN));
      }
      if((Email == null))
      {
         this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Email));
      }
      if((LoweredEmail == null))
      {
         this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[7].Value = ((string)(LoweredEmail));
      }
      if((PasswordQuestion == null))
      {
         this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[8].Value = ((string)(PasswordQuestion));
      }
      if((PasswordAnswer == null))
      {
         this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[9].Value = ((string)(PasswordAnswer));
      }
      this.Adapter.InsertCommand.Parameters[10].Value = ((bool)(IsApproved));
      this.Adapter.InsertCommand.Parameters[11].Value = ((bool)(IsLockedOut));
      this.Adapter.InsertCommand.Parameters[12].Value = ((System.DateTime)(CreateDate));
      this.Adapter.InsertCommand.Parameters[13].Value = ((System.DateTime)(LastLoginDate));
      this.Adapter.InsertCommand.Parameters[14].Value = ((System.DateTime)(LastPasswordChangedDate));
      this.Adapter.InsertCommand.Parameters[15].Value = ((System.DateTime)(LastLockoutDate));
      this.Adapter.InsertCommand.Parameters[16].Value = ((int)(FailedPasswordAttemptCount));
      this.Adapter.InsertCommand.Parameters[17].Value = ((System.DateTime)(FailedPasswordAttemptWindowStart));
      this.Adapter.InsertCommand.Parameters[18].Value = ((int)(FailedPasswordAnswerAttemptCount));
      this.Adapter.InsertCommand.Parameters[19].Value = ((System.DateTime)(FailedPasswordAnswerAttemptWindowStart));
      if((Comment == null))
      {
         this.Adapter.InsertCommand.Parameters[20].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[20].Value = ((string)(Comment));
      }
      System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
      this.Adapter.InsertCommand.Connection.Open();
      try
      {
         return this.Adapter.InsertCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.InsertCommand.Connection.Close();
         }
      }
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update,true)]
   public virtual int Update(
               System.Guid ApplicationId,
               System.Guid UserId,
               string Password,
               int PasswordFormat,
               string PasswordSalt,
               string MobilePIN,
               string Email,
               string LoweredEmail,
               string PasswordQuestion,
               string PasswordAnswer,
               bool IsApproved,
               bool IsLockedOut,
               System.DateTime CreateDate,
               System.DateTime LastLoginDate,
               System.DateTime LastPasswordChangedDate,
               System.DateTime LastLockoutDate,
               int FailedPasswordAttemptCount,
               System.DateTime FailedPasswordAttemptWindowStart,
               int FailedPasswordAnswerAttemptCount,
               System.DateTime FailedPasswordAnswerAttemptWindowStart,
               string Comment,
               System.Guid Original_ApplicationId,
               System.Guid Original_UserId,
               string Original_Password,
               int Original_PasswordFormat,
               string Original_PasswordSalt,
               string Original_MobilePIN,
               string Original_Email,
               string Original_LoweredEmail,
               string Original_PasswordQuestion,
               string Original_PasswordAnswer,
               bool Original_IsApproved,
               bool Original_IsLockedOut,
               System.DateTime Original_CreateDate,
               System.DateTime Original_LastLoginDate,
               System.DateTime Original_LastPasswordChangedDate,
               System.DateTime Original_LastLockoutDate,
               int Original_FailedPasswordAttemptCount,
               System.DateTime Original_FailedPasswordAttemptWindowStart,
               int Original_FailedPasswordAnswerAttemptCount,
               System.DateTime Original_FailedPasswordAnswerAttemptWindowStart)
   {
      this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(ApplicationId));
      this.Adapter.UpdateCommand.Parameters[1].Value = ((System.Guid)(UserId));
      if((Password == null))
      {
         throw new System.ArgumentNullException("Password");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Password));
      }
      this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(PasswordFormat));
      if((PasswordSalt == null))
      {
         throw new System.ArgumentNullException("PasswordSalt");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(PasswordSalt));
      }
      if((MobilePIN == null))
      {
         this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(MobilePIN));
      }
      if((Email == null))
      {
         this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Email));
      }
      if((LoweredEmail == null))
      {
         this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(LoweredEmail));
      }
      if((PasswordQuestion == null))
      {
         this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(PasswordQuestion));
      }
      if((PasswordAnswer == null))
      {
         this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(PasswordAnswer));
      }
      this.Adapter.UpdateCommand.Parameters[10].Value = ((bool)(IsApproved));
      this.Adapter.UpdateCommand.Parameters[11].Value = ((bool)(IsLockedOut));
      this.Adapter.UpdateCommand.Parameters[12].Value = ((System.DateTime)(CreateDate));
      this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(LastLoginDate));
      this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(LastPasswordChangedDate));
      this.Adapter.UpdateCommand.Parameters[15].Value = ((System.DateTime)(LastLockoutDate));
      this.Adapter.UpdateCommand.Parameters[16].Value = ((int)(FailedPasswordAttemptCount));
      this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(FailedPasswordAttemptWindowStart));
      this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(FailedPasswordAnswerAttemptCount));
      this.Adapter.UpdateCommand.Parameters[19].Value = ((System.DateTime)(FailedPasswordAnswerAttemptWindowStart));
      if((Comment == null))
      {
         this.Adapter.UpdateCommand.Parameters[20].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Comment));
      }
      this.Adapter.UpdateCommand.Parameters[21].Value = ((System.Guid)(Original_ApplicationId));
      this.Adapter.UpdateCommand.Parameters[22].Value = ((System.Guid)(Original_UserId));
      if((Original_Password == null))
      {
         throw new System.ArgumentNullException("Original_Password");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[23].Value = ((string)(Original_Password));
      }
      this.Adapter.UpdateCommand.Parameters[24].Value = ((int)(Original_PasswordFormat));
      if((Original_PasswordSalt == null))
      {
         throw new System.ArgumentNullException("Original_PasswordSalt");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[25].Value = ((string)(Original_PasswordSalt));
      }
      if((Original_MobilePIN == null))
      {
         this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(1));
         this.Adapter.UpdateCommand.Parameters[27].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(0));
         this.Adapter.UpdateCommand.Parameters[27].Value = ((string)(Original_MobilePIN));
      }
      if((Original_Email == null))
      {
         this.Adapter.UpdateCommand.Parameters[28].Value = ((int)(1));
         this.Adapter.UpdateCommand.Parameters[29].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[28].Value = ((int)(0));
         this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_Email));
      }
      if((Original_LoweredEmail == null))
      {
         this.Adapter.UpdateCommand.Parameters[30].Value = ((int)(1));
         this.Adapter.UpdateCommand.Parameters[31].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[30].Value = ((int)(0));
         this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_LoweredEmail));
      }
      if((Original_PasswordQuestion == null))
      {
         this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(1));
         this.Adapter.UpdateCommand.Parameters[33].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(0));
         this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_PasswordQuestion));
      }
      if((Original_PasswordAnswer == null))
      {
         this.Adapter.UpdateCommand.Parameters[34].Value = ((int)(1));
         this.Adapter.UpdateCommand.Parameters[35].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[34].Value = ((int)(0));
         this.Adapter.UpdateCommand.Parameters[35].Value = ((string)(Original_PasswordAnswer));
      }
      this.Adapter.UpdateCommand.Parameters[36].Value = ((bool)(Original_IsApproved));
      this.Adapter.UpdateCommand.Parameters[37].Value = ((bool)(Original_IsLockedOut));
      this.Adapter.UpdateCommand.Parameters[38].Value = ((System.DateTime)(Original_CreateDate));
      this.Adapter.UpdateCommand.Parameters[39].Value = ((System.DateTime)(Original_LastLoginDate));
      this.Adapter.UpdateCommand.Parameters[40].Value = ((System.DateTime)(Original_LastPasswordChangedDate));
      this.Adapter.UpdateCommand.Parameters[41].Value = ((System.DateTime)(Original_LastLockoutDate));
      this.Adapter.UpdateCommand.Parameters[42].Value = ((int)(Original_FailedPasswordAttemptCount));
      this.Adapter.UpdateCommand.Parameters[43].Value = ((System.DateTime)(Original_FailedPasswordAttemptWindowStart));
      this.Adapter.UpdateCommand.Parameters[44].Value = ((int)(Original_FailedPasswordAnswerAttemptCount));
      this.Adapter.UpdateCommand.Parameters[45].Value = ((System.DateTime)(Original_FailedPasswordAnswerAttemptWindowStart));
      System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
      this.Adapter.UpdateCommand.Connection.Open();
      try
      {
         return this.Adapter.UpdateCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.UpdateCommand.Connection.Close();
         }
      }
   }
}

[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.ComponentModel.ToolboxItem(true)]
[System.ComponentModel.DataObjectAttribute(true)]
[System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner,Microsoft.VSDesigner" +
        ",Version=8.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a")]
[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
public partial class aspnet_PathsTableAdapter : System.ComponentModel.Component
{

   private System.Data.SqlClient.SqlDataAdapter m_adapter;

   private System.Data.SqlClient.SqlConnection m_connection;

   private System.Data.SqlClient.SqlCommand[] m_commandCollection;

   private bool m_clearBeforeFill;

   public aspnet_PathsTableAdapter()
   {
      this.m_clearBeforeFill = true;
   }

   private System.Data.SqlClient.SqlDataAdapter Adapter
   {
      get
      {
         if((this.m_adapter == null))
         {
            this.InitAdapter();
         }
         return this.m_adapter;
      }
   }

   internal System.Data.SqlClient.SqlConnection Connection
   {
      get
      {
         if((this.m_connection == null))
         {
            this.InitConnection();
         }
         return this.m_connection;
      }
      set
      {
         this.m_connection = value;
         if((this.Adapter.InsertCommand != null))
         {
            this.Adapter.InsertCommand.Connection = value;
         }
         if((this.Adapter.DeleteCommand != null))
         {
            this.Adapter.DeleteCommand.Connection = value;
         }
         if((this.Adapter.UpdateCommand != null))
         {
            this.Adapter.UpdateCommand.Connection = value;
         }
         for(int i = 0;(i < this.CommandCollection.Length);i = (i + 1))
         {
            if((this.CommandCollection[i] != null))
            {
               ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
            }
         }
      }
   }

   protected System.Data.SqlClient.SqlCommand[] CommandCollection
   {
      get
      {
         if((this.m_commandCollection == null))
         {
            this.InitCommandCollection();
         }
         return this.m_commandCollection;
      }
   }

   public bool ClearBeforeFill
   {
      get
      {
         return this.m_clearBeforeFill;
      }
      set
      {
         this.m_clearBeforeFill = value;
      }
   }

   private void InitAdapter()
   {
      this.m_adapter = new System.Data.SqlClient.SqlDataAdapter();
      System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
      tableMapping.SourceTable = "Table";
      tableMapping.DataSetTable = "aspnet_Paths";
      tableMapping.ColumnMappings.Add("ApplicationId","ApplicationId");
      tableMapping.ColumnMappings.Add("PathId","PathId");
      tableMapping.ColumnMappings.Add("Path","Path");
      tableMapping.ColumnMappings.Add("LoweredPath","LoweredPath");
      this.m_adapter.TableMappings.Add(tableMapping);
      this.m_adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.DeleteCommand.Connection = this.Connection;
      this.m_adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[aspnet_Paths] WHERE (([ApplicationId] = @Original_ApplicationI" +
                "d) AND ([PathId] = @Original_PathId) AND ([Path] = @Original_Path) AND ([Lowered" +
                "Path] = @Original_LoweredPath))";
      this.m_adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ApplicationId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"ApplicationId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PathId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"PathId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Path",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Path",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LoweredPath",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"LoweredPath",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.InsertCommand.Connection = this.Connection;
      this.m_adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[aspnet_Paths] ([ApplicationId],[PathId],[Path],[LoweredPath" +
                "]) VALUES (@ApplicationId,@PathId,@Path,@LoweredPath);\r\nSELECT ApplicationId," +
                " PathId,Path,LoweredPath FROM aspnet_Paths WHERE (PathId = @PathId)";
      this.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ApplicationId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"ApplicationId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PathId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"PathId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Path",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Path",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LoweredPath",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"LoweredPath",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.UpdateCommand.Connection = this.Connection;
      this.m_adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[aspnet_Paths] SET [ApplicationId] = @ApplicationId,[PathId] = @PathId,[Path] = @Path,[LoweredPath] = @LoweredPath WHERE (([ApplicationId] = @Original_ApplicationId) AND ([PathId] = @Original_PathId) AND ([Path] = @Original_Path) AND ([LoweredPath] = @Original_LoweredPath));
SELECT ApplicationId,PathId,Path,LoweredPath FROM aspnet_Paths WHERE (PathId = @PathId)";
      this.m_adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ApplicationId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"ApplicationId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PathId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"PathId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Path",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Path",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LoweredPath",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"LoweredPath",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ApplicationId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"ApplicationId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PathId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"PathId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Path",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Path",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LoweredPath",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"LoweredPath",System.Data.DataRowVersion.Original,false,null,"","",""));
   }

   private void InitConnection()
   {
      this.m_connection = new System.Data.SqlClient.SqlConnection();
      this.m_connection.ConnectionString = DataAccessUtil.GetConnectionString();
   }


   private void InitCommandCollection()
   {
      this.m_commandCollection = new System.Data.SqlClient.SqlCommand[1];
      this.m_commandCollection[0] = new System.Data.SqlClient.SqlCommand();
      this.m_commandCollection[0].Connection = this.Connection;
      this.m_commandCollection[0].CommandText = "SELECT ApplicationId,PathId,Path,LoweredPath FROM dbo.aspnet_Paths";
      this.m_commandCollection[0].CommandType = System.Data.CommandType.Text;
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill,true)]
   public virtual int Fill(AspNetDbDataSet.aspnet_PathsDataTable dataTable)
   {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      if((this.m_clearBeforeFill == true))
      {
         dataTable.Clear();
      }
      int returnValue = this.Adapter.Fill(dataTable);
      return returnValue;
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select,true)]
   public virtual AspNetDbDataSet.aspnet_PathsDataTable GetData()
   {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      AspNetDbDataSet.aspnet_PathsDataTable dataTable = new AspNetDbDataSet.aspnet_PathsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
   }

   public virtual int Update(AspNetDbDataSet.aspnet_PathsDataTable dataTable)
   {
      return this.Adapter.Update(dataTable);
   }

   public virtual int Update(AspNetDbDataSet dataSet)
   {
      return this.Adapter.Update(dataSet,"aspnet_Paths");
   }

   public virtual int Update(System.Data.DataRow dataRow)
   {
      return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
   }

   public virtual int Update(System.Data.DataRow[] dataRows)
   {
      return this.Adapter.Update(dataRows);
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete,true)]
   public virtual int Delete(System.Guid Original_ApplicationId,System.Guid Original_PathId,string Original_Path,string Original_LoweredPath)
   {
      this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_ApplicationId));
      this.Adapter.DeleteCommand.Parameters[1].Value = ((System.Guid)(Original_PathId));
      if((Original_Path == null))
      {
         throw new System.ArgumentNullException("Original_Path");
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_Path));
      }
      if((Original_LoweredPath == null))
      {
         throw new System.ArgumentNullException("Original_LoweredPath");
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_LoweredPath));
      }
      System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
      this.Adapter.DeleteCommand.Connection.Open();
      try
      {
         return this.Adapter.DeleteCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.DeleteCommand.Connection.Close();
         }
      }
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert,true)]
   public virtual int Insert(System.Guid ApplicationId,System.Guid PathId,string Path,string LoweredPath)
   {
      this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(ApplicationId));
      this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(PathId));
      if((Path == null))
      {
         throw new System.ArgumentNullException("Path");
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Path));
      }
      if((LoweredPath == null))
      {
         throw new System.ArgumentNullException("LoweredPath");
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[3].Value = ((string)(LoweredPath));
      }
      System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
      this.Adapter.InsertCommand.Connection.Open();
      try
      {
         return this.Adapter.InsertCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.InsertCommand.Connection.Close();
         }
      }
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update,true)]
   public virtual int Update(System.Guid ApplicationId,System.Guid PathId,string Path,string LoweredPath,System.Guid Original_ApplicationId,System.Guid Original_PathId,string Original_Path,string Original_LoweredPath)
   {
      this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(ApplicationId));
      this.Adapter.UpdateCommand.Parameters[1].Value = ((System.Guid)(PathId));
      if((Path == null))
      {
         throw new System.ArgumentNullException("Path");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Path));
      }
      if((LoweredPath == null))
      {
         throw new System.ArgumentNullException("LoweredPath");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(LoweredPath));
      }
      this.Adapter.UpdateCommand.Parameters[4].Value = ((System.Guid)(Original_ApplicationId));
      this.Adapter.UpdateCommand.Parameters[5].Value = ((System.Guid)(Original_PathId));
      if((Original_Path == null))
      {
         throw new System.ArgumentNullException("Original_Path");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Original_Path));
      }
      if((Original_LoweredPath == null))
      {
         throw new System.ArgumentNullException("Original_LoweredPath");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_LoweredPath));
      }
      System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
      this.Adapter.UpdateCommand.Connection.Open();
      try
      {
         return this.Adapter.UpdateCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.UpdateCommand.Connection.Close();
         }
      }
   }
}

[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.ComponentModel.ToolboxItem(true)]
[System.ComponentModel.DataObjectAttribute(true)]
[System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner,Microsoft.VSDesigner" +
        ",Version=8.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a")]
[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
public partial class aspnet_PersonalizationAllUsersTableAdapter : System.ComponentModel.Component
{

   private System.Data.SqlClient.SqlDataAdapter m_adapter;

   private System.Data.SqlClient.SqlConnection m_connection;

   private System.Data.SqlClient.SqlCommand[] m_commandCollection;

   private bool m_clearBeforeFill;

   public aspnet_PersonalizationAllUsersTableAdapter()
   {
      this.m_clearBeforeFill = true;
   }

   private System.Data.SqlClient.SqlDataAdapter Adapter
   {
      get
      {
         if((this.m_adapter == null))
         {
            this.InitAdapter();
         }
         return this.m_adapter;
      }
   }

   internal System.Data.SqlClient.SqlConnection Connection
   {
      get
      {
         if((this.m_connection == null))
         {
            this.InitConnection();
         }
         return this.m_connection;
      }
      set
      {
         this.m_connection = value;
         if((this.Adapter.InsertCommand != null))
         {
            this.Adapter.InsertCommand.Connection = value;
         }
         if((this.Adapter.DeleteCommand != null))
         {
            this.Adapter.DeleteCommand.Connection = value;
         }
         if((this.Adapter.UpdateCommand != null))
         {
            this.Adapter.UpdateCommand.Connection = value;
         }
         for(int i = 0;(i < this.CommandCollection.Length);i = (i + 1))
         {
            if((this.CommandCollection[i] != null))
            {
               ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
            }
         }
      }
   }

   protected System.Data.SqlClient.SqlCommand[] CommandCollection
   {
      get
      {
         if((this.m_commandCollection == null))
         {
            this.InitCommandCollection();
         }
         return this.m_commandCollection;
      }
   }

   public bool ClearBeforeFill
   {
      get
      {
         return this.m_clearBeforeFill;
      }
      set
      {
         this.m_clearBeforeFill = value;
      }
   }

   private void InitAdapter()
   {
      this.m_adapter = new System.Data.SqlClient.SqlDataAdapter();
      System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
      tableMapping.SourceTable = "Table";
      tableMapping.DataSetTable = "aspnet_PersonalizationAllUsers";
      tableMapping.ColumnMappings.Add("PathId","PathId");
      tableMapping.ColumnMappings.Add("PageSettings","PageSettings");
      tableMapping.ColumnMappings.Add("LastUpdatedDate","LastUpdatedDate");
      this.m_adapter.TableMappings.Add(tableMapping);
      this.m_adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.DeleteCommand.Connection = this.Connection;
      this.m_adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[aspnet_PersonalizationAllUsers] WHERE (([PathId] = @Original_P" +
                "athId) AND ([LastUpdatedDate] = @Original_LastUpdatedDate))";
      this.m_adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PathId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"PathId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LastUpdatedDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastUpdatedDate",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.InsertCommand.Connection = this.Connection;
      this.m_adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[aspnet_PersonalizationAllUsers] ([PathId],[PageSettings],[La" +
                "stUpdatedDate]) VALUES (@PathId,@PageSettings,@LastUpdatedDate);\r\nSELECT PathI" +
                "d,PageSettings,LastUpdatedDate FROM aspnet_PersonalizationAllUsers WHERE (Path" +
                "Id = @PathId)";
      this.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PathId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"PathId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PageSettings",System.Data.SqlDbType.VarBinary,0,System.Data.ParameterDirection.Input,0,0,"PageSettings",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastUpdatedDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastUpdatedDate",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.UpdateCommand.Connection = this.Connection;
      this.m_adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[aspnet_PersonalizationAllUsers] SET [PathId] = @PathId,[PageSettings] = @PageSettings,[LastUpdatedDate] = @LastUpdatedDate WHERE (([PathId] = @Original_PathId) AND ([LastUpdatedDate] = @Original_LastUpdatedDate));
SELECT PathId,PageSettings,LastUpdatedDate FROM aspnet_PersonalizationAllUsers WHERE (PathId = @PathId)";
      this.m_adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PathId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"PathId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PageSettings",System.Data.SqlDbType.VarBinary,0,System.Data.ParameterDirection.Input,0,0,"PageSettings",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastUpdatedDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastUpdatedDate",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PathId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"PathId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LastUpdatedDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastUpdatedDate",System.Data.DataRowVersion.Original,false,null,"","",""));
   }

   private void InitConnection()
   {
      this.m_connection = new System.Data.SqlClient.SqlConnection();
      this.m_connection.ConnectionString = DataAccessUtil.GetConnectionString();
   }


   private void InitCommandCollection()
   {
      this.m_commandCollection = new System.Data.SqlClient.SqlCommand[1];
      this.m_commandCollection[0] = new System.Data.SqlClient.SqlCommand();
      this.m_commandCollection[0].Connection = this.Connection;
      this.m_commandCollection[0].CommandText = "SELECT PathId,PageSettings,LastUpdatedDate FROM dbo.aspnet_PersonalizationAllUs" +
                "ers";
      this.m_commandCollection[0].CommandType = System.Data.CommandType.Text;
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill,true)]
   public virtual int Fill(AspNetDbDataSet.aspnet_PersonalizationAllUsersDataTable dataTable)
   {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      if((this.m_clearBeforeFill == true))
      {
         dataTable.Clear();
      }
      int returnValue = this.Adapter.Fill(dataTable);
      return returnValue;
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select,true)]
   public virtual AspNetDbDataSet.aspnet_PersonalizationAllUsersDataTable GetData()
   {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      AspNetDbDataSet.aspnet_PersonalizationAllUsersDataTable dataTable = new AspNetDbDataSet.aspnet_PersonalizationAllUsersDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
   }

   public virtual int Update(AspNetDbDataSet.aspnet_PersonalizationAllUsersDataTable dataTable)
   {
      return this.Adapter.Update(dataTable);
   }

   public virtual int Update(AspNetDbDataSet dataSet)
   {
      return this.Adapter.Update(dataSet,"aspnet_PersonalizationAllUsers");
   }

   public virtual int Update(System.Data.DataRow dataRow)
   {
      return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
   }

   public virtual int Update(System.Data.DataRow[] dataRows)
   {
      return this.Adapter.Update(dataRows);
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete,true)]
   public virtual int Delete(System.Guid Original_PathId,System.DateTime Original_LastUpdatedDate)
   {
      this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_PathId));
      this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_LastUpdatedDate));
      System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
      this.Adapter.DeleteCommand.Connection.Open();
      try
      {
         return this.Adapter.DeleteCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.DeleteCommand.Connection.Close();
         }
      }
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert,true)]
   public virtual int Insert(System.Guid PathId,byte[] PageSettings,System.DateTime LastUpdatedDate)
   {
      this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(PathId));
      if((PageSettings == null))
      {
         throw new System.ArgumentNullException("PageSettings");
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[1].Value = ((byte[])(PageSettings));
      }
      this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(LastUpdatedDate));
      System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
      this.Adapter.InsertCommand.Connection.Open();
      try
      {
         return this.Adapter.InsertCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.InsertCommand.Connection.Close();
         }
      }
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update,true)]
   public virtual int Update(System.Guid PathId,byte[] PageSettings,System.DateTime LastUpdatedDate,System.Guid Original_PathId,System.DateTime Original_LastUpdatedDate)
   {
      this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(PathId));
      if((PageSettings == null))
      {
         throw new System.ArgumentNullException("PageSettings");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[1].Value = ((byte[])(PageSettings));
      }
      this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(LastUpdatedDate));
      this.Adapter.UpdateCommand.Parameters[3].Value = ((System.Guid)(Original_PathId));
      this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(Original_LastUpdatedDate));
      System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
      this.Adapter.UpdateCommand.Connection.Open();
      try
      {
         return this.Adapter.UpdateCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.UpdateCommand.Connection.Close();
         }
      }
   }
}

[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.ComponentModel.ToolboxItem(true)]
[System.ComponentModel.DataObjectAttribute(true)]
[System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner,Microsoft.VSDesigner" +
        ",Version=8.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a")]
[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
public partial class aspnet_PersonalizationPerUserTableAdapter : System.ComponentModel.Component
{

   private System.Data.SqlClient.SqlDataAdapter m_adapter;

   private System.Data.SqlClient.SqlConnection m_connection;

   private System.Data.SqlClient.SqlCommand[] m_commandCollection;

   private bool m_clearBeforeFill;

   public aspnet_PersonalizationPerUserTableAdapter()
   {
      this.m_clearBeforeFill = true;
   }

   private System.Data.SqlClient.SqlDataAdapter Adapter
   {
      get
      {
         if((this.m_adapter == null))
         {
            this.InitAdapter();
         }
         return this.m_adapter;
      }
   }

   internal System.Data.SqlClient.SqlConnection Connection
   {
      get
      {
         if((this.m_connection == null))
         {
            this.InitConnection();
         }
         return this.m_connection;
      }
      set
      {
         this.m_connection = value;
         if((this.Adapter.InsertCommand != null))
         {
            this.Adapter.InsertCommand.Connection = value;
         }
         if((this.Adapter.DeleteCommand != null))
         {
            this.Adapter.DeleteCommand.Connection = value;
         }
         if((this.Adapter.UpdateCommand != null))
         {
            this.Adapter.UpdateCommand.Connection = value;
         }
         for(int i = 0;(i < this.CommandCollection.Length);i = (i + 1))
         {
            if((this.CommandCollection[i] != null))
            {
               ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
            }
         }
      }
   }

   protected System.Data.SqlClient.SqlCommand[] CommandCollection
   {
      get
      {
         if((this.m_commandCollection == null))
         {
            this.InitCommandCollection();
         }
         return this.m_commandCollection;
      }
   }

   public bool ClearBeforeFill
   {
      get
      {
         return this.m_clearBeforeFill;
      }
      set
      {
         this.m_clearBeforeFill = value;
      }
   }

   private void InitAdapter()
   {
      this.m_adapter = new System.Data.SqlClient.SqlDataAdapter();
      System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
      tableMapping.SourceTable = "Table";
      tableMapping.DataSetTable = "aspnet_PersonalizationPerUser";
      tableMapping.ColumnMappings.Add("Id","Id");
      tableMapping.ColumnMappings.Add("PathId","PathId");
      tableMapping.ColumnMappings.Add("UserId","UserId");
      tableMapping.ColumnMappings.Add("PageSettings","PageSettings");
      tableMapping.ColumnMappings.Add("LastUpdatedDate","LastUpdatedDate");
      this.m_adapter.TableMappings.Add(tableMapping);
      this.m_adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.DeleteCommand.Connection = this.Connection;
      this.m_adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[aspnet_PersonalizationPerUser] WHERE (([Id] = @Original_Id) AND ((@IsNull_PathId = 1 AND [PathId] IS NULL) OR ([PathId] = @Original_PathId)) AND ((@IsNull_UserId = 1 AND [UserId] IS NULL) OR ([UserId] = @Original_UserId)) AND ([LastUpdatedDate] = @Original_LastUpdatedDate))";
      this.m_adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Id",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"Id",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PathId",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"PathId",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PathId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"PathId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_UserId",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"UserId",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"UserId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LastUpdatedDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastUpdatedDate",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.InsertCommand.Connection = this.Connection;
      this.m_adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[aspnet_PersonalizationPerUser] ([Id],[PathId],[UserId],[PageSettings],[LastUpdatedDate]) VALUES (@Id,@PathId,@UserId,@PageSettings,@LastUpdatedDate);
SELECT Id,PathId,UserId,PageSettings,LastUpdatedDate FROM aspnet_PersonalizationPerUser WHERE (Id = @Id)";
      this.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Id",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"Id",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PathId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"PathId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"UserId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PageSettings",System.Data.SqlDbType.VarBinary,0,System.Data.ParameterDirection.Input,0,0,"PageSettings",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastUpdatedDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastUpdatedDate",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.UpdateCommand.Connection = this.Connection;
      this.m_adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[aspnet_PersonalizationPerUser] SET [Id] = @Id,[PathId] = @PathId,[UserId] = @UserId,[PageSettings] = @PageSettings,[LastUpdatedDate] = @LastUpdatedDate WHERE (([Id] = @Original_Id) AND ((@IsNull_PathId = 1 AND [PathId] IS NULL) OR ([PathId] = @Original_PathId)) AND ((@IsNull_UserId = 1 AND [UserId] IS NULL) OR ([UserId] = @Original_UserId)) AND ([LastUpdatedDate] = @Original_LastUpdatedDate));
SELECT Id,PathId,UserId,PageSettings,LastUpdatedDate FROM aspnet_PersonalizationPerUser WHERE (Id = @Id)";
      this.m_adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Id",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"Id",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PathId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"PathId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"UserId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PageSettings",System.Data.SqlDbType.VarBinary,0,System.Data.ParameterDirection.Input,0,0,"PageSettings",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastUpdatedDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastUpdatedDate",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Id",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"Id",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_PathId",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"PathId",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_PathId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"PathId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_UserId",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"UserId",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"UserId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LastUpdatedDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastUpdatedDate",System.Data.DataRowVersion.Original,false,null,"","",""));
   }

   private void InitConnection()
   {
      this.m_connection = new System.Data.SqlClient.SqlConnection();
      this.m_connection.ConnectionString = DataAccessUtil.GetConnectionString();
   }


   private void InitCommandCollection()
   {
      this.m_commandCollection = new System.Data.SqlClient.SqlCommand[1];
      this.m_commandCollection[0] = new System.Data.SqlClient.SqlCommand();
      this.m_commandCollection[0].Connection = this.Connection;
      this.m_commandCollection[0].CommandText = "SELECT Id,PathId,UserId,PageSettings,LastUpdatedDate FROM dbo.aspnet_Personal" +
                "izationPerUser";
      this.m_commandCollection[0].CommandType = System.Data.CommandType.Text;
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill,true)]
   public virtual int Fill(AspNetDbDataSet.aspnet_PersonalizationPerUserDataTable dataTable)
   {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      if((this.m_clearBeforeFill == true))
      {
         dataTable.Clear();
      }
      int returnValue = this.Adapter.Fill(dataTable);
      return returnValue;
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select,true)]
   public virtual AspNetDbDataSet.aspnet_PersonalizationPerUserDataTable GetData()
   {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      AspNetDbDataSet.aspnet_PersonalizationPerUserDataTable dataTable = new AspNetDbDataSet.aspnet_PersonalizationPerUserDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
   }

   public virtual int Update(AspNetDbDataSet.aspnet_PersonalizationPerUserDataTable dataTable)
   {
      return this.Adapter.Update(dataTable);
   }

   public virtual int Update(AspNetDbDataSet dataSet)
   {
      return this.Adapter.Update(dataSet,"aspnet_PersonalizationPerUser");
   }

   public virtual int Update(System.Data.DataRow dataRow)
   {
      return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
   }

   public virtual int Update(System.Data.DataRow[] dataRows)
   {
      return this.Adapter.Update(dataRows);
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete,true)]
   public virtual int Delete(System.Guid Original_Id,System.Nullable<System.Guid> Original_PathId,System.Nullable<System.Guid> Original_UserId,System.DateTime Original_LastUpdatedDate)
   {
      this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_Id));
      if((Original_PathId.HasValue == true))
      {
         this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(0));
         this.Adapter.DeleteCommand.Parameters[2].Value = ((System.Guid)(Original_PathId.Value));
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[1].Value = ((int)(1));
         this.Adapter.DeleteCommand.Parameters[2].Value = System.DBNull.Value;
      }
      if((Original_UserId.HasValue == true))
      {
         this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(0));
         this.Adapter.DeleteCommand.Parameters[4].Value = ((System.Guid)(Original_UserId.Value));
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(1));
         this.Adapter.DeleteCommand.Parameters[4].Value = System.DBNull.Value;
      }
      this.Adapter.DeleteCommand.Parameters[5].Value = ((System.DateTime)(Original_LastUpdatedDate));
      System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
      this.Adapter.DeleteCommand.Connection.Open();
      try
      {
         return this.Adapter.DeleteCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.DeleteCommand.Connection.Close();
         }
      }
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert,true)]
   public virtual int Insert(System.Guid Id,System.Nullable<System.Guid> PathId,System.Nullable<System.Guid> UserId,byte[] PageSettings,System.DateTime LastUpdatedDate)
   {
      this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(Id));
      if((PathId.HasValue == true))
      {
         this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(PathId.Value));
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
      }
      if((UserId.HasValue == true))
      {
         this.Adapter.InsertCommand.Parameters[2].Value = ((System.Guid)(UserId.Value));
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
      }
      if((PageSettings == null))
      {
         throw new System.ArgumentNullException("PageSettings");
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[3].Value = ((byte[])(PageSettings));
      }
      this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(LastUpdatedDate));
      System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
      this.Adapter.InsertCommand.Connection.Open();
      try
      {
         return this.Adapter.InsertCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.InsertCommand.Connection.Close();
         }
      }
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update,true)]
   public virtual int Update(System.Guid Id,System.Nullable<System.Guid> PathId,System.Nullable<System.Guid> UserId,byte[] PageSettings,System.DateTime LastUpdatedDate,System.Guid Original_Id,System.Nullable<System.Guid> Original_PathId,System.Nullable<System.Guid> Original_UserId,System.DateTime Original_LastUpdatedDate)
   {
      this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(Id));
      if((PathId.HasValue == true))
      {
         this.Adapter.UpdateCommand.Parameters[1].Value = ((System.Guid)(PathId.Value));
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
      }
      if((UserId.HasValue == true))
      {
         this.Adapter.UpdateCommand.Parameters[2].Value = ((System.Guid)(UserId.Value));
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
      }
      if((PageSettings == null))
      {
         throw new System.ArgumentNullException("PageSettings");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[3].Value = ((byte[])(PageSettings));
      }
      this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(LastUpdatedDate));
      this.Adapter.UpdateCommand.Parameters[5].Value = ((System.Guid)(Original_Id));
      if((Original_PathId.HasValue == true))
      {
         this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(0));
         this.Adapter.UpdateCommand.Parameters[7].Value = ((System.Guid)(Original_PathId.Value));
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(1));
         this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
      }
      if((Original_UserId.HasValue == true))
      {
         this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(0));
         this.Adapter.UpdateCommand.Parameters[9].Value = ((System.Guid)(Original_UserId.Value));
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(1));
         this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
      }
      this.Adapter.UpdateCommand.Parameters[10].Value = ((System.DateTime)(Original_LastUpdatedDate));
      System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
      this.Adapter.UpdateCommand.Connection.Open();
      try
      {
         return this.Adapter.UpdateCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.UpdateCommand.Connection.Close();
         }
      }
   }
}

[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.ComponentModel.ToolboxItem(true)]
[System.ComponentModel.DataObjectAttribute(true)]
[System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner,Microsoft.VSDesigner" +
        ",Version=8.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a")]
[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
public partial class aspnet_ProfileTableAdapter : System.ComponentModel.Component
{

   private System.Data.SqlClient.SqlDataAdapter m_adapter;

   private System.Data.SqlClient.SqlConnection m_connection;

   private System.Data.SqlClient.SqlCommand[] m_commandCollection;

   private bool m_clearBeforeFill;

   public aspnet_ProfileTableAdapter()
   {
      this.m_clearBeforeFill = true;
   }

   private System.Data.SqlClient.SqlDataAdapter Adapter
   {
      get
      {
         if((this.m_adapter == null))
         {
            this.InitAdapter();
         }
         return this.m_adapter;
      }
   }

   internal System.Data.SqlClient.SqlConnection Connection
   {
      get
      {
         if((this.m_connection == null))
         {
            this.InitConnection();
         }
         return this.m_connection;
      }
      set
      {
         this.m_connection = value;
         if((this.Adapter.InsertCommand != null))
         {
            this.Adapter.InsertCommand.Connection = value;
         }
         if((this.Adapter.DeleteCommand != null))
         {
            this.Adapter.DeleteCommand.Connection = value;
         }
         if((this.Adapter.UpdateCommand != null))
         {
            this.Adapter.UpdateCommand.Connection = value;
         }
         for(int i = 0;(i < this.CommandCollection.Length);i = (i + 1))
         {
            if((this.CommandCollection[i] != null))
            {
               ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
            }
         }
      }
   }

   protected System.Data.SqlClient.SqlCommand[] CommandCollection
   {
      get
      {
         if((this.m_commandCollection == null))
         {
            this.InitCommandCollection();
         }
         return this.m_commandCollection;
      }
   }

   public bool ClearBeforeFill
   {
      get
      {
         return this.m_clearBeforeFill;
      }
      set
      {
         this.m_clearBeforeFill = value;
      }
   }

   private void InitAdapter()
   {
      this.m_adapter = new System.Data.SqlClient.SqlDataAdapter();
      System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
      tableMapping.SourceTable = "Table";
      tableMapping.DataSetTable = "aspnet_Profile";
      tableMapping.ColumnMappings.Add("UserId","UserId");
      tableMapping.ColumnMappings.Add("PropertyNames","PropertyNames");
      tableMapping.ColumnMappings.Add("PropertyValuesString","PropertyValuesString");
      tableMapping.ColumnMappings.Add("PropertyValuesBinary","PropertyValuesBinary");
      tableMapping.ColumnMappings.Add("LastUpdatedDate","LastUpdatedDate");
      this.m_adapter.TableMappings.Add(tableMapping);
      this.m_adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.DeleteCommand.Connection = this.Connection;
      this.m_adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[aspnet_Profile] WHERE (([UserId] = @Original_UserId) AND ([Las" +
                "tUpdatedDate] = @Original_LastUpdatedDate))";
      this.m_adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"UserId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LastUpdatedDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastUpdatedDate",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.InsertCommand.Connection = this.Connection;
      this.m_adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[aspnet_Profile] ([UserId],[PropertyNames],[PropertyValuesString],[PropertyValuesBinary],[LastUpdatedDate]) VALUES (@UserId,@PropertyNames,@PropertyValuesString,@PropertyValuesBinary,@LastUpdatedDate);
SELECT UserId,PropertyNames,PropertyValuesString,PropertyValuesBinary,LastUpdatedDate FROM aspnet_Profile WHERE (UserId = @UserId)";
      this.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"UserId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PropertyNames",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"PropertyNames",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PropertyValuesString",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"PropertyValuesString",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PropertyValuesBinary",System.Data.SqlDbType.VarBinary,0,System.Data.ParameterDirection.Input,0,0,"PropertyValuesBinary",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastUpdatedDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastUpdatedDate",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.UpdateCommand.Connection = this.Connection;
      this.m_adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[aspnet_Profile] SET [UserId] = @UserId,[PropertyNames] = @PropertyNames,[PropertyValuesString] = @PropertyValuesString,[PropertyValuesBinary] = @PropertyValuesBinary,[LastUpdatedDate] = @LastUpdatedDate WHERE (([UserId] = @Original_UserId) AND ([LastUpdatedDate] = @Original_LastUpdatedDate));
SELECT UserId,PropertyNames,PropertyValuesString,PropertyValuesBinary,LastUpdatedDate FROM aspnet_Profile WHERE (UserId = @UserId)";
      this.m_adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"UserId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PropertyNames",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"PropertyNames",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PropertyValuesString",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"PropertyValuesString",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PropertyValuesBinary",System.Data.SqlDbType.VarBinary,0,System.Data.ParameterDirection.Input,0,0,"PropertyValuesBinary",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastUpdatedDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastUpdatedDate",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"UserId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LastUpdatedDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastUpdatedDate",System.Data.DataRowVersion.Original,false,null,"","",""));
   }

   private void InitConnection()
   {
      this.m_connection = new System.Data.SqlClient.SqlConnection();
      this.m_connection.ConnectionString = DataAccessUtil.GetConnectionString();
   }


   private void InitCommandCollection()
   {
      this.m_commandCollection = new System.Data.SqlClient.SqlCommand[1];
      this.m_commandCollection[0] = new System.Data.SqlClient.SqlCommand();
      this.m_commandCollection[0].Connection = this.Connection;
      this.m_commandCollection[0].CommandText = "SELECT UserId,PropertyNames,PropertyValuesString,PropertyValuesBinary,LastUpd" +
                "atedDate FROM dbo.aspnet_Profile";
      this.m_commandCollection[0].CommandType = System.Data.CommandType.Text;
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill,true)]
   public virtual int Fill(AspNetDbDataSet.aspnet_ProfileDataTable dataTable)
   {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      if((this.m_clearBeforeFill == true))
      {
         dataTable.Clear();
      }
      int returnValue = this.Adapter.Fill(dataTable);
      return returnValue;
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select,true)]
   public virtual AspNetDbDataSet.aspnet_ProfileDataTable GetData()
   {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      AspNetDbDataSet.aspnet_ProfileDataTable dataTable = new AspNetDbDataSet.aspnet_ProfileDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
   }

   public virtual int Update(AspNetDbDataSet.aspnet_ProfileDataTable dataTable)
   {
      return this.Adapter.Update(dataTable);
   }

   public virtual int Update(AspNetDbDataSet dataSet)
   {
      return this.Adapter.Update(dataSet,"aspnet_Profile");
   }

   public virtual int Update(System.Data.DataRow dataRow)
   {
      return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
   }

   public virtual int Update(System.Data.DataRow[] dataRows)
   {
      return this.Adapter.Update(dataRows);
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete,true)]
   public virtual int Delete(System.Guid Original_UserId,System.DateTime Original_LastUpdatedDate)
   {
      this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_UserId));
      this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_LastUpdatedDate));
      System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
      this.Adapter.DeleteCommand.Connection.Open();
      try
      {
         return this.Adapter.DeleteCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.DeleteCommand.Connection.Close();
         }
      }
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert,true)]
   public virtual int Insert(System.Guid UserId,string PropertyNames,string PropertyValuesString,byte[] PropertyValuesBinary,System.DateTime LastUpdatedDate)
   {
      this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(UserId));
      if((PropertyNames == null))
      {
         throw new System.ArgumentNullException("PropertyNames");
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[1].Value = ((string)(PropertyNames));
      }
      if((PropertyValuesString == null))
      {
         throw new System.ArgumentNullException("PropertyValuesString");
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[2].Value = ((string)(PropertyValuesString));
      }
      if((PropertyValuesBinary == null))
      {
         throw new System.ArgumentNullException("PropertyValuesBinary");
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[3].Value = ((byte[])(PropertyValuesBinary));
      }
      this.Adapter.InsertCommand.Parameters[4].Value = ((System.DateTime)(LastUpdatedDate));
      System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
      this.Adapter.InsertCommand.Connection.Open();
      try
      {
         return this.Adapter.InsertCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.InsertCommand.Connection.Close();
         }
      }
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update,true)]
   public virtual int Update(System.Guid UserId,string PropertyNames,string PropertyValuesString,byte[] PropertyValuesBinary,System.DateTime LastUpdatedDate,System.Guid Original_UserId,System.DateTime Original_LastUpdatedDate)
   {
      this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(UserId));
      if((PropertyNames == null))
      {
         throw new System.ArgumentNullException("PropertyNames");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(PropertyNames));
      }
      if((PropertyValuesString == null))
      {
         throw new System.ArgumentNullException("PropertyValuesString");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(PropertyValuesString));
      }
      if((PropertyValuesBinary == null))
      {
         throw new System.ArgumentNullException("PropertyValuesBinary");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[3].Value = ((byte[])(PropertyValuesBinary));
      }
      this.Adapter.UpdateCommand.Parameters[4].Value = ((System.DateTime)(LastUpdatedDate));
      this.Adapter.UpdateCommand.Parameters[5].Value = ((System.Guid)(Original_UserId));
      this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(Original_LastUpdatedDate));
      System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
      this.Adapter.UpdateCommand.Connection.Open();
      try
      {
         return this.Adapter.UpdateCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.UpdateCommand.Connection.Close();
         }
      }
   }
}

[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.ComponentModel.ToolboxItem(true)]
[System.ComponentModel.DataObjectAttribute(true)]
[System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner,Microsoft.VSDesigner" +
        ",Version=8.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a")]
[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
public partial class aspnet_RolesTableAdapter : System.ComponentModel.Component
{

   private System.Data.SqlClient.SqlDataAdapter m_adapter;

   private System.Data.SqlClient.SqlConnection m_connection;

   private System.Data.SqlClient.SqlCommand[] m_commandCollection;

   private bool m_clearBeforeFill;

   public aspnet_RolesTableAdapter()
   {
      this.m_clearBeforeFill = true;
   }

   private System.Data.SqlClient.SqlDataAdapter Adapter
   {
      get
      {
         if((this.m_adapter == null))
         {
            this.InitAdapter();
         }
         return this.m_adapter;
      }
   }

   internal System.Data.SqlClient.SqlConnection Connection
   {
      get
      {
         if((this.m_connection == null))
         {
            this.InitConnection();
         }
         return this.m_connection;
      }
      set
      {
         this.m_connection = value;
         if((this.Adapter.InsertCommand != null))
         {
            this.Adapter.InsertCommand.Connection = value;
         }
         if((this.Adapter.DeleteCommand != null))
         {
            this.Adapter.DeleteCommand.Connection = value;
         }
         if((this.Adapter.UpdateCommand != null))
         {
            this.Adapter.UpdateCommand.Connection = value;
         }
         for(int i = 0;(i < this.CommandCollection.Length);i = (i + 1))
         {
            if((this.CommandCollection[i] != null))
            {
               ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
            }
         }
      }
   }

   protected System.Data.SqlClient.SqlCommand[] CommandCollection
   {
      get
      {
         if((this.m_commandCollection == null))
         {
            this.InitCommandCollection();
         }
         return this.m_commandCollection;
      }
   }

   public bool ClearBeforeFill
   {
      get
      {
         return this.m_clearBeforeFill;
      }
      set
      {
         this.m_clearBeforeFill = value;
      }
   }

   private void InitAdapter()
   {
      this.m_adapter = new System.Data.SqlClient.SqlDataAdapter();
      System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
      tableMapping.SourceTable = "Table";
      tableMapping.DataSetTable = "aspnet_Roles";
      tableMapping.ColumnMappings.Add("ApplicationId","ApplicationId");
      tableMapping.ColumnMappings.Add("RoleId","RoleId");
      tableMapping.ColumnMappings.Add("RoleName","RoleName");
      tableMapping.ColumnMappings.Add("LoweredRoleName","LoweredRoleName");
      tableMapping.ColumnMappings.Add("Description","Description");
      this.m_adapter.TableMappings.Add(tableMapping);
      this.m_adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.DeleteCommand.Connection = this.Connection;
      this.m_adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[aspnet_Roles] WHERE (([ApplicationId] = @Original_ApplicationId) AND ([RoleId] = @Original_RoleId) AND ([RoleName] = @Original_RoleName) AND ([LoweredRoleName] = @Original_LoweredRoleName) AND ((@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description] = @Original_Description)))";
      this.m_adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ApplicationId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"ApplicationId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RoleId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"RoleId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RoleName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"RoleName",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LoweredRoleName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"LoweredRoleName",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Description",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"Description",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Description",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Description",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.InsertCommand.Connection = this.Connection;
      this.m_adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[aspnet_Roles] ([ApplicationId],[RoleId],[RoleName],[LoweredRoleName],[Description]) VALUES (@ApplicationId,@RoleId,@RoleName,@LoweredRoleName,@Description);
SELECT ApplicationId,RoleId,RoleName,LoweredRoleName,Description FROM aspnet_Roles WHERE (RoleId = @RoleId)";
      this.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ApplicationId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"ApplicationId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RoleId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"RoleId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RoleName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"RoleName",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LoweredRoleName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"LoweredRoleName",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Description",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.UpdateCommand.Connection = this.Connection;
      this.m_adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[aspnet_Roles] SET [ApplicationId] = @ApplicationId,[RoleId] = @RoleId,[RoleName] = @RoleName,[LoweredRoleName] = @LoweredRoleName,[Description] = @Description WHERE (([ApplicationId] = @Original_ApplicationId) AND ([RoleId] = @Original_RoleId) AND ([RoleName] = @Original_RoleName) AND ([LoweredRoleName] = @Original_LoweredRoleName) AND ((@IsNull_Description = 1 AND [Description] IS NULL) OR ([Description] = @Original_Description)));
SELECT ApplicationId,RoleId,RoleName,LoweredRoleName,Description FROM aspnet_Roles WHERE (RoleId = @RoleId)";
      this.m_adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ApplicationId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"ApplicationId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RoleId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"RoleId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RoleName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"RoleName",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LoweredRoleName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"LoweredRoleName",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Description",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Description",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ApplicationId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"ApplicationId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RoleId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"RoleId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RoleName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"RoleName",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LoweredRoleName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"LoweredRoleName",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Description",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"Description",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Description",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Description",System.Data.DataRowVersion.Original,false,null,"","",""));
   }

   private void InitConnection()
   {
      this.m_connection = new System.Data.SqlClient.SqlConnection();
      this.m_connection.ConnectionString = DataAccessUtil.GetConnectionString();
   }

   private void InitCommandCollection()
   {
      this.m_commandCollection = new System.Data.SqlClient.SqlCommand[1];
      this.m_commandCollection[0] = new System.Data.SqlClient.SqlCommand();
      this.m_commandCollection[0].Connection = this.Connection;
      this.m_commandCollection[0].CommandText = "SELECT ApplicationId,RoleId,RoleName,LoweredRoleName,Description FROM dbo.asp" +
                "net_Roles";
      this.m_commandCollection[0].CommandType = System.Data.CommandType.Text;
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill,true)]
   public virtual int Fill(AspNetDbDataSet.aspnet_RolesDataTable dataTable)
   {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      if((this.m_clearBeforeFill == true))
      {
         dataTable.Clear();
      }
      int returnValue = this.Adapter.Fill(dataTable);
      return returnValue;
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select,true)]
   public virtual AspNetDbDataSet.aspnet_RolesDataTable GetData()
   {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      AspNetDbDataSet.aspnet_RolesDataTable dataTable = new AspNetDbDataSet.aspnet_RolesDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
   }

   public virtual int Update(AspNetDbDataSet.aspnet_RolesDataTable dataTable)
   {
      return this.Adapter.Update(dataTable);
   }

   public virtual int Update(AspNetDbDataSet dataSet)
   {
      return this.Adapter.Update(dataSet,"aspnet_Roles");
   }

   public virtual int Update(System.Data.DataRow dataRow)
   {
      return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
   }

   public virtual int Update(System.Data.DataRow[] dataRows)
   {
      return this.Adapter.Update(dataRows);
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete,true)]
   public virtual int Delete(System.Guid Original_ApplicationId,System.Guid Original_RoleId,string Original_RoleName,string Original_LoweredRoleName,string Original_Description)
   {
      this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_ApplicationId));
      this.Adapter.DeleteCommand.Parameters[1].Value = ((System.Guid)(Original_RoleId));
      if((Original_RoleName == null))
      {
         throw new System.ArgumentNullException("Original_RoleName");
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_RoleName));
      }
      if((Original_LoweredRoleName == null))
      {
         throw new System.ArgumentNullException("Original_LoweredRoleName");
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_LoweredRoleName));
      }
      if((Original_Description == null))
      {
         this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(1));
         this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(0));
         this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_Description));
      }
      System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
      this.Adapter.DeleteCommand.Connection.Open();
      try
      {
         return this.Adapter.DeleteCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.DeleteCommand.Connection.Close();
         }
      }
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert,true)]
   public virtual int Insert(System.Guid ApplicationId,System.Guid RoleId,string RoleName,string LoweredRoleName,string Description)
   {
      this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(ApplicationId));
      this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(RoleId));
      if((RoleName == null))
      {
         throw new System.ArgumentNullException("RoleName");
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[2].Value = ((string)(RoleName));
      }
      if((LoweredRoleName == null))
      {
         throw new System.ArgumentNullException("LoweredRoleName");
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[3].Value = ((string)(LoweredRoleName));
      }
      if((Description == null))
      {
         this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Description));
      }
      System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
      this.Adapter.InsertCommand.Connection.Open();
      try
      {
         return this.Adapter.InsertCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.InsertCommand.Connection.Close();
         }
      }
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update,true)]
   public virtual int Update(System.Guid ApplicationId,System.Guid RoleId,string RoleName,string LoweredRoleName,string Description,System.Guid Original_ApplicationId,System.Guid Original_RoleId,string Original_RoleName,string Original_LoweredRoleName,string Original_Description)
   {
      this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(ApplicationId));
      this.Adapter.UpdateCommand.Parameters[1].Value = ((System.Guid)(RoleId));
      if((RoleName == null))
      {
         throw new System.ArgumentNullException("RoleName");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(RoleName));
      }
      if((LoweredRoleName == null))
      {
         throw new System.ArgumentNullException("LoweredRoleName");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(LoweredRoleName));
      }
      if((Description == null))
      {
         this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Description));
      }
      this.Adapter.UpdateCommand.Parameters[5].Value = ((System.Guid)(Original_ApplicationId));
      this.Adapter.UpdateCommand.Parameters[6].Value = ((System.Guid)(Original_RoleId));
      if((Original_RoleName == null))
      {
         throw new System.ArgumentNullException("Original_RoleName");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Original_RoleName));
      }
      if((Original_LoweredRoleName == null))
      {
         throw new System.ArgumentNullException("Original_LoweredRoleName");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Original_LoweredRoleName));
      }
      if((Original_Description == null))
      {
         this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(1));
         this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(0));
         this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_Description));
      }
      System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
      this.Adapter.UpdateCommand.Connection.Open();
      try
      {
         return this.Adapter.UpdateCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.UpdateCommand.Connection.Close();
         }
      }
   }
}

[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.ComponentModel.ToolboxItem(true)]
[System.ComponentModel.DataObjectAttribute(true)]
[System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner,Microsoft.VSDesigner" +
        ",Version=8.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a")]
[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
public partial class aspnet_SchemaVersionsTableAdapter : System.ComponentModel.Component
{

   private System.Data.SqlClient.SqlDataAdapter m_adapter;

   private System.Data.SqlClient.SqlConnection m_connection;

   private System.Data.SqlClient.SqlCommand[] m_commandCollection;

   private bool m_clearBeforeFill;

   public aspnet_SchemaVersionsTableAdapter()
   {
      this.m_clearBeforeFill = true;
   }

   private System.Data.SqlClient.SqlDataAdapter Adapter
   {
      get
      {
         if((this.m_adapter == null))
         {
            this.InitAdapter();
         }
         return this.m_adapter;
      }
   }

   internal System.Data.SqlClient.SqlConnection Connection
   {
      get
      {
         if((this.m_connection == null))
         {
            this.InitConnection();
         }
         return this.m_connection;
      }
      set
      {
         this.m_connection = value;
         if((this.Adapter.InsertCommand != null))
         {
            this.Adapter.InsertCommand.Connection = value;
         }
         if((this.Adapter.DeleteCommand != null))
         {
            this.Adapter.DeleteCommand.Connection = value;
         }
         if((this.Adapter.UpdateCommand != null))
         {
            this.Adapter.UpdateCommand.Connection = value;
         }
         for(int i = 0;(i < this.CommandCollection.Length);i = (i + 1))
         {
            if((this.CommandCollection[i] != null))
            {
               ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
            }
         }
      }
   }

   protected System.Data.SqlClient.SqlCommand[] CommandCollection
   {
      get
      {
         if((this.m_commandCollection == null))
         {
            this.InitCommandCollection();
         }
         return this.m_commandCollection;
      }
   }

   public bool ClearBeforeFill
   {
      get
      {
         return this.m_clearBeforeFill;
      }
      set
      {
         this.m_clearBeforeFill = value;
      }
   }

   private void InitAdapter()
   {
      this.m_adapter = new System.Data.SqlClient.SqlDataAdapter();
      System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
      tableMapping.SourceTable = "Table";
      tableMapping.DataSetTable = "aspnet_SchemaVersions";
      tableMapping.ColumnMappings.Add("Feature","Feature");
      tableMapping.ColumnMappings.Add("CompatibleSchemaVersion","CompatibleSchemaVersion");
      tableMapping.ColumnMappings.Add("IsCurrentVersion","IsCurrentVersion");
      this.m_adapter.TableMappings.Add(tableMapping);
      this.m_adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.DeleteCommand.Connection = this.Connection;
      this.m_adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[aspnet_SchemaVersions] WHERE (([Feature] = @Original_Feature) " +
                "AND ([CompatibleSchemaVersion] = @Original_CompatibleSchemaVersion) AND ([IsCurr" +
                "entVersion] = @Original_IsCurrentVersion))";
      this.m_adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Feature",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Feature",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CompatibleSchemaVersion",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"CompatibleSchemaVersion",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsCurrentVersion",System.Data.SqlDbType.Bit,0,System.Data.ParameterDirection.Input,0,0,"IsCurrentVersion",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.InsertCommand.Connection = this.Connection;
      this.m_adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[aspnet_SchemaVersions] ([Feature],[CompatibleSchemaVersion],[IsCurrentVersion]) VALUES (@Feature,@CompatibleSchemaVersion,@IsCurrentVersion);
SELECT Feature,CompatibleSchemaVersion,IsCurrentVersion FROM aspnet_SchemaVersions WHERE (CompatibleSchemaVersion = @CompatibleSchemaVersion) AND (Feature = @Feature)";
      this.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Feature",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Feature",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompatibleSchemaVersion",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"CompatibleSchemaVersion",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsCurrentVersion",System.Data.SqlDbType.Bit,0,System.Data.ParameterDirection.Input,0,0,"IsCurrentVersion",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.UpdateCommand.Connection = this.Connection;
      this.m_adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[aspnet_SchemaVersions] SET [Feature] = @Feature,[CompatibleSchemaVersion] = @CompatibleSchemaVersion,[IsCurrentVersion] = @IsCurrentVersion WHERE (([Feature] = @Original_Feature) AND ([CompatibleSchemaVersion] = @Original_CompatibleSchemaVersion) AND ([IsCurrentVersion] = @Original_IsCurrentVersion));
SELECT Feature,CompatibleSchemaVersion,IsCurrentVersion FROM aspnet_SchemaVersions WHERE (CompatibleSchemaVersion = @CompatibleSchemaVersion) AND (Feature = @Feature)";
      this.m_adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Feature",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Feature",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CompatibleSchemaVersion",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"CompatibleSchemaVersion",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsCurrentVersion",System.Data.SqlDbType.Bit,0,System.Data.ParameterDirection.Input,0,0,"IsCurrentVersion",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Feature",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Feature",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_CompatibleSchemaVersion",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"CompatibleSchemaVersion",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsCurrentVersion",System.Data.SqlDbType.Bit,0,System.Data.ParameterDirection.Input,0,0,"IsCurrentVersion",System.Data.DataRowVersion.Original,false,null,"","",""));
   }

   private void InitConnection()
   {
      this.m_connection = new System.Data.SqlClient.SqlConnection();
      this.m_connection.ConnectionString = DataAccessUtil.GetConnectionString();
   }


   private void InitCommandCollection()
   {
      this.m_commandCollection = new System.Data.SqlClient.SqlCommand[1];
      this.m_commandCollection[0] = new System.Data.SqlClient.SqlCommand();
      this.m_commandCollection[0].Connection = this.Connection;
      this.m_commandCollection[0].CommandText = "SELECT Feature,CompatibleSchemaVersion,IsCurrentVersion FROM dbo.aspnet_SchemaV" +
                "ersions";
      this.m_commandCollection[0].CommandType = System.Data.CommandType.Text;
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill,true)]
   public virtual int Fill(AspNetDbDataSet.aspnet_SchemaVersionsDataTable dataTable)
   {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      if((this.m_clearBeforeFill == true))
      {
         dataTable.Clear();
      }
      int returnValue = this.Adapter.Fill(dataTable);
      return returnValue;
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select,true)]
   public virtual AspNetDbDataSet.aspnet_SchemaVersionsDataTable GetData()
   {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      AspNetDbDataSet.aspnet_SchemaVersionsDataTable dataTable = new AspNetDbDataSet.aspnet_SchemaVersionsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
   }

   public virtual int Update(AspNetDbDataSet.aspnet_SchemaVersionsDataTable dataTable)
   {
      return this.Adapter.Update(dataTable);
   }

   public virtual int Update(AspNetDbDataSet dataSet)
   {
      return this.Adapter.Update(dataSet,"aspnet_SchemaVersions");
   }

   public virtual int Update(System.Data.DataRow dataRow)
   {
      return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
   }

   public virtual int Update(System.Data.DataRow[] dataRows)
   {
      return this.Adapter.Update(dataRows);
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete,true)]
   public virtual int Delete(string Original_Feature,string Original_CompatibleSchemaVersion,bool Original_IsCurrentVersion)
   {
      if((Original_Feature == null))
      {
         throw new System.ArgumentNullException("Original_Feature");
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_Feature));
      }
      if((Original_CompatibleSchemaVersion == null))
      {
         throw new System.ArgumentNullException("Original_CompatibleSchemaVersion");
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_CompatibleSchemaVersion));
      }
      this.Adapter.DeleteCommand.Parameters[2].Value = ((bool)(Original_IsCurrentVersion));
      System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
      this.Adapter.DeleteCommand.Connection.Open();
      try
      {
         return this.Adapter.DeleteCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.DeleteCommand.Connection.Close();
         }
      }
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert,true)]
   public virtual int Insert(string Feature,string CompatibleSchemaVersion,bool IsCurrentVersion)
   {
      if((Feature == null))
      {
         throw new System.ArgumentNullException("Feature");
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[0].Value = ((string)(Feature));
      }
      if((CompatibleSchemaVersion == null))
      {
         throw new System.ArgumentNullException("CompatibleSchemaVersion");
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[1].Value = ((string)(CompatibleSchemaVersion));
      }
      this.Adapter.InsertCommand.Parameters[2].Value = ((bool)(IsCurrentVersion));
      System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
      this.Adapter.InsertCommand.Connection.Open();
      try
      {
         return this.Adapter.InsertCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.InsertCommand.Connection.Close();
         }
      }
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update,true)]
   public virtual int Update(string Feature,string CompatibleSchemaVersion,bool IsCurrentVersion,string Original_Feature,string Original_CompatibleSchemaVersion,bool Original_IsCurrentVersion)
   {
      if((Feature == null))
      {
         throw new System.ArgumentNullException("Feature");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(Feature));
      }
      if((CompatibleSchemaVersion == null))
      {
         throw new System.ArgumentNullException("CompatibleSchemaVersion");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(CompatibleSchemaVersion));
      }
      this.Adapter.UpdateCommand.Parameters[2].Value = ((bool)(IsCurrentVersion));
      if((Original_Feature == null))
      {
         throw new System.ArgumentNullException("Original_Feature");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Original_Feature));
      }
      if((Original_CompatibleSchemaVersion == null))
      {
         throw new System.ArgumentNullException("Original_CompatibleSchemaVersion");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Original_CompatibleSchemaVersion));
      }
      this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(Original_IsCurrentVersion));
      System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
      this.Adapter.UpdateCommand.Connection.Open();
      try
      {
         return this.Adapter.UpdateCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.UpdateCommand.Connection.Close();
         }
      }
   }
}

[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.ComponentModel.ToolboxItem(true)]
[System.ComponentModel.DataObjectAttribute(true)]
[System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner,Microsoft.VSDesigner" +
        ",Version=8.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a")]
[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
public partial class aspnet_UsersTableAdapter : System.ComponentModel.Component
{

   private System.Data.SqlClient.SqlDataAdapter m_adapter;

   private System.Data.SqlClient.SqlConnection m_connection;

   private System.Data.SqlClient.SqlCommand[] m_commandCollection;

   private bool m_clearBeforeFill;

   public aspnet_UsersTableAdapter()
   {
      this.m_clearBeforeFill = true;
   }

   private System.Data.SqlClient.SqlDataAdapter Adapter
   {
      get
      {
         if((this.m_adapter == null))
         {
            this.InitAdapter();
         }
         return this.m_adapter;
      }
   }

   internal System.Data.SqlClient.SqlConnection Connection
   {
      get
      {
         if((this.m_connection == null))
         {
            this.InitConnection();
         }
         return this.m_connection;
      }
      set
      {
         this.m_connection = value;
         if((this.Adapter.InsertCommand != null))
         {
            this.Adapter.InsertCommand.Connection = value;
         }
         if((this.Adapter.DeleteCommand != null))
         {
            this.Adapter.DeleteCommand.Connection = value;
         }
         if((this.Adapter.UpdateCommand != null))
         {
            this.Adapter.UpdateCommand.Connection = value;
         }
         for(int i = 0;(i < this.CommandCollection.Length);i = (i + 1))
         {
            if((this.CommandCollection[i] != null))
            {
               ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
            }
         }
      }
   }

   protected System.Data.SqlClient.SqlCommand[] CommandCollection
   {
      get
      {
         if((this.m_commandCollection == null))
         {
            this.InitCommandCollection();
         }
         return this.m_commandCollection;
      }
   }

   public bool ClearBeforeFill
   {
      get
      {
         return this.m_clearBeforeFill;
      }
      set
      {
         this.m_clearBeforeFill = value;
      }
   }

   private void InitAdapter()
   {
      this.m_adapter = new System.Data.SqlClient.SqlDataAdapter();
      System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
      tableMapping.SourceTable = "Table";
      tableMapping.DataSetTable = "aspnet_Users";
      tableMapping.ColumnMappings.Add("ApplicationId","ApplicationId");
      tableMapping.ColumnMappings.Add("UserId","UserId");
      tableMapping.ColumnMappings.Add("UserName","UserName");
      tableMapping.ColumnMappings.Add("LoweredUserName","LoweredUserName");
      tableMapping.ColumnMappings.Add("MobileAlias","MobileAlias");
      tableMapping.ColumnMappings.Add("IsAnonymous","IsAnonymous");
      tableMapping.ColumnMappings.Add("LastActivityDate","LastActivityDate");
      this.m_adapter.TableMappings.Add(tableMapping);
      this.m_adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.DeleteCommand.Connection = this.Connection;
      this.m_adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[aspnet_Users] WHERE (([ApplicationId] = @Original_ApplicationId) AND ([UserId] = @Original_UserId) AND ([UserName] = @Original_UserName) AND ([LoweredUserName] = @Original_LoweredUserName) AND ((@IsNull_MobileAlias = 1 AND [MobileAlias] IS NULL) OR ([MobileAlias] = @Original_MobileAlias)) AND ([IsAnonymous] = @Original_IsAnonymous) AND ([LastActivityDate] = @Original_LastActivityDate))";
      this.m_adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ApplicationId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"ApplicationId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"UserId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"UserName",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LoweredUserName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"LoweredUserName",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MobileAlias",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"MobileAlias",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MobileAlias",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"MobileAlias",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsAnonymous",System.Data.SqlDbType.Bit,0,System.Data.ParameterDirection.Input,0,0,"IsAnonymous",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LastActivityDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastActivityDate",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.InsertCommand.Connection = this.Connection;
      this.m_adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[aspnet_Users] ([ApplicationId],[UserId],[UserName],[LoweredUserName],[MobileAlias],[IsAnonymous],[LastActivityDate]) VALUES (@ApplicationId,@UserId,@UserName,@LoweredUserName,@MobileAlias,@IsAnonymous,@LastActivityDate);
SELECT ApplicationId,UserId,UserName,LoweredUserName,MobileAlias,IsAnonymous,LastActivityDate FROM aspnet_Users WHERE (UserId = @UserId)";
      this.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ApplicationId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"ApplicationId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"UserId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"UserName",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LoweredUserName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"LoweredUserName",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MobileAlias",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"MobileAlias",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsAnonymous",System.Data.SqlDbType.Bit,0,System.Data.ParameterDirection.Input,0,0,"IsAnonymous",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastActivityDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastActivityDate",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.UpdateCommand.Connection = this.Connection;
      this.m_adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[aspnet_Users] SET [ApplicationId] = @ApplicationId,[UserId] = @UserId,[UserName] = @UserName,[LoweredUserName] = @LoweredUserName,[MobileAlias] = @MobileAlias,[IsAnonymous] = @IsAnonymous,[LastActivityDate] = @LastActivityDate WHERE (([ApplicationId] = @Original_ApplicationId) AND ([UserId] = @Original_UserId) AND ([UserName] = @Original_UserName) AND ([LoweredUserName] = @Original_LoweredUserName) AND ((@IsNull_MobileAlias = 1 AND [MobileAlias] IS NULL) OR ([MobileAlias] = @Original_MobileAlias)) AND ([IsAnonymous] = @Original_IsAnonymous) AND ([LastActivityDate] = @Original_LastActivityDate));
SELECT ApplicationId,UserId,UserName,LoweredUserName,MobileAlias,IsAnonymous,LastActivityDate FROM aspnet_Users WHERE (UserId = @UserId)";
      this.m_adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ApplicationId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"ApplicationId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"UserId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"UserName",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LoweredUserName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"LoweredUserName",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MobileAlias",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"MobileAlias",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsAnonymous",System.Data.SqlDbType.Bit,0,System.Data.ParameterDirection.Input,0,0,"IsAnonymous",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@LastActivityDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastActivityDate",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ApplicationId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"ApplicationId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"UserId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"UserName",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LoweredUserName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"LoweredUserName",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_MobileAlias",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"MobileAlias",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MobileAlias",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"MobileAlias",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_IsAnonymous",System.Data.SqlDbType.Bit,0,System.Data.ParameterDirection.Input,0,0,"IsAnonymous",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_LastActivityDate",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"LastActivityDate",System.Data.DataRowVersion.Original,false,null,"","",""));
   }

   private void InitConnection()
   {
      this.m_connection = new System.Data.SqlClient.SqlConnection();
      this.m_connection.ConnectionString = DataAccessUtil.GetConnectionString();
   }

   private void InitCommandCollection()
   {
      this.m_commandCollection = new System.Data.SqlClient.SqlCommand[1];
      this.m_commandCollection[0] = new System.Data.SqlClient.SqlCommand();
      this.m_commandCollection[0].Connection = this.Connection;
      this.m_commandCollection[0].CommandText = "SELECT ApplicationId,UserId,UserName,LoweredUserName,MobileAlias,IsAnonymous" +
                ",LastActivityDate FROM dbo.aspnet_Users";
      this.m_commandCollection[0].CommandType = System.Data.CommandType.Text;
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill,true)]
   public virtual int Fill(AspNetDbDataSet.aspnet_UsersDataTable dataTable)
   {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      if((this.m_clearBeforeFill == true))
      {
         dataTable.Clear();
      }
      int returnValue = this.Adapter.Fill(dataTable);
      return returnValue;
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select,true)]
   public virtual AspNetDbDataSet.aspnet_UsersDataTable GetData()
   {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      AspNetDbDataSet.aspnet_UsersDataTable dataTable = new AspNetDbDataSet.aspnet_UsersDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
   }

   public virtual int Update(AspNetDbDataSet.aspnet_UsersDataTable dataTable)
   {
      return this.Adapter.Update(dataTable);
   }

   public virtual int Update(AspNetDbDataSet dataSet)
   {
      return this.Adapter.Update(dataSet,"aspnet_Users");
   }

   public virtual int Update(System.Data.DataRow dataRow)
   {
      return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
   }

   public virtual int Update(System.Data.DataRow[] dataRows)
   {
      return this.Adapter.Update(dataRows);
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete,true)]
   public virtual int Delete(System.Guid Original_ApplicationId,System.Guid Original_UserId,string Original_UserName,string Original_LoweredUserName,string Original_MobileAlias,bool Original_IsAnonymous,System.DateTime Original_LastActivityDate)
   {
      this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_ApplicationId));
      this.Adapter.DeleteCommand.Parameters[1].Value = ((System.Guid)(Original_UserId));
      if((Original_UserName == null))
      {
         throw new System.ArgumentNullException("Original_UserName");
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_UserName));
      }
      if((Original_LoweredUserName == null))
      {
         throw new System.ArgumentNullException("Original_LoweredUserName");
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_LoweredUserName));
      }
      if((Original_MobileAlias == null))
      {
         this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(1));
         this.Adapter.DeleteCommand.Parameters[5].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[4].Value = ((int)(0));
         this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_MobileAlias));
      }
      this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_IsAnonymous));
      this.Adapter.DeleteCommand.Parameters[7].Value = ((System.DateTime)(Original_LastActivityDate));
      System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
      this.Adapter.DeleteCommand.Connection.Open();
      try
      {
         return this.Adapter.DeleteCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.DeleteCommand.Connection.Close();
         }
      }
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert,true)]
   public virtual int Insert(System.Guid ApplicationId,System.Guid UserId,string UserName,string LoweredUserName,string MobileAlias,bool IsAnonymous,System.DateTime LastActivityDate)
   {
      this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(ApplicationId));
      this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(UserId));
      if((UserName == null))
      {
         throw new System.ArgumentNullException("UserName");
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[2].Value = ((string)(UserName));
      }
      if((LoweredUserName == null))
      {
         throw new System.ArgumentNullException("LoweredUserName");
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[3].Value = ((string)(LoweredUserName));
      }
      if((MobileAlias == null))
      {
         this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[4].Value = ((string)(MobileAlias));
      }
      this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(IsAnonymous));
      this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(LastActivityDate));
      System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
      this.Adapter.InsertCommand.Connection.Open();
      try
      {
         return this.Adapter.InsertCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.InsertCommand.Connection.Close();
         }
      }
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update,true)]
   public virtual int Update(System.Guid ApplicationId,System.Guid UserId,string UserName,string LoweredUserName,string MobileAlias,bool IsAnonymous,System.DateTime LastActivityDate,System.Guid Original_ApplicationId,System.Guid Original_UserId,string Original_UserName,string Original_LoweredUserName,string Original_MobileAlias,bool Original_IsAnonymous,System.DateTime Original_LastActivityDate)
   {
      this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(ApplicationId));
      this.Adapter.UpdateCommand.Parameters[1].Value = ((System.Guid)(UserId));
      if((UserName == null))
      {
         throw new System.ArgumentNullException("UserName");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(UserName));
      }
      if((LoweredUserName == null))
      {
         throw new System.ArgumentNullException("LoweredUserName");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(LoweredUserName));
      }
      if((MobileAlias == null))
      {
         this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(MobileAlias));
      }
      this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(IsAnonymous));
      this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(LastActivityDate));
      this.Adapter.UpdateCommand.Parameters[7].Value = ((System.Guid)(Original_ApplicationId));
      this.Adapter.UpdateCommand.Parameters[8].Value = ((System.Guid)(Original_UserId));
      if((Original_UserName == null))
      {
         throw new System.ArgumentNullException("Original_UserName");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_UserName));
      }
      if((Original_LoweredUserName == null))
      {
         throw new System.ArgumentNullException("Original_LoweredUserName");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(Original_LoweredUserName));
      }
      if((Original_MobileAlias == null))
      {
         this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(1));
         this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(0));
         this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(Original_MobileAlias));
      }
      this.Adapter.UpdateCommand.Parameters[13].Value = ((bool)(Original_IsAnonymous));
      this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(Original_LastActivityDate));
      System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
      this.Adapter.UpdateCommand.Connection.Open();
      try
      {
         return this.Adapter.UpdateCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.UpdateCommand.Connection.Close();
         }
      }
   }
}

[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.ComponentModel.ToolboxItem(true)]
[System.ComponentModel.DataObjectAttribute(true)]
[System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner,Microsoft.VSDesigner" +
        ",Version=8.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a")]
[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
public partial class aspnet_UsersInRolesTableAdapter : System.ComponentModel.Component
{

   private System.Data.SqlClient.SqlDataAdapter m_adapter;

   private System.Data.SqlClient.SqlConnection m_connection;

   private System.Data.SqlClient.SqlCommand[] m_commandCollection;

   private bool m_clearBeforeFill;

   public aspnet_UsersInRolesTableAdapter()
   {
      this.m_clearBeforeFill = true;
   }

   private System.Data.SqlClient.SqlDataAdapter Adapter
   {
      get
      {
         if((this.m_adapter == null))
         {
            this.InitAdapter();
         }
         return this.m_adapter;
      }
   }

   internal System.Data.SqlClient.SqlConnection Connection
   {
      get
      {
         if((this.m_connection == null))
         {
            this.InitConnection();
         }
         return this.m_connection;
      }
      set
      {
         this.m_connection = value;
         if((this.Adapter.InsertCommand != null))
         {
            this.Adapter.InsertCommand.Connection = value;
         }
         if((this.Adapter.DeleteCommand != null))
         {
            this.Adapter.DeleteCommand.Connection = value;
         }
         if((this.Adapter.UpdateCommand != null))
         {
            this.Adapter.UpdateCommand.Connection = value;
         }
         for(int i = 0;(i < this.CommandCollection.Length);i = (i + 1))
         {
            if((this.CommandCollection[i] != null))
            {
               ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
            }
         }
      }
   }

   protected System.Data.SqlClient.SqlCommand[] CommandCollection
   {
      get
      {
         if((this.m_commandCollection == null))
         {
            this.InitCommandCollection();
         }
         return this.m_commandCollection;
      }
   }

   public bool ClearBeforeFill
   {
      get
      {
         return this.m_clearBeforeFill;
      }
      set
      {
         this.m_clearBeforeFill = value;
      }
   }

   private void InitAdapter()
   {
      this.m_adapter = new System.Data.SqlClient.SqlDataAdapter();
      System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
      tableMapping.SourceTable = "Table";
      tableMapping.DataSetTable = "aspnet_UsersInRoles";
      tableMapping.ColumnMappings.Add("UserId","UserId");
      tableMapping.ColumnMappings.Add("RoleId","RoleId");
      this.m_adapter.TableMappings.Add(tableMapping);
      this.m_adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.DeleteCommand.Connection = this.Connection;
      this.m_adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[aspnet_UsersInRoles] WHERE (([UserId] = @Original_UserId) AND " +
                "([RoleId] = @Original_RoleId))";
      this.m_adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"UserId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RoleId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"RoleId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.InsertCommand.Connection = this.Connection;
      this.m_adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[aspnet_UsersInRoles] ([UserId],[RoleId]) VALUES (@UserId,@Ro" +
                "leId);\r\nSELECT UserId,RoleId FROM aspnet_UsersInRoles WHERE (RoleId = @RoleId) " +
                "AND (UserId = @UserId)";
      this.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"UserId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RoleId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"RoleId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.UpdateCommand.Connection = this.Connection;
      this.m_adapter.UpdateCommand.CommandText = "UPDATE [dbo].[aspnet_UsersInRoles] SET [UserId] = @UserId,[RoleId] = @RoleId WHE" +
                "RE (([UserId] = @Original_UserId) AND ([RoleId] = @Original_RoleId));\r\nSELECT Us" +
                "erId,RoleId FROM aspnet_UsersInRoles WHERE (RoleId = @RoleId) AND (UserId = @Us" +
                "erId)";
      this.m_adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UserId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"UserId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RoleId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"RoleId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_UserId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"UserId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RoleId",System.Data.SqlDbType.UniqueIdentifier,0,System.Data.ParameterDirection.Input,0,0,"RoleId",System.Data.DataRowVersion.Original,false,null,"","",""));
   }

   private void InitConnection()
   {
      this.m_connection = new System.Data.SqlClient.SqlConnection();
      this.m_connection.ConnectionString = DataAccessUtil.GetConnectionString();
   }


   private void InitCommandCollection()
   {
      this.m_commandCollection = new System.Data.SqlClient.SqlCommand[1];
      this.m_commandCollection[0] = new System.Data.SqlClient.SqlCommand();
      this.m_commandCollection[0].Connection = this.Connection;
      this.m_commandCollection[0].CommandText = "SELECT UserId,RoleId FROM dbo.aspnet_UsersInRoles";
      this.m_commandCollection[0].CommandType = System.Data.CommandType.Text;
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill,true)]
   public virtual int Fill(AspNetDbDataSet.aspnet_UsersInRolesDataTable dataTable)
   {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      if((this.m_clearBeforeFill == true))
      {
         dataTable.Clear();
      }
      int returnValue = this.Adapter.Fill(dataTable);
      return returnValue;
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select,true)]
   public virtual AspNetDbDataSet.aspnet_UsersInRolesDataTable GetData()
   {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      AspNetDbDataSet.aspnet_UsersInRolesDataTable dataTable = new AspNetDbDataSet.aspnet_UsersInRolesDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
   }

   public virtual int Update(AspNetDbDataSet.aspnet_UsersInRolesDataTable dataTable)
   {
      return this.Adapter.Update(dataTable);
   }

   public virtual int Update(AspNetDbDataSet dataSet)
   {
      return this.Adapter.Update(dataSet,"aspnet_UsersInRoles");
   }

   public virtual int Update(System.Data.DataRow dataRow)
   {
      return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
   }

   public virtual int Update(System.Data.DataRow[] dataRows)
   {
      return this.Adapter.Update(dataRows);
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete,true)]
   public virtual int Delete(System.Guid Original_UserId,System.Guid Original_RoleId)
   {
      this.Adapter.DeleteCommand.Parameters[0].Value = ((System.Guid)(Original_UserId));
      this.Adapter.DeleteCommand.Parameters[1].Value = ((System.Guid)(Original_RoleId));
      System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
      this.Adapter.DeleteCommand.Connection.Open();
      try
      {
         return this.Adapter.DeleteCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.DeleteCommand.Connection.Close();
         }
      }
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert,true)]
   public virtual int Insert(System.Guid UserId,System.Guid RoleId)
   {
      this.Adapter.InsertCommand.Parameters[0].Value = ((System.Guid)(UserId));
      this.Adapter.InsertCommand.Parameters[1].Value = ((System.Guid)(RoleId));
      System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
      this.Adapter.InsertCommand.Connection.Open();
      try
      {
         return this.Adapter.InsertCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.InsertCommand.Connection.Close();
         }
      }
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update,true)]
   public virtual int Update(System.Guid UserId,System.Guid RoleId,System.Guid Original_UserId,System.Guid Original_RoleId)
   {
      this.Adapter.UpdateCommand.Parameters[0].Value = ((System.Guid)(UserId));
      this.Adapter.UpdateCommand.Parameters[1].Value = ((System.Guid)(RoleId));
      this.Adapter.UpdateCommand.Parameters[2].Value = ((System.Guid)(Original_UserId));
      this.Adapter.UpdateCommand.Parameters[3].Value = ((System.Guid)(Original_RoleId));
      System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
      this.Adapter.UpdateCommand.Connection.Open();
      try
      {
         return this.Adapter.UpdateCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.UpdateCommand.Connection.Close();
         }
      }
   }
}

[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.ComponentModel.ToolboxItem(true)]
[System.ComponentModel.DataObjectAttribute(true)]
[System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner,Microsoft.VSDesigner" +
        ",Version=8.0.0.0,Culture=neutral,PublicKeyToken=b03f5f7f11d50a3a")]
[System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
public partial class aspnet_WebEvent_EventsTableAdapter : System.ComponentModel.Component
{

   private System.Data.SqlClient.SqlDataAdapter m_adapter;

   private System.Data.SqlClient.SqlConnection m_connection;

   private System.Data.SqlClient.SqlCommand[] m_commandCollection;

   private bool m_clearBeforeFill;

   public aspnet_WebEvent_EventsTableAdapter()
   {
      this.m_clearBeforeFill = true;
   }

   private System.Data.SqlClient.SqlDataAdapter Adapter
   {
      get
      {
         if((this.m_adapter == null))
         {
            this.InitAdapter();
         }
         return this.m_adapter;
      }
   }

   internal System.Data.SqlClient.SqlConnection Connection
   {
      get
      {
         if((this.m_connection == null))
         {
            this.InitConnection();
         }
         return this.m_connection;
      }
      set
      {
         this.m_connection = value;
         if((this.Adapter.InsertCommand != null))
         {
            this.Adapter.InsertCommand.Connection = value;
         }
         if((this.Adapter.DeleteCommand != null))
         {
            this.Adapter.DeleteCommand.Connection = value;
         }
         if((this.Adapter.UpdateCommand != null))
         {
            this.Adapter.UpdateCommand.Connection = value;
         }
         for(int i = 0;(i < this.CommandCollection.Length);i = (i + 1))
         {
            if((this.CommandCollection[i] != null))
            {
               ((System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
            }
         }
      }
   }

   protected System.Data.SqlClient.SqlCommand[] CommandCollection
   {
      get
      {
         if((this.m_commandCollection == null))
         {
            this.InitCommandCollection();
         }
         return this.m_commandCollection;
      }
   }

   public bool ClearBeforeFill
   {
      get
      {
         return this.m_clearBeforeFill;
      }
      set
      {
         this.m_clearBeforeFill = value;
      }
   }

   private void InitAdapter()
   {
      this.m_adapter = new System.Data.SqlClient.SqlDataAdapter();
      System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
      tableMapping.SourceTable = "Table";
      tableMapping.DataSetTable = "aspnet_WebEvent_Events";
      tableMapping.ColumnMappings.Add("EventId","EventId");
      tableMapping.ColumnMappings.Add("EventTimeUtc","EventTimeUtc");
      tableMapping.ColumnMappings.Add("EventTime","EventTime");
      tableMapping.ColumnMappings.Add("EventType","EventType");
      tableMapping.ColumnMappings.Add("EventSequence","EventSequence");
      tableMapping.ColumnMappings.Add("EventOccurrence","EventOccurrence");
      tableMapping.ColumnMappings.Add("EventCode","EventCode");
      tableMapping.ColumnMappings.Add("EventDetailCode","EventDetailCode");
      tableMapping.ColumnMappings.Add("Message","Message");
      tableMapping.ColumnMappings.Add("ApplicationPath","ApplicationPath");
      tableMapping.ColumnMappings.Add("ApplicationVirtualPath","ApplicationVirtualPath");
      tableMapping.ColumnMappings.Add("MachineName","MachineName");
      tableMapping.ColumnMappings.Add("RequestUrl","RequestUrl");
      tableMapping.ColumnMappings.Add("ExceptionType","ExceptionType");
      tableMapping.ColumnMappings.Add("Details","Details");
      this.m_adapter.TableMappings.Add(tableMapping);
      this.m_adapter.DeleteCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.DeleteCommand.Connection = this.Connection;
      this.m_adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[aspnet_WebEvent_Events] WHERE (([EventId] = @Original_EventId) AND ([EventTimeUtc] = @Original_EventTimeUtc) AND ([EventTime] = @Original_EventTime) AND ([EventType] = @Original_EventType) AND ([EventSequence] = @Original_EventSequence) AND ([EventOccurrence] = @Original_EventOccurrence) AND ([EventCode] = @Original_EventCode) AND ([EventDetailCode] = @Original_EventDetailCode) AND ((@IsNull_Message = 1 AND [Message] IS NULL) OR ([Message] = @Original_Message)) AND ((@IsNull_ApplicationPath = 1 AND [ApplicationPath] IS NULL) OR ([ApplicationPath] = @Original_ApplicationPath)) AND ((@IsNull_ApplicationVirtualPath = 1 AND [ApplicationVirtualPath] IS NULL) OR ([ApplicationVirtualPath] = @Original_ApplicationVirtualPath)) AND ([MachineName] = @Original_MachineName) AND ((@IsNull_RequestUrl = 1 AND [RequestUrl] IS NULL) OR ([RequestUrl] = @Original_RequestUrl)) AND ((@IsNull_ExceptionType = 1 AND [ExceptionType] IS NULL) OR ([ExceptionType] = @Original_ExceptionType)))";
      this.m_adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventId",System.Data.SqlDbType.Char,0,System.Data.ParameterDirection.Input,0,0,"EventId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventTimeUtc",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"EventTimeUtc",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventTime",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"EventTime",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventType",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"EventType",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventSequence",System.Data.SqlDbType.Decimal,0,System.Data.ParameterDirection.Input,19,0,"EventSequence",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventOccurrence",System.Data.SqlDbType.Decimal,0,System.Data.ParameterDirection.Input,19,0,"EventOccurrence",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventCode",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"EventCode",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventDetailCode",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"EventDetailCode",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Message",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"Message",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Message",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Message",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ApplicationPath",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"ApplicationPath",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ApplicationPath",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"ApplicationPath",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ApplicationVirtualPath",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"ApplicationVirtualPath",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ApplicationVirtualPath",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"ApplicationVirtualPath",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MachineName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"MachineName",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RequestUrl",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"RequestUrl",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RequestUrl",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"RequestUrl",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ExceptionType",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"ExceptionType",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ExceptionType",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"ExceptionType",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.InsertCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.InsertCommand.Connection = this.Connection;
      this.m_adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[aspnet_WebEvent_Events] ([EventId],[EventTimeUtc],[EventTime],[EventType],[EventSequence],[EventOccurrence],[EventCode],[EventDetailCode],[Message],[ApplicationPath],[ApplicationVirtualPath],[MachineName],[RequestUrl],[ExceptionType],[Details]) VALUES (@EventId,@EventTimeUtc,@EventTime,@EventType,@EventSequence,@EventOccurrence,@EventCode,@EventDetailCode,@Message,@ApplicationPath,@ApplicationVirtualPath,@MachineName,@RequestUrl,@ExceptionType,@Details);
SELECT EventId,EventTimeUtc,EventTime,EventType,EventSequence,EventOccurrence,EventCode,EventDetailCode,Message,ApplicationPath,ApplicationVirtualPath,MachineName,RequestUrl,ExceptionType,Details FROM aspnet_WebEvent_Events WHERE (EventId = @EventId)";
      this.m_adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventId",System.Data.SqlDbType.Char,0,System.Data.ParameterDirection.Input,0,0,"EventId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventTimeUtc",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"EventTimeUtc",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventTime",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"EventTime",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventType",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"EventType",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventSequence",System.Data.SqlDbType.Decimal,0,System.Data.ParameterDirection.Input,19,0,"EventSequence",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventOccurrence",System.Data.SqlDbType.Decimal,0,System.Data.ParameterDirection.Input,19,0,"EventOccurrence",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventCode",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"EventCode",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventDetailCode",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"EventDetailCode",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Message",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Message",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ApplicationPath",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"ApplicationPath",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ApplicationVirtualPath",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"ApplicationVirtualPath",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MachineName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"MachineName",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RequestUrl",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"RequestUrl",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExceptionType",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"ExceptionType",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Details",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Details",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand = new System.Data.SqlClient.SqlCommand();
      this.m_adapter.UpdateCommand.Connection = this.Connection;
      this.m_adapter.UpdateCommand.CommandText = "UPDATE [dbo].[aspnet_WebEvent_Events] SET [EventId] = @EventId,[EventTimeUtc] = " +
                "@EventTimeUtc,[EventTime] = @EventTime,[EventType] = @EventType,[EventSequenc" +
                "e] = @EventSequence,[EventOccurrence] = @EventOccurrence,[EventCode] = @EventC" +
                "ode,[EventDetailCode] = @EventDetailCode,[Message] = @Message,[ApplicationPat" +
                "h] = @ApplicationPath,[ApplicationVirtualPath] = @ApplicationVirtualPath,[Mach" +
                "ineName] = @MachineName,[RequestUrl] = @RequestUrl,[ExceptionType] = @Exceptio" +
                "nType,[Details] = @Details WHERE (([EventId] = @Original_EventId) AND ([EventTi" +
                "meUtc] = @Original_EventTimeUtc) AND ([EventTime] = @Original_EventTime) AND ([E" +
                "ventType] = @Original_EventType) AND ([EventSequence] = @Original_EventSequence)" +
                " AND ([EventOccurrence] = @Original_EventOccurrence) AND ([EventCode] = @Origina" +
                "l_EventCode) AND ([EventDetailCode] = @Original_EventDetailCode) AND ((@IsNull_M" +
                "essage = 1 AND [Message] IS NULL) OR ([Message] = @Original_Message)) AND ((@IsN" +
                "ull_ApplicationPath = 1 AND [ApplicationPath] IS NULL) OR ([ApplicationPath] = @" +
                "Original_ApplicationPath)) AND ((@IsNull_ApplicationVirtualPath = 1 AND [Applica" +
                "tionVirtualPath] IS NULL) OR ([ApplicationVirtualPath] = @Original_ApplicationVi" +
                "rtualPath)) AND ([MachineName] = @Original_MachineName) AND ((@IsNull_RequestUrl" +
                " = 1 AND [RequestUrl] IS NULL) OR ([RequestUrl] = @Original_RequestUrl)) AND ((@" +
                "IsNull_ExceptionType = 1 AND [ExceptionType] IS NULL) OR ([ExceptionType] = @Ori" +
                "ginal_ExceptionType)));\r\nSELECT EventId,EventTimeUtc,EventTime,EventType,Eve" +
                "ntSequence,EventOccurrence,EventCode,EventDetailCode,Message,ApplicationPat" +
                "h,ApplicationVirtualPath,MachineName,RequestUrl,ExceptionType,Details FROM " +
                "aspnet_WebEvent_Events WHERE (EventId = @EventId)";
      this.m_adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventId",System.Data.SqlDbType.Char,0,System.Data.ParameterDirection.Input,0,0,"EventId",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventTimeUtc",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"EventTimeUtc",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventTime",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"EventTime",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventType",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"EventType",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventSequence",System.Data.SqlDbType.Decimal,0,System.Data.ParameterDirection.Input,19,0,"EventSequence",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventOccurrence",System.Data.SqlDbType.Decimal,0,System.Data.ParameterDirection.Input,19,0,"EventOccurrence",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventCode",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"EventCode",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@EventDetailCode",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"EventDetailCode",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Message",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Message",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ApplicationPath",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"ApplicationPath",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ApplicationVirtualPath",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"ApplicationVirtualPath",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@MachineName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"MachineName",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RequestUrl",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"RequestUrl",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExceptionType",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"ExceptionType",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Details",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Details",System.Data.DataRowVersion.Current,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventId",System.Data.SqlDbType.Char,0,System.Data.ParameterDirection.Input,0,0,"EventId",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventTimeUtc",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"EventTimeUtc",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventTime",System.Data.SqlDbType.DateTime,0,System.Data.ParameterDirection.Input,0,0,"EventTime",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventType",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"EventType",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventSequence",System.Data.SqlDbType.Decimal,0,System.Data.ParameterDirection.Input,19,0,"EventSequence",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventOccurrence",System.Data.SqlDbType.Decimal,0,System.Data.ParameterDirection.Input,19,0,"EventOccurrence",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventCode",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"EventCode",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_EventDetailCode",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"EventDetailCode",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_Message",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"Message",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_Message",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"Message",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ApplicationPath",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"ApplicationPath",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ApplicationPath",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"ApplicationPath",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ApplicationVirtualPath",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"ApplicationVirtualPath",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ApplicationVirtualPath",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"ApplicationVirtualPath",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_MachineName",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"MachineName",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_RequestUrl",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"RequestUrl",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_RequestUrl",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"RequestUrl",System.Data.DataRowVersion.Original,false,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@IsNull_ExceptionType",System.Data.SqlDbType.Int,0,System.Data.ParameterDirection.Input,0,0,"ExceptionType",System.Data.DataRowVersion.Original,true,null,"","",""));
      this.m_adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Original_ExceptionType",System.Data.SqlDbType.NVarChar,0,System.Data.ParameterDirection.Input,0,0,"ExceptionType",System.Data.DataRowVersion.Original,false,null,"","",""));
   }

   private void InitConnection()
   {
      this.m_connection = new System.Data.SqlClient.SqlConnection();
      this.m_connection.ConnectionString = DataAccessUtil.GetConnectionString();
   }


   private void InitCommandCollection()
   {
      this.m_commandCollection = new System.Data.SqlClient.SqlCommand[1];
      this.m_commandCollection[0] = new System.Data.SqlClient.SqlCommand();
      this.m_commandCollection[0].Connection = this.Connection;
      this.m_commandCollection[0].CommandText = "SELECT EventId,EventTimeUtc,EventTime,EventType,EventSequence,EventOccurrenc" +
                "e,EventCode,EventDetailCode,Message,ApplicationPath,ApplicationVirtualPath," +
                " MachineName,RequestUrl,ExceptionType,Details FROM dbo.aspnet_WebEvent_Events" +
                "";
      this.m_commandCollection[0].CommandType = System.Data.CommandType.Text;
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill,true)]
   public virtual int Fill(AspNetDbDataSet.aspnet_WebEvent_EventsDataTable dataTable)
   {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      if((this.m_clearBeforeFill == true))
      {
         dataTable.Clear();
      }
      int returnValue = this.Adapter.Fill(dataTable);
      return returnValue;
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select,true)]
   public virtual AspNetDbDataSet.aspnet_WebEvent_EventsDataTable GetData()
   {
      this.Adapter.SelectCommand = this.CommandCollection[0];
      AspNetDbDataSet.aspnet_WebEvent_EventsDataTable dataTable = new AspNetDbDataSet.aspnet_WebEvent_EventsDataTable();
      this.Adapter.Fill(dataTable);
      return dataTable;
   }

   public virtual int Update(AspNetDbDataSet.aspnet_WebEvent_EventsDataTable dataTable)
   {
      return this.Adapter.Update(dataTable);
   }

   public virtual int Update(AspNetDbDataSet dataSet)
   {
      return this.Adapter.Update(dataSet,"aspnet_WebEvent_Events");
   }

   public virtual int Update(System.Data.DataRow dataRow)
   {
      return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
   }

   public virtual int Update(System.Data.DataRow[] dataRows)
   {
      return this.Adapter.Update(dataRows);
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete,true)]
   public virtual int Delete(string Original_EventId,System.DateTime Original_EventTimeUtc,System.DateTime Original_EventTime,string Original_EventType,decimal Original_EventSequence,decimal Original_EventOccurrence,int Original_EventCode,int Original_EventDetailCode,string Original_Message,string Original_ApplicationPath,string Original_ApplicationVirtualPath,string Original_MachineName,string Original_RequestUrl,string Original_ExceptionType)
   {
      if((Original_EventId == null))
      {
         throw new System.ArgumentNullException("Original_EventId");
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_EventId));
      }
      this.Adapter.DeleteCommand.Parameters[1].Value = ((System.DateTime)(Original_EventTimeUtc));
      this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_EventTime));
      if((Original_EventType == null))
      {
         throw new System.ArgumentNullException("Original_EventType");
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[3].Value = ((string)(Original_EventType));
      }
      this.Adapter.DeleteCommand.Parameters[4].Value = ((decimal)(Original_EventSequence));
      this.Adapter.DeleteCommand.Parameters[5].Value = ((decimal)(Original_EventOccurrence));
      this.Adapter.DeleteCommand.Parameters[6].Value = ((int)(Original_EventCode));
      this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_EventDetailCode));
      if((Original_Message == null))
      {
         this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(1));
         this.Adapter.DeleteCommand.Parameters[9].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(0));
         this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_Message));
      }
      if((Original_ApplicationPath == null))
      {
         this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(1));
         this.Adapter.DeleteCommand.Parameters[11].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(0));
         this.Adapter.DeleteCommand.Parameters[11].Value = ((string)(Original_ApplicationPath));
      }
      if((Original_ApplicationVirtualPath == null))
      {
         this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(1));
         this.Adapter.DeleteCommand.Parameters[13].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(0));
         this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_ApplicationVirtualPath));
      }
      if((Original_MachineName == null))
      {
         throw new System.ArgumentNullException("Original_MachineName");
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[14].Value = ((string)(Original_MachineName));
      }
      if((Original_RequestUrl == null))
      {
         this.Adapter.DeleteCommand.Parameters[15].Value = ((int)(1));
         this.Adapter.DeleteCommand.Parameters[16].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[15].Value = ((int)(0));
         this.Adapter.DeleteCommand.Parameters[16].Value = ((string)(Original_RequestUrl));
      }
      if((Original_ExceptionType == null))
      {
         this.Adapter.DeleteCommand.Parameters[17].Value = ((int)(1));
         this.Adapter.DeleteCommand.Parameters[18].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.DeleteCommand.Parameters[17].Value = ((int)(0));
         this.Adapter.DeleteCommand.Parameters[18].Value = ((string)(Original_ExceptionType));
      }
      System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
      this.Adapter.DeleteCommand.Connection.Open();
      try
      {
         return this.Adapter.DeleteCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.DeleteCommand.Connection.Close();
         }
      }
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert,true)]
   public virtual int Insert(string EventId,System.DateTime EventTimeUtc,System.DateTime EventTime,string EventType,decimal EventSequence,decimal EventOccurrence,int EventCode,int EventDetailCode,string Message,string ApplicationPath,string ApplicationVirtualPath,string MachineName,string RequestUrl,string ExceptionType,string Details)
   {
      if((EventId == null))
      {
         throw new System.ArgumentNullException("EventId");
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[0].Value = ((string)(EventId));
      }
      this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(EventTimeUtc));
      this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(EventTime));
      if((EventType == null))
      {
         throw new System.ArgumentNullException("EventType");
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[3].Value = ((string)(EventType));
      }
      this.Adapter.InsertCommand.Parameters[4].Value = ((decimal)(EventSequence));
      this.Adapter.InsertCommand.Parameters[5].Value = ((decimal)(EventOccurrence));
      this.Adapter.InsertCommand.Parameters[6].Value = ((int)(EventCode));
      this.Adapter.InsertCommand.Parameters[7].Value = ((int)(EventDetailCode));
      if((Message == null))
      {
         this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[8].Value = ((string)(Message));
      }
      if((ApplicationPath == null))
      {
         this.Adapter.InsertCommand.Parameters[9].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[9].Value = ((string)(ApplicationPath));
      }
      if((ApplicationVirtualPath == null))
      {
         this.Adapter.InsertCommand.Parameters[10].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[10].Value = ((string)(ApplicationVirtualPath));
      }
      if((MachineName == null))
      {
         throw new System.ArgumentNullException("MachineName");
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[11].Value = ((string)(MachineName));
      }
      if((RequestUrl == null))
      {
         this.Adapter.InsertCommand.Parameters[12].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[12].Value = ((string)(RequestUrl));
      }
      if((ExceptionType == null))
      {
         this.Adapter.InsertCommand.Parameters[13].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[13].Value = ((string)(ExceptionType));
      }
      if((Details == null))
      {
         this.Adapter.InsertCommand.Parameters[14].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.InsertCommand.Parameters[14].Value = ((string)(Details));
      }
      System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
      this.Adapter.InsertCommand.Connection.Open();
      try
      {
         return this.Adapter.InsertCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.InsertCommand.Connection.Close();
         }
      }
   }

   [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update,true)]
   public virtual int Update(
               string EventId,
               System.DateTime EventTimeUtc,
               System.DateTime EventTime,
               string EventType,
               decimal EventSequence,
               decimal EventOccurrence,
               int EventCode,
               int EventDetailCode,
               string Message,
               string ApplicationPath,
               string ApplicationVirtualPath,
               string MachineName,
               string RequestUrl,
               string ExceptionType,
               string Details,
               string Original_EventId,
               System.DateTime Original_EventTimeUtc,
               System.DateTime Original_EventTime,
               string Original_EventType,
               decimal Original_EventSequence,
               decimal Original_EventOccurrence,
               int Original_EventCode,
               int Original_EventDetailCode,
               string Original_Message,
               string Original_ApplicationPath,
               string Original_ApplicationVirtualPath,
               string Original_MachineName,
               string Original_RequestUrl,
               string Original_ExceptionType)
   {
      if((EventId == null))
      {
         throw new System.ArgumentNullException("EventId");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(EventId));
      }
      this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(EventTimeUtc));
      this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(EventTime));
      if((EventType == null))
      {
         throw new System.ArgumentNullException("EventType");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(EventType));
      }
      this.Adapter.UpdateCommand.Parameters[4].Value = ((decimal)(EventSequence));
      this.Adapter.UpdateCommand.Parameters[5].Value = ((decimal)(EventOccurrence));
      this.Adapter.UpdateCommand.Parameters[6].Value = ((int)(EventCode));
      this.Adapter.UpdateCommand.Parameters[7].Value = ((int)(EventDetailCode));
      if((Message == null))
      {
         this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(Message));
      }
      if((ApplicationPath == null))
      {
         this.Adapter.UpdateCommand.Parameters[9].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(ApplicationPath));
      }
      if((ApplicationVirtualPath == null))
      {
         this.Adapter.UpdateCommand.Parameters[10].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[10].Value = ((string)(ApplicationVirtualPath));
      }
      if((MachineName == null))
      {
         throw new System.ArgumentNullException("MachineName");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(MachineName));
      }
      if((RequestUrl == null))
      {
         this.Adapter.UpdateCommand.Parameters[12].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[12].Value = ((string)(RequestUrl));
      }
      if((ExceptionType == null))
      {
         this.Adapter.UpdateCommand.Parameters[13].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[13].Value = ((string)(ExceptionType));
      }
      if((Details == null))
      {
         this.Adapter.UpdateCommand.Parameters[14].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[14].Value = ((string)(Details));
      }
      if((Original_EventId == null))
      {
         throw new System.ArgumentNullException("Original_EventId");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_EventId));
      }
      this.Adapter.UpdateCommand.Parameters[16].Value = ((System.DateTime)(Original_EventTimeUtc));
      this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(Original_EventTime));
      if((Original_EventType == null))
      {
         throw new System.ArgumentNullException("Original_EventType");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[18].Value = ((string)(Original_EventType));
      }
      this.Adapter.UpdateCommand.Parameters[19].Value = ((decimal)(Original_EventSequence));
      this.Adapter.UpdateCommand.Parameters[20].Value = ((decimal)(Original_EventOccurrence));
      this.Adapter.UpdateCommand.Parameters[21].Value = ((int)(Original_EventCode));
      this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_EventDetailCode));
      if((Original_Message == null))
      {
         this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(1));
         this.Adapter.UpdateCommand.Parameters[24].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(0));
         this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_Message));
      }
      if((Original_ApplicationPath == null))
      {
         this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(1));
         this.Adapter.UpdateCommand.Parameters[26].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(0));
         this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_ApplicationPath));
      }
      if((Original_ApplicationVirtualPath == null))
      {
         this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(1));
         this.Adapter.UpdateCommand.Parameters[28].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(0));
         this.Adapter.UpdateCommand.Parameters[28].Value = ((string)(Original_ApplicationVirtualPath));
      }
      if((Original_MachineName == null))
      {
         throw new System.ArgumentNullException("Original_MachineName");
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[29].Value = ((string)(Original_MachineName));
      }
      if((Original_RequestUrl == null))
      {
         this.Adapter.UpdateCommand.Parameters[30].Value = ((int)(1));
         this.Adapter.UpdateCommand.Parameters[31].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[30].Value = ((int)(0));
         this.Adapter.UpdateCommand.Parameters[31].Value = ((string)(Original_RequestUrl));
      }
      if((Original_ExceptionType == null))
      {
         this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(1));
         this.Adapter.UpdateCommand.Parameters[33].Value = System.DBNull.Value;
      }
      else
      {
         this.Adapter.UpdateCommand.Parameters[32].Value = ((int)(0));
         this.Adapter.UpdateCommand.Parameters[33].Value = ((string)(Original_ExceptionType));
      }
      System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
      this.Adapter.UpdateCommand.Connection.Open();
      try
      {
         return this.Adapter.UpdateCommand.ExecuteNonQuery();
      }
      finally
      {
         if((previousConnectionState == System.Data.ConnectionState.Closed))
         {
            this.Adapter.UpdateCommand.Connection.Close();
         }
      }
   }
}
