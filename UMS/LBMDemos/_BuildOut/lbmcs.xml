<?xml version="1.0"?>
<doc>
    <assembly>
        <name>lbmcs</name>
    </assembly>
    <members>
        <member name="T:com.latencybusters.lbm.JMSMessageId">
            <summary> JMSMessageID class.
            This object creates a JMS MessageId.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.JMSMessageId.#ctor(System.String)">
            <summary> Creates a JMSMessageId object and initializes fields to the 
            supplied values.
            </summary>
            <param name="topic">A topic string.
            </param>
        </member>
        <member name="M:com.latencybusters.lbm.JMSMessageId.getMessageId">
            <summary> Get the JMS MessageId.</summary>
            <returns> JMS MessageId string.
            </returns>
        </member>
        <member name="T:com.latencybusters.lbm.CallbackInfo">
            <summary>
            Summary description for CallbackInfo.
            </summary>
        </member>
        <member name="T:com.latencybusters.lbm.LBMGenericCallbackInfo`1">
            <summary>
            Internal class used for callback info objects that uses generics to avoid the casting
            that is needed when using the normal CallbackInfo class
            </summary>
        </member>
        <member name="T:com.latencybusters.util.lbmdump">
            <summary>This class is a general utility to aid dumping blocks of data in
            a debuggable (hex) form. It provides static methods to dump
            to the console. It is an internally used class.
            </summary>
        </member>
        <member name="F:com.latencybusters.util.lbmdump.dump_offset">
            <summary>Boolean to control whether the offset is displayed at the
            start of every line dumped. Defaults to true.
            </summary>
        </member>
        <member name="M:com.latencybusters.util.lbmdump.toHexString(System.Byte[],System.Int32,System.Int32)">
            <summary>Get a string of hex formatted characters</summary>
            <param name="buf">The buffer containing the data to be converted to hex
            </param>
            <param name="offset">The offset in to the buffer to start processing
            </param>
            <param name="len">The number of bytes to be formatted
            </param>
            <returns> A string of hex formatted characters
            </returns>
        </member>
        <member name="M:com.latencybusters.util.lbmdump.toHexString(System.Byte[])">
            <summary>Get a string of hex formatted characters - the entire buffer is Xi
            processed
            </summary>
            <param name="buf">The buffer containing the data to be converted to hex
            </param>
            <returns> A string of hex formatted characters
            </returns>
        </member>
        <member name="M:com.latencybusters.util.lbmdump.dump(System.Byte[])">
            <summary>Dump a buffer to stdout</summary>
            <param name="buf">The buffer containing the data to be converted to hex
            </param>
        </member>
        <member name="M:com.latencybusters.util.lbmdump.dump(System.Byte[],System.Int32,System.Int32)">
            <summary>Dump a buffer to stdout</summary>
            <param name="buf">The buffer containing the data to be converted to hex
            </param>
            <param name="start">The offset in to the buffer to start processing
            </param>
            <param name="end">The penultimate byte to be formatted
            </param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMLogging">
             <summary>
             LBM logging callback delegate
             </summary>
             <param name="level">Logging level, where values can be (in order of decreasing importance):
             <list type="bullet">
             <item>
             <description>LBM.LOG_EMERG</description>
             </item>
             <item>
             <description>LBM.LOG_ALERT</description>
             </item>
             <item>
             <description>LBM.LOG_CRIT</description>
             </item>
             <item>
             <description>LBM.LOG_ERR</description>
             </item>
             <item>
             <description>LBM.LOG_WARNING</description>
             </item>
             <item>
             <description>LBM.LOG_NOTICE</description>
             </item>
             <item>
             <description>LBM.LOG_INFO</description>
             </item>
             <item>
             <description>LBM.LOG_DEBUG</description>
             </item>
             </list>
            </param>
             <param name="message">Log message</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBM">
            <summary>
            LBM Utility class.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.UME_MAX_STORE_STRLEN">
            <summary>
            UME constant: Maximum length of a UME store name string.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.UMQ_MAX_QUEUE_STRLEN">
            <summary>
            UMQ constant: Maxiumum length of a UMQ queue instance name string.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.UMQ_ULB_MAX_RECEIVER_STRLEN">
            <summary>
            UMQ constant: Maximum length of a ULB receiver name string.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.UMQ_MAX_INDEX_LEN">
            <summary>Maximum UMQ index length.</summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_OTID_BLOCK_SZ">
            <summary>
            Maximum OTID length
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.EINVAL">
            <summary>
            LBM error: An invalid argument was passed
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.EWOULDBLOCK">
            <summary>
            LBM error:  Function would block, but object is set to be nonblocking.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.ENOMEM">
            <summary>
             LBM error:  Operation could not be completed due to memory allocation error.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.EOP">
            <summary>
             LBM error:  Operation was invalid due to error in internal processing.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.EOS">
            <summary>
             LBM error: Operation failed due to unrecoverable OS system call error.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.ETIMEDOUT">
            <summary>
             LBM error:  Operation timed out waiting to complete.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.EDAEMONCONN">
            <summary>
             LBM error: LBM daemon connection not connected.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.EUMENOREG">
            <summary>
             LBM error:  UME registration not completed.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.ENO_QUEUE_REG">
            <summary>
             LBM error:  UMQ queue registration not completed.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.ENO_STORE_REG">
            <summary>
             LBM error:  UME store registration not completed.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.EMSG_SELECTOR">
            <summary>
             LBM error: Error parsing message selector.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_DATA">
            <summary>
             LBM message type: Data message. Data is valid.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_EOS">
            <summary>
             LBM message type: End of Transport Session from source.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_REQUEST">
            <summary>
             LBM message type: Request message from source.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_RESPONSE">
            <summary>
             LBM message type: Response message from requestee.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UNRECOVERABLE_LOSS">
            <summary>
             LBM message type: Missing message detected and not recovered in given time.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UNRECOVERABLE_LOSS_BURST">
            <summary>
             LBM message type: Missing burst of messages detected and not recovered.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_NO_SOURCE_NOTIFICATION">
            <summary>
             Notification that no source has been found for topic. Still querying fro topic source.
            </summary>	
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UME_REGISTRATION_ERROR">
            <summary>
              UME receiver registration encountered an error.
            </summary>
            <remarks>Data holds error message.
            </remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UME_REGISTRATION_SUCCESS">
            <summary>
              UME receiver registration successful.
            </summary>
            <remarks>
            <seealso cref="M:com.latencybusters.lbm.LBMMessage.sourceRegistrationId"/>
            <seealso cref="M:com.latencybusters.lbm.LBMMessage.receiverRegistrationId"/>
            </remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UME_REGISTRATION_CHANGE">
            <summary>
             UME receiver notification of source registration change.
            </summary>
            <remarks>Data holds info message.
            </remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UME_REGISTRATION_SUCCESS_EX">
            <summary>
            UME receiver registration successful for a store (extended form).
            </summary>
            <remarks>Data holds registration IDs, etc.</remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UME_REGISTRATION_COMPLETE_EX">
            <summary>
            UME receiver notification of registration completion.
            </summary>
            <remarks>Data holds sequence number and flags, etc.</remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UME_DEREGISTRATION_SUCCESS_EX">
            <summary>
            UME receiver deregistration successful for a store (extended form).
            </summary>
            <remarks>Data holds registration IDs, etc.</remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UME_DEREGISTRATION_COMPLETE_EX">
            <summary>
            UME receiver notification of deregistration completion.
            </summary>
            <remarks>Data holds sequence number and flags, etc.</remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UMQ_REGISTRATION_ERROR">
            <summary>
            UMQ receiver notification of registration error.
            The error message is contained in the message data.
            </summary>
            <seealso cref="M:com.latencybusters.lbm.LBMMessage.dataString"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UMQ_REGISTRATION_COMPLETE_EX">
            <summary>
            UMQ receiver notification of registration completion.
            Registration completion info can be retrieved through
            the queueRegistrationCompleteInfo() method.
            </summary>
            <seealso cref="M:com.latencybusters.lbm.LBMMessage.queueRegistrationCompleteInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UMQ_DEREGISTRATION_COMPLETE_EX">
            <summary>
            UMQ receiver notification of deregistration completion.
            Deregistration completion info can be retrieved through
            the queueDeregistrationCompleteInfo() method.
            </summary>
            <seealso cref="M:com.latencybusters.lbm.LBMMessage.queueDeregistrationCompleteInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_BOS">
            <summary>
             LBM message type: Beginning of Transport Session from source.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UMQ_INDEX_ASSIGNMENT_ELIGIBILITY_ERROR">
            <summary>LBM message type: UMQ receiver index assignment eligibility start/stop encountered an error.</summary>
            <remarks>Data holds error message.</remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UMQ_INDEX_ASSIGNMENT_ELIGIBILITY_START_COMPLETE_EX">
            <summary>UMQ receiver notification of beginning of index assignment eligibility.
            Index assignment eligibility start completion info (in the form of a UMQIndexAssignmentEligibilityStartCompleteInfo
            object) can be retrieved with the LBMMessage.indexAssignmentEligibilityStartCompleteInfo() method.</summary>
            <seealso cref="M:com.latencybusters.lbm.LBMMessage.queueIndexAssignmentEligibilityStartCompleteInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UMQ_INDEX_ASSIGNMENT_ELIGIBILITY_STOP_COMPLETE_EX">
            <summary>UMQ receiver notification of end of index assignment eligibility.
            Index assignment eligibility stop completion info (in the form of a UMQIndexAssignmentEligibilityStopCompleteInfo
            object) can be retrieved with the LBMMessage.indexAssignmentEligibilityStopCompleteInfo() method.</summary>
            <seealso cref="M:com.latencybusters.lbm.LBMMessage.queueIndexAssignmentEligibilityStopCompleteInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UMQ_INDEX_ASSIGNED_EX">
            <summary>UMQ receiver notification of assignment of a particular index from a particular queue or ULB source.
            Index assignment info (in the form of a UMQIndexAssignedInfo
            object) can be retrieved with the LBMMessage.indexAssignedInfo() method.</summary>
            <seealso cref="M:com.latencybusters.lbm.LBMMessage.queueIndexAssignedInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UMQ_INDEX_RELEASED_EX">
            <summary>UMQ receiver notification of end of assignment of a particular index from a particular queue or ULB source.
            Index assignment info (in the form of a UMQIndexReleasedInfo
            object) can be retrieved with the LBMMessage.indexReleasedInfo() method.</summary>
            <seealso cref="M:com.latencybusters.lbm.LBMMessage.queueIndexReleasedInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_HF_RESET">
            <summary>
            LBM message type: Hot failover notification that the expected sequence number has been reset via a source send reset.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UME_REGISTRATION_SUCCESS_EX_FLAG_OLD">
            <summary>
            Registration was flagged as an old receiver by the store.
            </summary>
            <remarks>An old receiver is one the store had cached.</remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UME_REGISTRATION_SUCCESS_EX_FLAG_NOCACHE">
            <summary>
            Registration was flagged as coming from a store that is configured to not cache data.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UME_REGISTRATION_SUCCESS_EX_FLAG_RPP">
            <summary>
            Registration was flagged as coming from a store that has allowed a RPP receiver.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UME_REGISTRATION_COMPLETE_EX_FLAG_QUORUM">
            <summary>
            Registration completed with only quorum reached.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UME_REGISTRATION_COMPLETE_EX_FLAG_RXREQMAX">
            <summary>
            Registration completed with RX REQ maximum used.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UME_DEREGISTRATION_SUCCESS_EX_FLAG_RPP">
            <summary>
            Deregistration was flagged as coming from a RPP store
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UMQ_REGISTRATION_COMPLETE_EX_FLAG_QUORUM">
            <summary>
            Flag indicating that registration completed with only quorum reached.
            </summary>
            <seealso cref="F:com.latencybusters.lbm.LBM.MSG_UMQ_REGISTRATION_COMPLETE_EX"/>
            <seealso cref="!:UMQRegistrationCompleteInfo.flags()"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UMQ_REGISTRATION_COMPLETE_EX_FLAG_ULB">
            <summary>
            Flag indicating that registration completed to a ULB source.
            </summary>
            <seealso cref="F:com.latencybusters.lbm.LBM.MSG_UMQ_REGISTRATION_COMPLETE_EX"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UMQ_DEREGISTRATION_COMPLETE_EX_FLAG_ULB">
            <summary>
            Flag indicating that deregistration completed to a ULB source.
            </summary>
            <seealso cref="F:com.latencybusters.lbm.LBM.MSG_UMQ_DEREGISTRATION_COMPLETE_EX"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UMQ_INDEX_ASSIGNED_FLAG_ULB">
            <summary>Index assignment was from a ULB source.</summary>
            <seealso cref="F:com.latencybusters.lbm.LBM.MSG_UMQ_INDEX_ASSIGNED_EX"/>
            <seealso cref="!:UMQIndexAssignedInfo.flags()"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UMQ_INDEX_RELEASED_FLAG_ULB">
            <summary>Index released from a ULB source.</summary>
            <seealso cref="F:com.latencybusters.lbm.LBM.MSG_UMQ_INDEX_RELEASED_EX"/>
            <seealso cref="!:UMQIndexReleasedInfo.flags()"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UMQ_INDEX_ASSIGNMENT_ELIGIBILITY_STOP_COMPLETE_EX_FLAG_ULB">
            <summary>Index assignment eligibility stop completed at a ULB source.</summary>
            <seealso cref="F:com.latencybusters.lbm.LBM.MSG_UMQ_INDEX_ASSIGNMENT_ELIGIBILITY_STOP_COMPLETE_EX"/>
            <seealso cref="!:UMQIndexAssignmentEligibilityStopCompleteInfo.flags()"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UMQ_INDEX_ASSIGNMENT_ELIGIBILITY_START_COMPLETE_EX_FLAG_ULB">
            <summary>Index assignment eligibility start completed at a ULB source.</summary>
            <seealso cref="F:com.latencybusters.lbm.LBM.MSG_UMQ_INDEX_ASSIGNMENT_ELIGIBILITY_START_COMPLETE_EX"/>
            <seealso cref="!:UMQIndexAssignmentEligibilityStartCompleteInfo.flags()"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_START_BATCH">
            <summary>
             Sending/receiving flag: Start batch
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_END_BATCH">
            <summary>
             Sending/receiving flag: End batch (Batch should be sent ASAP)
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_COMPLETE_BATCH">
            <summary>
             Sending/receiving flag: Message is complete batch (Batch should be sent ASAP)
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_FLUSH">
            <summary>
             Sending flag: Flush messages.
             Message is to be sent ASAP (not implicitly or explicitly batched).
             This also flushes waiting messages that were explicitly or implicitly batched.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK">
            <summary>
             If message could not be sent immediately, throw 
             an LBMEWouldBlockException
            </summary>
             <remarks><seealso cref="T:com.latencybusters.lbm.LBMEWouldBlockException"/></remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_BLOCK">
            <summary>
             Block the caller indefinitely until the message is sent.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_FLAG_START_BATCH">
            <summary>
              Receiving flag: Start batch
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_FLAG_END_BATCH">
            <summary>
              Receiving flag: End batch
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_FLAG_HF_PASS_THROUGH">
            <summary>
              Receiving flag: Non-HF message
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_FLAG_UME_RETRANSMIT">
            <summary>
              Receiving flag: Retransmitted message
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_FLAG_RETRANSMIT">
            <summary>
              Receiving flag: Retransmitted message
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_FLAG_IMMEDIATE">
            <summary>
              Receiving flag: Message is an immediate message.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_FLAG_HF_DUPLICATE">
            <summary>
              Receiving flag: Message is a hot failover duplicate message.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_FLAG_UMQ_REASSIGNED">
            <summary>
              Receiving flag: Reassigned UMQ message.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_FLAG_UMQ_RESUBMITTED">
            <summary>
              Receiving flag: Resubmitted UMQ message.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_FLAG_HF_OPTIONAL">
            <summary>
            Receiving flag: Hot Failover optional message
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_FLAG_HF_32">
            <summary>
            Receiving flag: The message contains a 32 bit hot failover sequence number
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_FLAG_HF_64">
            <summary>
            Receiving flag: The message contains a 64 bit hot failover sequence number.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_FLAG_OTR">
            <summary>
            Receiving flag: The message was recovered via OTR
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_FLAG_NUMBERED_CHANNEL">
            <summary>
             Channel flag: Numberered channel message
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_CONNECT">
            <summary>
             Source event: For unicast transport, means receiver has connected.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_DISCONNECT">
            <summary>
             Source event: For unicast transport, means receiver has disconnected.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_WAKEUP">
            <summary>
            Source event: Following earlier LBMEWouldBlockException,
            this event means that the source is ready for more sends.
            </summary>
            <remarks><seealso cref="T:com.latencybusters.lbm.LBMEWouldBlockException"/></remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_WAKEUP_FLAG_NORMAL">
            <summary>Source wakeup event flag: Unblocked source is a normal (or hot failover) source.</summary>
            <see cref="T:com.latencybusters.lbm.LBMSourceEventWakeupInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_WAKEUP_FLAG_MIM">
            <summary>Source wakeup event flag: Unblocked source is a context-level multicast immediate mode source.</summary>
            <see cref="T:com.latencybusters.lbm.LBMSourceEventWakeupInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_WAKEUP_FLAG_UIM">
            <summary>Source wakeup event flag: Unblocked source is a context-level unicast immediate mode source.</summary>
            <see cref="T:com.latencybusters.lbm.LBMSourceEventWakeupInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_WAKEUP_FLAG_REQUEST">
            <summary>Source wakeup event flag: Unblocked source is a context-level request source.</summary>
            <see cref="T:com.latencybusters.lbm.LBMSourceEventWakeupInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_WAKEUP_FLAG_RESPONSE">
            <summary>Source wakeup event flag: Unblocked source is a context-level response source.</summary>
            <see cref="T:com.latencybusters.lbm.LBMSourceEventWakeupInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_DAEMON_CONFIRM">
            <summary>
            Source event: For LBM daemon usage only.  Daemon has confirmed the source has been created.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_REGISTRATION_ERROR">
            <summary>
            Source event: (UME only) Registration of source failed with an error. 
            </summary>
            <remarks>
            Event data holds the error string.
            </remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_REGISTRATION_SUCCESS">
            <summary>
            Source event: (UME only) Registration of source successful.
            </summary>
            <remarks>
            Event data holds the registration the registration ID.
            </remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_MESSAGE_STABLE">
            <summary>
            Source event:  (UME only) UME ACK from store indicates message is stable.
            </summary>
            <remarks>
            Event data holds ACK information which includes the registration ID,
            the message sequence number, and the client object
             argument passed into the <see cref="M:com.latencybusters.lbm.LBMSource.send(System.Byte[],System.Int32,System.Int32,System.Object)"/> method.
            </remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_DELIVERY_CONFIRMATION">
            <summary>
            Source event:  (UME only) UME Confirmed Delivery of Message from receiver.
            </summary>
            <remarks>
            Event data holds ACK information which includes the registration ID,
            the message sequence number, and the client object
             argument passed into the <see cref="M:com.latencybusters.lbm.LBMSource.send(System.Byte[],System.Int32,System.Int32,System.Object)"/> method.
            </remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_STORE_UNRESPONSIVE">
            <summary>
            Source event: (UME only) Store has not been active within timeout.
            </summary>
            <remarks>
            Event data holds an info string.
            </remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_MESSAGE_RECLAIMED">
            <summary>
            Source event: (UME only) Indicates that a message has been reclaimed.
            </summary>
            <remarks>
             Event data holds the message sequence number and the client object
             argument passed into the <see cref="M:com.latencybusters.lbm.LBMSource.send(System.Byte[],System.Int32,System.Int32,System.Object)"/> method.
            </remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_REGISTRATION_SUCCESS_EX">
            <summary>
            Source event: (UME only) Registration of source successful (extended version).
            </summary>
            <remarks>Data (in the form of a UMESourceEventRegistrationSuccessInfo
            object) can be retrieved with the LBMSourceEvent.registrationSuccessInfo()
            method.</remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_REGISTRATION_COMPLETE_EX">
            <summary>
            Source event: (UME only) Registration of source complete.
            </summary>
            <remarks>Data (in the form of a UMESourceEventRegistrationCompleteInfo
            object) can be retrieved with the LBMSourceEvent.registrationCompleteInfo()
            method.</remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_MESSAGE_STABLE_EX">
            <summary>
            Source event:  For UME only, means UME ACK from store indicates message is stable (extended form).
            </summary>
            <remarks>Event data holds ACK information.</remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_DELIVERY_CONFIRMATION_EX">
            <summary>
            Source event:  For UME only, means UME Confirmed Delivery of Message from receiver (extended form).
            </summary>
            <remarks>Event data holds sequence number data.</remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_SEQUENCE_NUMBER_INFO">
            <summary>
            Source event: Informs the application of the sequence numbers used with a message.
            </summary>
            <remarks>Event data holds sequence number data.</remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UMQ_REGISTRATION_ERROR">
            <summary>
            Source Event: For UMQ only, means registration of source failed with an error.
            The error message is contained in the event dataString.
            </summary>
            <seealso cref="M:com.latencybusters.lbm.LBMSourceEvent.dataString"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UMQ_MESSAGE_ID_INFO">
            <summary>
            Source Event: For UMQ only, informs the application of the Message ID assigned with a message..
            The messageIdInfo() method will return an info object containing additional information.
            </summary>
            <seealso cref="M:com.latencybusters.lbm.LBMSourceEvent.messageIdInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UMQ_REGISTRATION_COMPLETE_EX">
            <summary>
            Source Event: For UMQ only, means registration of source complete.
            The queueRegistrationCompleteInfo() method will return an info object containing additional information..
            </summary>
            <seealso cref="M:com.latencybusters.lbm.LBMSourceEvent.queueRegistrationCompleteInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UMQ_MESSAGE_STABLE_EX">
            <summary>
            Source Event: For UMQ only, means a message is stable with a queue instance.
            The queueAckInfo() method will return an info object containing additional information..
            </summary>
            <seealso cref="M:com.latencybusters.lbm.LBMSourceEvent.queueAckInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UMQ_ULB_MESSAGE_ASSIGNED_EX">
            <summary>
            Source Event: For UMQ only, means a ULB message was assigned.
            The ulbMessageInfo() method will return an info object containing additional information..
            </summary>
            <seealso cref="M:com.latencybusters.lbm.LBMSourceEvent.ulbMessageInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UMQ_ULB_MESSAGE_REASSIGNED_EX">
            <summary>
            Source Event: For UMQ only, means a ULB message was reassigned.
            The ulbMessageInfo() method will return an info object containing additional information..
            </summary>
            <seealso cref="M:com.latencybusters.lbm.LBMSourceEvent.ulbMessageInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UMQ_ULB_MESSAGE_TIMEOUT_EX">
            <summary>
            Source Event: For UMQ only, means a ULB message reached end-of-life and was discarded.
            The ulbMessageInfo() method will return an info object containing additional information..
            </summary>
            <seealso cref="M:com.latencybusters.lbm.LBMSourceEvent.ulbMessageInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UMQ_ULB_MESSAGE_COMPLETE_EX">
            <summary>
            Source Event: For UMQ only, means a ULB message was consumed or discarded from all application sets.
            The ulbMessageInfo() method will return an info object containing additional information..
            </summary>
            <seealso cref="M:com.latencybusters.lbm.LBMSourceEvent.ulbMessageInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UMQ_ULB_MESSAGE_CONSUMED_EX">
            <summary>
            Source Event: For UMQ only, means a ULB message was consumed.
            The ulbMessageInfo() method will return an info object containing additional information..
            </summary>
            <seealso cref="M:com.latencybusters.lbm.LBMSourceEvent.ulbMessageInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UMQ_ULB_RECEIVER_REGISTRATION_EX">
            <summary>
            Source Event: For UMQ only, means a ULB receiver registered.
            The ulbReceiverInfo() method will return an info object containing additional information..
            </summary>
            <seealso cref="M:com.latencybusters.lbm.LBMSourceEvent.ulbReceiverInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UMQ_ULB_RECEIVER_DEREGISTRATION_EX">
            <summary>
            Source Event: For UMQ only, means a ULB receiver deregistered.
            The ulbReceiverInfo() method will return an info object containing additional information..
            </summary>
            <seealso cref="M:com.latencybusters.lbm.LBMSourceEvent.ulbReceiverInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UMQ_ULB_RECEIVER_READY_EX">
            <summary>
            Source Event: For UMQ only, means a ULB receiver signalled ready to receive.
            The ulbReceiverInfo() method will return an info object containing additional information..
            </summary>
            <seealso cref="M:com.latencybusters.lbm.LBMSourceEvent.ulbReceiverInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UMQ_ULB_RECEIVER_TIMEOUT_EX">
            <summary>
            Source Event: For UMQ only, means a ULB receiver reached end-of-life.
            The ulbReceiverInfo() method will return an info object containing additional information..
            </summary>
            <seealso cref="M:com.latencybusters.lbm.LBMSourceEvent.ulbReceiverInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_FLIGHT_SIZE_NOTIFICATION">
            <summary>
            Source Event: flight size notification.
            The flightSizeNotification() method will return an info object containing additional information.
            </summary>
            <seealso cref="M:com.latencybusters.lbm.LBMSourceEvent.flightSizeNotification"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_MESSAGE_RECLAIMED_EX">
            <summary>
            Source event: Indicates that a message has been reclaimed (extended form).
            </summary>
            <remarks>
             Event data holds ACK information: the message sequence number and the client object
             argument passed into the <see cref="M:com.latencybusters.lbm.LBMSource.send(System.Byte[],System.Int32,System.Int32,System.Object)"/> method.
            </remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_DEREGISTRATION_SUCCESS_EX">
            <summary>
            Source event: (UME only) Deregistration of source successful (extended version).
            </summary>
            <remarks>Data (in the form of a UMESourceEventDeregistrationSuccessInfo
            object) can be retrieved with the LBMSourceEvent.deregistrationSuccessInfo()
            method.</remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_DEREGISTRATION_COMPLETE_EX">
            <summary>
            Source event: (UME only) Deregistration of source complete.
            </summary>
            <remarks>Data (in the form of a UMESourceEventDeregistrationCompleteInfo
            object) can be retrieved with the LBMSourceEvent.deregistrationCompleteInfo()
            method.</remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_MESSAGE_NOT_STABLE">
            <summary>
            Source event:  For UMP only, means a message is NOT stable, and the source has given up waiting for stability.
            @since UMP 6.0
            </summary>
            <remarks>Event data tells which store the message is not stable at and the reason the source gave up.</remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_REGISTRATION_SUCCESS_EX_FLAG_OLD">
            <summary>
            Registration was flagged as an old source by the store.
            </summary>
            <remarks>An old source is one the store had cached.</remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_REGISTRATION_SUCCESS_EX_FLAG_NOACKS">
            <summary>
            Registration was flagged as coming from a store that is configured to not send ACKs for stability (no-cache store).
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_REGISTRATION_SUCCESS_EX_FLAG_RPP">
            <summary>
            Registration was flagged as coming from a store that allows and has accepted RPP persistent topics.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_REGISTRATION_COMPLETE_EX_FLAG_QUORUM">
            <summary>
            Registration completed with only quorum reached.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_MESSAGE_STABLE_EX_FLAG_INTRAGROUP_STABLE">
            <summary>
            Message stable for intragroup stability
            @since UME 2.0
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_MESSAGE_STABLE_EX_FLAG_INTERGROUP_STABLE">
            <summary>
            Message stable for intergroup stability
            @since UME 2.0
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_MESSAGE_STABLE_EX_FLAG_STABLE">
            <summary>
            Message is stable according to behavior desired
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_MESSAGE_STABLE_EX_FLAG_STORE">
            <summary>
            Message stable information has active store information
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_MESSAGE_STABLE_EX_FLAG_WHOLE_MESSAGE_STABLE">
            <summary>
            Whole message (each fragment) is stable
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_MESSAGE_STABLE_EX_FLAG_USER">
            <summary>
            Message stabilized via the setUMEMessageStable API
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_MESSAGE_NOT_STABLE_FLAG_STORE">
            <summary>
            Message not stable information has store information
            @since UMP 6.0
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_MESSAGE_NOT_STABLE_FLAG_LOSS">
            <summary>
            Message not stable due to explicitly reported unrecoverable loss at the store or receiver.
            @since UMP 6.0
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_MESSAGE_NOT_STABLE_FLAG_TIMEOUT">
            <summary>
            Message not stable due to stability lifetime timeout.
            @since UMP 6.0
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_MESSAGE_RECLAIMED_EX_FLAG_FORCED">
            <summary>
            Reclaim notification is the result of a forced reclaim
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_DELIVERY_CONFIRMATION_EX_FLAG_UNIQUEACKS">
            <summary>
            Confirmation received for specified number of unique ACKs.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_DELIVERY_CONFIRMATION_EX_FLAG_UREGID">
            <summary>
            Confirmation received with User Specified Rcv Registration ID flagged.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_DELIVERY_CONFIRMATION_EX_FLAG_OOD">
            <summary>
            Confirmation received with Out-of-Order Delivery (OOD) flagged.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_DELIVERY_CONFIRMATION_EX_FLAG_EXACK">
            <summary>
            Confirmation received with Explicit ACK (EXACK) flagged.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UMQ_REGISTRATION_COMPLETE_EX_FLAG_QUORUM">
            <summary>
            Registration completed with only quorum reached.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UMQ_MESSAGE_STABLE_EX_FLAG_INTRAGROUP_STABLE">
            <summary>
            Message stable for intragroup stability
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UMQ_MESSAGE_STABLE_EX_FLAG_INTERGROUP_STABLE">
            <summary>
            Message stable for intergroup stability
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UMQ_MESSAGE_STABLE_EX_FLAG_STABLE">
            <summary>
            Message is stable according to behavior desired
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UMQ_MESSAGE_STABLE_EX_FLAG_USER">
            <summary>
            Message stabilized via the setUMQMessageStable API
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_FLIGHT_SIZE_NOTIFICATION_TYPE_UME">
            <summary>Specifies a UME flight size.</summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_FLIGHT_SIZE_NOTIFICATION_TYPE_ULB">
            <summary>Specifies a ULB flight size.</summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_FLIGHT_SIZE_NOTIFICATION_TYPE_UMQ">
            <summary>Specifies a UMQ flight size.</summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_FLIGHT_SIZE_NOTIFICATION_STATE_OVER">
            <summary>Messages in flight has exceeded the threshold.</summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_FLIGHT_SIZE_NOTIFICATION_STATE_UNDER">
            <summary>Messages in flight is now below the threshold.</summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.FLIGHT_SIZE_TYPE_UME">
            <summary>Specify a UME flight size.</summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.FLIGHT_SIZE_TYPE_ULB">
            <summary>Specify a ULB flight size.</summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.FLIGHT_SIZE_TYPE_UMQ">
            <summary>Specify a UMQ flight size.</summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UMQ_ULB_MESSAGE_TIMEOUT_EX_FLAG_TOTAL_LIFETIME_EXPIRED">
            <summary>Timeout is the result of the total lifetime expiring</summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UMQ_ULB_MESSAGE_TIMEOUT_EX_FLAG_EXPLICIT">
            <summary>Timeout is the result of the reassign API being called by a receiver</summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UMQ_ULB_MESSAGE_TIMEOUT_EX_FLAG_DISCARD">
            <summary>Timeout is the result of the reassign API being called with the DISCARD flag set</summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_EVENT_UMQ_ULB_MESSAGE_TIMEOUT_EX_FLAG_MAX_REASSIGNS">
            <summary>Timeout is the result of hitting the umq_ulb_application_set_message_max_reassignments number of assignments</summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.CONTEXT_EVENT_UMQ_REGISTRATION_COMPLETE_EX">
            <summary>
            Context Event: Indicates context registration is complete.
            </summary>
            <seealso cref="M:com.latencybusters.lbm.LBMContextEvent.registrationCompleteInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.CONTEXT_EVENT_UMQ_REGISTRATION_SUCCESS_EX">
            <summary>
            Context Event: Indicates context registration with a single queue instance was successful.
            </summary>
            <seealso cref="M:com.latencybusters.lbm.LBMContextEvent.registrationSuccessInfo"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.CONTEXT_EVENT_UMQ_REGISTRATION_ERROR">
            <summary>
            Context Event: Indicates context registration failed with an error.
            The dataString() method will return a message describing the error.
            </summary>
            <seealso cref="M:com.latencybusters.lbm.LBMContextEvent.dataString"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.CONTEXT_EVENT_UMQ_REGISTRATION_COMPLETE_EX_FLAG_QUORUM">
            <summary>
            Registration completed with only quorum reached.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.CONTEXT_EVENT_UMQ_INSTANCE_LIST_NOTIFICATION">
            <summary>
            Indicates that the queue instance list has changed.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_SEND_EX_FLAG_SEQUENCE_NUMBER_INFO">
            <summary>
            Inform application of the sequence numbers used for message.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_SEND_EX_FLAG_SEQUENCE_NUMBER_INFO_FRAGONLY">
            <summary>
            Inform application of the sequence numbers used for message (fragmented messages only).
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_SEND_EX_FLAG_UMQ_MESSAGE_ID_INFO">
            <summary>
            Inform application of the UMQ Message ID used for the message.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_SEND_EX_FLAG_CHANNEL">
            <summary>
            Send message with included channel information.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_SEND_EX_FLAG_UMQ_INDEX">
            <summary>Send messages associating them with the supplied UMQ index</summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_SEND_EX_FLAG_UMQ_TOTAL_LIFETIME">
            <summary>Send message with supplied total lifetime</summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_SEND_EX_FLAG_HF_OPTIONAL">
            <summary>Send message marked as an optional message for Hot Failover</summary>
            <seealso cref="M:com.latencybusters.lbm.LBMSource.send(System.Byte[],System.Int32,System.Int32,com.latencybusters.lbm.LBMSourceSendExInfo)"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_SEND_EX_FLAG_PROPERTIES">
            <summary>Send message with associated properties</summary>
            <seealso cref="M:com.latencybusters.lbm.LBMSource.send(System.Byte[],System.Int32,System.Int32,com.latencybusters.lbm.LBMSourceSendExInfo)"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_SEND_EX_FLAG_HF_32">
            <summary>
            Send message with a 64 bit hot failover sequence number.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_SEND_EX_FLAG_HF_64">
            <summary>
            Send message with a 32 bit hot failover sequence number.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_PROPERTY_BOOLEAN">
            <summary>
            Message property type: boolean
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_PROPERTY_BYTE">
            <summary>
            Message property type: byte
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_PROPERTY_SHORT">
            <summary>
            Message property type: short (2 bytes)
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_PROPERTY_INT">
            <summary>
            Message property type: int (4 bytes)
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_PROPERTY_LONG">
            <summary>
            Message property type: long (8 bytes)
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_PROPERTY_FLOAT">
            <summary>
            Message property type: float (4 bytes)
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_PROPERTY_DOUBLE">
            <summary>
            Message property type: double (8 bytes)
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_PROPERTY_STRING">
            <summary>
            Message property type: string
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.UMQ_INDEX_FLAG_NUMERIC">
            <summary>UMQIndexInfo flag. Index is a 64-bit integer.</summary>
            <seealso cref="M:com.latencybusters.lbm.UMQIndexInfo.flags"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_TOPIC_ATTR_UME_STORE_BEHAVIOR_RR">
            <summary>
            Round Robin store behaviour
             @since UME 2.0
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_TOPIC_ATTR_UME_STORE_BEHAVIOR_QC">
            <summary>
             Quorum and Consensus store behaviour
             @since UME 2.0
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.SRC_TOPIC_ATTR_UMQ_ULB_EVENT_MSG_COMPLETE">
            <summary>
            ULB message complete source event
            @since UMQ 2.1.1
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_UMQ_REASSIGN_FLAG_DISCARD">
            <summary>
            Instead of requesting reassignment, request the message be discarded.
            </summary>
            <seealso cref="!:LBMMessage.reassign()"/>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.CTX_ATTR_OP_EMBEDDED">
            <summary>
             Context operational mode: Embedded
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.CTX_ATTR_OP_DAEMON">
            <summary>
             Context operational mode: Daemon
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.CTX_ATTR_OP_SEQUENTIAL">
            <summary>
             Context operational mode: Sequential
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_MAX_SOURCE_LEN">
            <summary>
            Maximum source name length
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.MSG_MAX_TOPIC_LEN">
            <summary>
             Maximum topic name length
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.EVENT_QUEUE_BLOCK">
            <summary>
             Infinite blocking time for running event queue
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.EVENT_QUEUE_POLL">
            <summary>
             Poll and dispatch a single event when running the event queue
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.EVENT_QUEUE_SIZE_WARNING">
            <summary>
             Event queue monitor event type: Warning of event queue size.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.EVENT_QUEUE_DELAY_WARNING">
            <summary>
             Event queue monitor event type: Warning of excessive delay for event.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.EVENT_QUEUE_ENQUEUE_NOTIFICATION">
            <summary>
             Event queue monitor event type: Notification of something being
             added to queue.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LOG_EMERG">
            <summary>
             Logging level: Emergency
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LOG_ALERT">
            <summary>
             Logging level: Alert
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LOG_CRIT">
            <summary>
             Logging level: Critical
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LOG_ERR">
            <summary>
             Logging level: Error
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LOG_WARNING">
            <summary>
             Logging level: Warning
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LOG_NOTICE">
            <summary>
             Logging level: Notice
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LOG_INFO">
            <summary>
             Logging level: Informational
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LOG_DEBUG">
            <summary>
             Logging level: Debug
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.TRANSPORT_STAT_TCP">
            <summary>
             Transport statistics type: TCP transport.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.TRANSPORT_STAT_LBTRM">
            <summary>
             Transport statistics type: LBT-RM transport.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.TRANSPORT_STAT_LBTRU">
            <summary>
             Transport statistics type: LBT-RU transport.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.TRANSPORT_STAT_LBTIPC">
            <summary>
            Transport statistics type: LBT-IPC transport.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.TRANSPORT_STAT_LBTSMX">
            <summary>
            Transport statistics type: LBT-SMX transport.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.TRANSPORT_STAT_LBTRDMA">
            <summary>
            Transport statistics type: LBT-RDMA transport.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.TRANSPORT_STAT_DAEMON">
            <summary>
             Transport statistics type: Daemon is being used.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.WILDCARD_RCV_PATTERN_TYPE_PCRE">
            <summary>
             Wildcard receiver pattern type: PCRE (Perl Compatible Regular Expressions)
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.WILDCARD_RCV_PATTERN_TYPE_REGEX">
            <summary>
             Wildcard receiver pattern type: POSIX regex
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.WILDCARD_RCV_PATTERN_TYPE_APP_CB">
            <summary>
             Wildcard receiver pattern type: callback
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.TOPIC_RES_REQUEST_ADVERTISEMENT">
            <summary>
            Request advertisements from quiescent sources.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.TOPIC_RES_REQUEST_QUERY">
            <summary>
            Request advertisements from quiescent receivers.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.TOPIC_RES_REQUEST_WILDCARD_QUERY">
            <summary>
            Request advertisements from quiescent wildcard receivers.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.TOPIC_RES_REQUEST_CONTEXT_ADVERTISEMENT">
            <summary>
            Request context advertisements from quiescent contexts.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.TOPIC_RES_REQUEST_CONTEXT_QUERY">
            <summary>
            Request context queries from quiescent contexts.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_SRC_COST_FUNCTION_REJECT">
            <summary>
            Source cost function return value to indicate this source should be permanently rejected.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_UMM_INFO_FLAGS_USE_SSL">
            <summary>
            LBMUMMInfo flag to use SSL for all ummd connections.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_UMM_NUM_SERVERS_MAX">
            <summary>
             Max allowed number of failover UMM daemons.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_UMM_USER_NAME_LENGTH_MAX">
            <summary>
            Max UMM user name length.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_UMM_PASSWORD_LENGTH_MAX">
            <summary>
            Max UMM password length.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_UMM_APP_NAME_LENGTH_MAX">
            <summary>
            Max UMM application name length.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_UMM_SERVER_LENGTH_MAX">
            <summary>
            Max ip:port server string length.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_UME_LIVENESS_RECEIVER_UNRESPONSIVE_FLAG_TMO">
            <summary>
            UME Receiver Liveness Deletion TIMEOUT
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_UME_LIVENESS_RECEIVER_UNRESPONSIVE_FLAG_EOF">
            <summary>
            UME Receiver Liveness Deletion EOF
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_TEXTMESSAGE">
            <summary>
             Possible JMS Message Types.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_JMSDeliveryMode">
            <summary>
             int,  NON_PERSISTENT = 1, PERSISTENT = 2
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_JMSExpiration">
            <summary>
              long, Number of milliseconds since 1970.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_JMSPriority">
            <summary>
              int
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_JMSMessageID">
            <summary>
              String
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_JMSTimestamp">
            <summary>
              long, Number of milliseconds since 1970.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_JMSCorrelationID">
            <summary>
              String
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_JMSType">
            <summary>
              String, topic, queue or destination
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_JMSRedelivered">
            <summary>
              boolean
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_LBMMessageType">
            <summary>
               int, LBM_TEXTMESSAGE, LBM_BYTEMESSAGE, LBM_MAPMESSAGE, LBM_MESSAGE, LBM_OBJECTMESSAGE, LBM_STREAMMESSAGE
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_JMSTopicType">
            <summary>
              String, topic, queue or destination
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_JMSReplyToName">
            <summary>
              String
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_JMSReplyToWildcard">
            <summary>
              boolean
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBM.LBM_JMSReplyToType">
            <summary>
               String,  topic, queue or destination
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBM.#ctor">
            <summary>
            Instantiate LBM utility class
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBM.Finalize">
            <summary>
            LBM class finalization
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBM.setLicenseFile(System.String)">
            <summary>
            Initialize the LBM license from the contents of a disk file.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            This method will only be effective if it is called before
            any other LBM API method.
            </remarks>
            <param name="licenseFile">String containing the name of a
            file that contains the LBM license.  This string is the same
            as that which would otherwise be specified as the  value of
            the LBM_LICENSE_FILENAME environmental variable.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBM.setLicenseString(System.String)">
            <summary>
            Initialize the LBM license from a string.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            This method will only be effective if it is called before
            any other LBM API method.
            </remarks>
            <param name="licenseString">String containing LBM license.
            This string is the same as that which would otherwise be
            specified as the  value of the LBM_LICENSE_FILENAME
            environmental variable.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBM.setConfiguration(System.String)">
            <summary>
            Configure LBM attributes from a file, tftp or http URL.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="fileName">String containing a file name or URL (tftp or http). File names with a ".xml" extension be processed by the setConfigurationXml API with a null applicationName. </param>
        </member>
        <member name="M:com.latencybusters.lbm.LBM.setConfigurationXml(System.String,System.String)">
            <summary>
            Configure LBM attributes from an xml file.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="fileName">String containing the xml file name or URL (tftp or http)</param>
            <param name="applicationName">String containing the application name</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBM.setConfigurationXmlString(System.String,System.String)">
            <summary>
            Configure LBM attributes from a string.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="xmlString">String containing LBM XML configuration data </param>
            <param name="applicationName">String containing the application name</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBM.setUmmInfo(com.latencybusters.lbm.LBMUMMInfo)">
            <summary>
            Connect to and retrieve configuration from a UMM daemon
            </summary>
            <remarks>
            This method will only be effective if it is called before
            any other LBM API method.
            </remarks>
            <exception ref="com.latencybusters.lbm.LBMException">UMM info has already been initialized, or invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="_info">UMM daemon connection options</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBM.version">
            <summary>
            Get LBM version information.
            </summary>
            <returns>LBM version</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBM.setLogger(com.latencybusters.lbm.LBMLogging)">
            <summary>
            Inform LBM to use a specific logger for logging
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="logger">Logging callback implementing the LBMLogging delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBM.setDebugFilename(System.String)">
            <summary>
            Specify the name of the debug log to be written
            </summary>
            <param name="filename">Name of the file to be written with debug data</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBM.setDebugMask(System.UInt64)">
            <summary>
            Specify the debugging mask to be applied to debugging output.
            This is set based on recommendation of support staff.
            </summary>
            <param name="mask">The debugging mask to be used when determining if an item should be logged</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBM.setDebugLogCallback(System.Boolean)">
            <summary>
            Enable logging of debug messages to the application logging callback
            set by LBM.setLogger(). By default, if lbm debug logging is enabled it is
            sent to the filename specified by setDebugFilename(), or stderr. 
            Calling setDebugLogCallback() with a value of true will redirect debug 
            logging to the application logger set by setLogger(), or 
            stderr if no logger is set.
            </summary>
            <param name="enable">true enables, false disables.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBM.dumpDebugLog(System.String,System.Boolean)">
            <summary>
             Dump the in-memory LBM debug log to a specified file.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="filename">Name of the file to dump debug log events to.</param>
            <param name="append">Set to true to append the debug log to the file; otherwise, the file is overwritten.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBM.errorNumber">
            <summary>
            Returns last LBM error number
            </summary>
            <returns>LBM error number</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBM.errorMessage">
            <summary>
            Returns last LBM error message
            </summary>
            <returns>LBM error message</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMConfigOption">
            <summary>
            LBM Option class
            </summary>
        </member>
        <member name="P:com.latencybusters.lbm.LBMConfigOption.Type">
            <summary>
            The type of option.
            </summary>
            <value>"context", "source", "receiver", etc.</value>
        </member>
        <member name="P:com.latencybusters.lbm.LBMConfigOption.OptionName">
            <summary>
            The name of the option.
            </summary>
            <value>Names of options; e.g. "resolver_multicast_address", "transport", etc.</value>
        </member>
        <member name="P:com.latencybusters.lbm.LBMConfigOption.Value">
            <summary>
            The value assigned to the option.
            </summary>
            <value>String representing the value of the option; e.g. "224.9.10.11", "lbtrm", etc.</value>
        </member>
        <member name="T:com.latencybusters.lbm.LBMImmediateMessageCallback">
            <summary>
            Received immediate message callback delegate.
            </summary>
            <param name="cbArg">Callback object token</param>
            <param name="lbmmsg">LBMMessage object encapsulating the received message</param>
            <returns>-1 indicates that the message could not be received and should be redelivered.
            (Note: if multiple callbacks are registered, a -1 return from any callback will cause the
            message to be redelivered to all the callbacks.)</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMContextSourceEventCallback">
            <summary>
            Context source event callback delegate
            </summary>
            <param name="cbArg">Callback object token</param>
            <param name="sourceEvent">LBMContextSourceEvent object encapsulating context source event information</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMContext">
            <summary>
            Creates an LBM context.
            </summary>
            <remarks>
            This creates  an instance of the LBM main processing element, an LBM context.
            Sources and Receivers are created from an LBM context and work within that
            context. For the Embedded operational mode, a thread is spawned to handle
            message processing.
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.#ctor">
            <summary>
            Instantiate an LBMContext object using default attributes.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.#ctor(com.latencybusters.lbm.LBMContextAttributes)">
            <summary>
            Instantiate an LBMContext object using given attributes.
            </summary>
            <param name="lbmcattr">LBMContextAttributes used to initialize the context</param>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.Finalize">
            <summary>
            LBMContext class finalization
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.close">
            <summary>
            Close and dispose of this context.
            <para><b>Warning</b>: It is not safe to call this method from a context thread callback.</para>
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.dumpAttributeList">
            <summary>
            Returns an array of context attributes in LBConfigOption 
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <returns>Returns an array of context attributes in LBConfigOption</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.getAttributeValue(System.String)">
            <summary>
            Returns the value of a context-related attribute for this context.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to retrieve</param>
            <returns>Value corresponding to the specified attribute name</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.setAttributeValue(System.String,System.String)">
            <summary>
            Set the value of a context-related attribute for this context.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            Note that this method bypasses the property list.
            As such no attributes configured using this method will appear in
            the property list.
            </remarks>
            <param name="attributeName">Name of the attribute to set</param>
            <param name="attributeValue">New attribute value</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.processEvents(System.Int64)">
            <summary>
            Process internal events in the given LBM context object.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            When the operational mode is set to "sequential",
            it is the responsibility of the application to explicitly process
            events for the LBM context. This method will process timers and
            API timer and file descriptor/socket events.
            <para><b>Warning</b>: It is not safe to call this method from a context thread callback.</para>
            </remarks>
            <param name="msec">Continue event processing loop for at least msec milliseconds before returning.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.unblockProcessEvents">
            <summary>
            Unblock processEvents call.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> if any error occurs.</exception>
            <remarks>
            When the operational mode is set to "sequential",
            this API forces a call to processEvents to return immediately after
            completing the current set of I/O operations instead of waiting.
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.lookupTopic(System.String)">
            <summary>
            Create an LBMTopic object (useable for an LBM receiver) for a given topic name. 
            Topic strings should be limited in length to 246 characters (not including 
            the final null).
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.
            </remarks>
            <param name="symbol">Topic name string</param>
            <returns>LBMTopic object for specified topic name</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.lookupTopic(System.String,com.latencybusters.lbm.LBMReceiverAttributes)">
            <summary>
            Create an LBMTopic object (useable for an LBM receiver)
            for given topic name and attributes.
            Topic strings should be limited in length to 246 characters (not including 
            the final null).
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.
            </remarks>
            <param name="symbol"> Topic name string</param>
            <param name="lbmrattr">lbmrattr LBMReceiverAttributes object</param>
            <returns>LBMTopic object for specified topic name and attributes</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.allocTopic(System.String)">
            <summary>
            Create an LBMTopic object (useable for an LBM source)
            for given topic name and attributes.
            Topic strings should be limited in length to 246 characters (not including 
            the final null).
            </summary>
            <param name="symbol">Topic name string</param>
            <returns>LBMTopic object for specified topic name and attributes</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.allocTopic(System.String,com.latencybusters.lbm.LBMSourceAttributes)">
            <summary>
            Create an LBMTopic object (useable for an LBM source)
            for given topic name and attributes.
            Topic strings should be limited in length to 246 characters (not including 
            the final null).
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.
            </remarks>
            <param name="symbol">Topic name string</param>
            <param name="lbmsattr">LBMSourceAttributes object</param>
            <returns>LBMTopic object for specified topic name and attributes</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.enableImmediateMessageReceiver">
            <summary>
            Enable LBM to receive non-topic immediate messages.
            </summary>
            <remarks>
            This method does not establish a callback handler.
            The callback to handle immediate messages should be
            established using <see cref="M:com.latencybusters.lbm.LBMContext.addImmediateMessageReceiver(com.latencybusters.lbm.LBMImmediateMessageCallback)"/>.
            <seealso cref="M:com.latencybusters.lbm.LBMContext.addImmediateMessageReceiver(com.latencybusters.lbm.LBMImmediateMessageCallback)"/>
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.enableImmediateMessageReceiver(com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Enable LBM to receive non-topic immediate messages (using an event
            queue).
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            This method does not establish a callback handler.
            The callback to handle immediate messages should be
            established using <see cref="M:com.latencybusters.lbm.LBMContext.addImmediateMessageReceiver(com.latencybusters.lbm.LBMImmediateMessageCallback)"/>.
            <seealso cref="M:com.latencybusters.lbm.LBMContext.addImmediateMessageReceiver(com.latencybusters.lbm.LBMImmediateMessageCallback)"/>
            </remarks>
            <param name="lbmevq">LBMEventQueue on which to process responses (may be null
            if not using an event queue)</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.addImmediateMessageReceiver(com.latencybusters.lbm.LBMImmediateMessageCallback)">
            <summary>
            Register a callback for handling of non-topic immediate messages
            </summary>
            <remark>
            Reception of non-topic immediate messages is disabled by default
            and may be enabled only by calling
            <see cref="M:com.latencybusters.lbm.LBMContext.enableImmediateMessageReceiver"/>.
            <seealso cref="M:com.latencybusters.lbm.LBMContext.enableImmediateMessageReceiver"/>
            <seealso cref="T:com.latencybusters.lbm.LBMImmediateMessageCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMContext.removeImmediateMessageReceiver(com.latencybusters.lbm.LBMImmediateMessageCallback)"/>
            </remark>
            <param name="cb">Object implementing the LBMImmediateMessageCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.addImmediateMessageReceiver(com.latencybusters.lbm.LBMImmediateMessageCallback,System.Object)">
            <summary>
            Register a callback for handling of non-topic immediate messages
            </summary>
            <remark>
            Reception of non-topic immediate messages is disabled by default
            and may be enabled only by calling
            <seealso cref="M:com.latencybusters.lbm.LBMContext.enableImmediateMessageReceiver"/>
            <seealso cref="T:com.latencybusters.lbm.LBMImmediateMessageCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMContext.removeImmediateMessageReceiver(com.latencybusters.lbm.LBMImmediateMessageCallback)"/>
            </remark>
            <param name="cb">Callback implementing the LBMImmediateMessageCallback delegate interface</param>
            <param name="cbArg">Callback token object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.removeImmediateMessageReceiver(com.latencybusters.lbm.LBMImmediateMessageCallback)">
            <summary>
            Deregister a non-topic, immediate message callback		 
            </summary>
            <remarks>
            <seealso cref="M:com.latencybusters.lbm.LBMContext.enableImmediateMessageReceiver"/>
            <seealso cref="M:com.latencybusters.lbm.LBMContext.addImmediateMessageReceiver(com.latencybusters.lbm.LBMImmediateMessageCallback)"/>
            <seealso cref="T:com.latencybusters.lbm.LBMImmediateMessageCallback"/>
            </remarks>
            <param name="cb">Callback implementing the LBMImmediateMessageCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.removeImmediateMessageReceiver(com.latencybusters.lbm.LBMImmediateMessageCallback,System.Object)">
            <summary>
            Deregister a non-topic, immediate message callback		 
            </summary>
            <remarks>
            <seealso cref="M:com.latencybusters.lbm.LBMContext.enableImmediateMessageReceiver"/>
            <seealso cref="M:com.latencybusters.lbm.LBMContext.addImmediateMessageReceiver(com.latencybusters.lbm.LBMImmediateMessageCallback)"/>
            <seealso cref="T:com.latencybusters.lbm.LBMImmediateMessageCallback"/>
            </remarks>
            <param name="cb">Callback implementing the LBMImmediateMessageCallback delegate interface</param>
            <param name="cbArg">Callback token for previously registered callback</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.send(System.String,System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send a unicast immediate message to a specific topic
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            Possible OR'd set of flag value include:
            <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/> and <see cref="F:com.latencybusters.lbm.LBM.SRC_BLOCK"/>
            <para><b>Warning</b>: It is not safe to call this method from a context thread callback.</para>
            </remarks>
            <param name="target">Target address of the receiver of the form "TCP:ip:port"</param>
            <param name="topic">Topic name to send message to or null for non-topic</param>
            <param name="data">Data to send in this message</param>
            <param name="dataLength">Length (in bytes) of the data to send in this message</param>
            <param name="flags">Flags indicating various conditions.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.sendTopicless(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send a topicless unicast immediate message
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            Possible OR'd set of flag value include:
            <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/> and <see cref="F:com.latencybusters.lbm.LBM.SRC_BLOCK"/>
            <para><b>Warning</b>: It is not safe to call this method from a context thread callback.</para>
            </remarks>
            <param name="target">Target address of the receiver of the form "TCP:ip:port"</param>
            <param name="data">Data to send in this message</param>
            <param name="dataLength">Length (in bytes) of the data to send in this message</param>
            <param name="flags">Flags indicating various conditions.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.sendc(System.Char[],System.Char[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send a unicast immediate message to a specific topic
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            Possible OR'd set of flag value include:
            <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/> and <see cref="F:com.latencybusters.lbm.LBM.SRC_BLOCK"/>
            <para><b>Warning</b>: It is not safe to call this method from a context thread callback.</para>
            </remarks>
            <param name="target">Target address of the receiver of the form "TCP:ip:port"</param>
            <param name="topic">Topic name to send message to or null for non-topic</param>
            <param name="data">Data to send in this message</param>
            <param name="dataLength">Length (in bytes) of the data to send in this message</param>
            <param name="flags">Flags indicating various conditions.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.sendTopicless(System.Char[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send a topicless unicast immediate message
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            Possible OR'd set of flag value include:
            <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/> and <see cref="F:com.latencybusters.lbm.LBM.SRC_BLOCK"/>
            <para><b>Warning</b>: It is not safe to call this method from a context thread callback.</para>
            </remarks>
            <param name="target">Target address of the receiver of the form "TCP:ip:port"</param>
            <param name="data">Data to send in this message</param>
            <param name="dataLength">Length (in bytes) of the data to send in this message</param>
            <param name="flags">Flags indicating various conditions.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.send(System.String,System.String,com.latencybusters.lbm.LBMRequest,com.latencybusters.lbm.LBMEventQueue,System.Int32)">
            <summary>
            Send a unicast immediate request to a specific topic (specifying an	
            Event Queue for processing of the response(s))
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            Possible OR'd set of flag value include:
            <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/> and <see cref="F:com.latencybusters.lbm.LBM.SRC_BLOCK"/>
            <para><b>Warning</b>: It is not safe to call this method from a context thread callback.</para>
            </remarks>
            <param name="target">Target address of the receiver of the form "TCP:ip:port"</param>
            <param name="topic">Topic name to send message to or null for non-topic</param>
            <param name="lbmreq">LBMRequest object</param>
            <param name="lbmevq">LBMEventQueue on which to process responses (may be null if not using an event queue)</param>
            <param name="flags">Flags indicating various conditions</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.send(System.String,System.String,com.latencybusters.lbm.LBMRequest,System.Int32)">
            <summary>
            Send a unicast immediate request to a specific topic
            </summary>
            <remarks>
            Possible OR'd set of flag value include:
            <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/> and <see cref="F:com.latencybusters.lbm.LBM.SRC_BLOCK"/>
            <para><b>Warning</b>: It is not safe to call this method from a context thread callback.</para>
            </remarks>
            <param name="target">Target address of the receiver of the form "TCP:ip:port"</param>
            <param name="topic">Topic name to send message to or null for non-topic</param>
            <param name="lbmreq">LBMRequest object</param>
            <param name="flags">Flags indicating various conditions</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.send(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send a multicast immediate message to a specific topic
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            Possible OR'd set of flag value include:
            <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/>, <see cref="F:com.latencybusters.lbm.LBM.SRC_BLOCK"/>, and <see cref="F:com.latencybusters.lbm.LBM.MSG_FLUSH"/>
            <para><b>Warning</b>: It is not safe to call this method from a context thread callback.</para>
            </remarks>
            <param name="topic">Topic name to send message to or null for non-topic</param>
            <param name="data">Data to send in this message</param>
            <param name="dataLength">Length (in bytes) of the data to send in this message</param>
            <param name="flags">Flags indicating various conditions</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.sendc(System.Char[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send a multicast immediate message to a specific topic
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            Possible OR'd set of flag value include:
            <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/>, <see cref="F:com.latencybusters.lbm.LBM.SRC_BLOCK"/>, and <see cref="F:com.latencybusters.lbm.LBM.MSG_FLUSH"/>
            <para><b>Warning</b>: It is not safe to call this method from a context thread callback.</para>
            </remarks>
            <param name="topic">Topic name to send message to or null for non-topic</param>
            <param name="data">Data to send in this message</param>
            <param name="dataLength">Length (in bytes) of the data to send in this message</param>
            <param name="flags">Flags indicating various conditions</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.sendTopicless(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send a topicless multicast immediate message
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            Possible OR'd set of flag value include:
            <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/>, <see cref="F:com.latencybusters.lbm.LBM.SRC_BLOCK"/>, and <see cref="F:com.latencybusters.lbm.LBM.MSG_FLUSH"/>
            <para><b>Warning</b>: It is not safe to call this method from a context thread callback.</para>
            </remarks>
            <param name="data">Data to send in this message</param>
            <param name="dataLength">Length (in bytes) of the data to send in this message</param>
            <param name="flags">Flags indicating various conditions</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.send(System.String,com.latencybusters.lbm.LBMRequest,com.latencybusters.lbm.LBMEventQueue,System.Int32)">
            <summary>
            Send a multicast immediate request to a specific topic (specifying an
            Event Queue for processing of the response(s))
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            Possible OR'd set of flag value include:
            <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/>, <see cref="F:com.latencybusters.lbm.LBM.SRC_BLOCK"/>, and <see cref="F:com.latencybusters.lbm.LBM.MSG_FLUSH"/>
            <para><b>Warning</b>: It is not safe to call this method from a context thread callback.</para>
            </remarks>
            <param name="topic">Topic name to send message to or null for non-topic</param>
            <param name="lbmreq">LBMRequest object</param>
            <param name="lbmevq">LBMEventQueue on which to process responses (may be
            null if not using an event queue)</param>
            <param name="flags">Flags indicating various conditions</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.send(System.String,com.latencybusters.lbm.LBMRequest,System.Int32)">
            <summary>
            Send a multicast immediate request to a specific topic
            </summary>
            <remarks>
            Possible OR'd set of flag value include:
            <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/>, <see cref="F:com.latencybusters.lbm.LBM.SRC_BLOCK"/>, and <see cref="F:com.latencybusters.lbm.LBM.MSG_FLUSH"/>
            <para><b>Warning</b>: It is not safe to call this method from a context thread callback.</para>
            </remarks>
            <param name="topic">Topic name to send message to or null for non-topic</param>
            <param name="lbmreq">LBMRequest object</param>
            <param name="flags">Flags indicating various conditions</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.send(System.String,System.String,System.Byte[],System.Int32,System.Int32,com.latencybusters.lbm.LBMSourceSendExInfo)">
            <summary>
            Send a multicast immediate message on a specific topic to a queue. (UMQ only)
            </summary>
            <remarks>
            Possible OR'd set of flag value include:
            <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/>, <see cref="F:com.latencybusters.lbm.LBM.SRC_BLOCK"/>, and <see cref="F:com.latencybusters.lbm.LBM.MSG_FLUSH"/>
            <para><b>Warning</b>: It is not safe to call this method from a context thread callback.</para>
            </remarks>
            <param name="queue">Queue to submit message to</param>
            <param name="topic">Topic name to send message to or null for non-topic</param>
            <param name="data">Data to send in this message</param>
            <param name="dataLength">Length (in bytes) of the data to send in this message</param>
            <param name="flags">Flags indicating various conditions</param>
            <param name="exinfo">LBMSourceSendExInfo object, which includes flags to
            change callback behavior and a client-supplied object to be passed back.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.createTimer(System.Int64)">
            <summary>
            Create an LBM Timer object
            </summary>
            <remarks>
            References to timers created using this method are not maintained internally.  If the timer
            returned by this method goes out of scope and is reclaimed by the garbage collector, callbacks
            registered for this timer will not execute.  To create a timer with an internally maintained
            reference, see the <see cref="M:com.latencybusters.lbm.LBMContext.scheduleTimer(System.Int64)"/> method.
            </remarks>
            <param name="milliseconds">Number of milliseconds until the timer expires</param>
            <returns>LBMTimer object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.createTimer(System.Int64,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Creates a timer associated with this context and a specified event queue
            that expires with a specified delay.
            </summary>
            <remarks>
            References to timers created using this method are not maintained internally.  If the timer
            returned by this method goes out of scope and is reclaimed by the garbage collector, callbacks
            registered for this timer will not execute.  To create a timer with an internally maintained
            reference, see the <see cref="M:com.latencybusters.lbm.LBMContext.scheduleTimer(System.Int64)"/> method.
            </remarks>
            <param name="milliseconds">Number of milliseconds until the timer expires</param>
            <param name="lbmevq">Event queue with with which to associate this timer
            (the timer events will be posted to this event queue)</param>
            <returns>LBMTimer object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.createTimer(System.Int64,com.latencybusters.lbm.LBMTimerCallback,System.Object)">
            <summary>
            Creates a timer associated with this context that expires with
            specified delay.
            </summary>
            <remarks>
            References to timers created using this method are not maintained internally.  If the timer
            returned by this method goes out of scope and is reclaimed by the garbage collector, callbacks
            registered for this timer will not execute.  To create a timer with an internally maintained
            reference, see the <see cref="M:com.latencybusters.lbm.LBMContext.scheduleTimer(System.Int64)"/> method.
            </remarks>
            <param name="milliseconds">Number of milliseconds until the timer expires</param>
            <param name="cb">Callback implementing the LBMTimerCallback delegate interface</param>
            <param name="cbArg">Callback object passed as token to callback interface</param>
            <returns>LBMTimer object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.createTimer(System.Int64,com.latencybusters.lbm.LBMTimerCallback,System.Object,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Creates a timer associated with this context and a specified event queue
            that expires with a specified delay.
            </summary>
            <remarks>
            References to timers created using this method are not maintained internally.  If the timer
            returned by this method goes out of scope and is reclaimed by the garbage collector, callbacks
            registered for this timer will not execute.  To create a timer with an internally maintained
            reference, see the <see cref="M:com.latencybusters.lbm.LBMContext.scheduleTimer(System.Int64)"/> method.
            </remarks>
            <param name="milliseconds">Number of milliseconds until the timer expires</param>
            <param name="cb">Callback implementing the LBMTimerCallback delegate interface</param>
            <param name="cbArg">Callback object passed as token to callback interface</param>
            <param name="lbmevq">Event queue with with which to associate this timer
            (the timer events will be posted to this event queue)</param>
            <returns>LBMTimer object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.scheduleTimer(System.Int64)">
            <summary>
            Create an LBM Timer object and retains an internal reference to it.
            This prevents the timer from being reclaimed by the garbage collector before it expires.
            </summary>
            <remarks>
            See <see cref="M:com.latencybusters.lbm.LBMContext.createTimer(System.Int64)"/> to create a timer that will be reclaimed by the 
            garbage collector in the normal manner once it goes out of scope.
            </remarks>
            <param name="milliseconds">Number of milliseconds until the timer expires</param>
            <returns>LBMTimer object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.scheduleTimer(System.Int64,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Creates a timer associated with this context and a specified event queue
            that expires with a specified delay, and retains an internal reference to it.
            This prevents the timer from being reclaimed by the garbage collector before it expires.
            </summary>
            <remarks>
            See <see cref="M:com.latencybusters.lbm.LBMContext.createTimer(System.Int64)"/> to create a timer that will be reclaimed by the 
            garbage collector in the normal manner once it goes out of scope.
            </remarks>
            <param name="milliseconds">Number of milliseconds until the timer expires</param>
            <param name="lbmevq">Event queue with with which to associate this timer
            (the timer events will be posted to this event queue)</param>
            <returns>LBMTimer object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.scheduleTimer(System.Int64,com.latencybusters.lbm.LBMTimerCallback,System.Object)">
            <summary>
            Creates a timer associated with this context that expires with
            specified delay, and retains an internal reference to it.
            This prevents the timer from being reclaimed by the garbage collector before it expires.
            </summary>
            <remarks>
            See <see cref="M:com.latencybusters.lbm.LBMContext.createTimer(System.Int64)"/> to create a timer that will be reclaimed by the 
            garbage collector in the normal manner once it goes out of scope.
            </remarks>
            <param name="milliseconds">Number of milliseconds until the timer expires</param>
            <param name="cb">Callback implementing the LBMTimerCallback delegate interface</param>
            <param name="cbArg">Callback object passed as token to callback interface</param>
            <returns>LBMTimer object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.scheduleTimer(System.Int64,com.latencybusters.lbm.LBMTimerCallback,System.Object,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Creates a timer associated with this context and a specified event queue
            that expires with a specified delay.
            This prevents the timer from being reclaimed by the garbage collector before it expires.
            </summary>
            <remarks>
            See <see cref="M:com.latencybusters.lbm.LBMContext.createTimer(System.Int64)"/> to create a timer that will be reclaimed by the 
            garbage collector in the normal manner once it goes out of scope.
            </remarks>
            <param name="milliseconds">Number of milliseconds until the timer expires</param>
            <param name="cb">Callback implementing the LBMTimerCallback delegate interface</param>
            <param name="cbArg">Callback object passed as token to callback interface</param>
            <param name="lbmevq">Event queue with with which to associate this timer
            (the timer events will be posted to this event queue)</param>
            <returns>LBMTimer object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.createSource(com.latencybusters.lbm.LBMTopic)">
            <summary>
            Create an LBM Source object associated with this context and a given topic.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.
            </remarks>
            <param name="lbmtopic">LBMTopic used to initialize the source.</param>
            <returns>LBMSource object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.createSource(com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMSourceEventCallback,System.Object)">
            <summary>
            Create an LBM Source object associated with this context
            and a given topic.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.
            </remarks>
            <param name="lbmtopic">LBMTopic used to initialize the source</param>
            <param name="cb">Callback implementing the LBMSourceEventCallback delegate interface</param>
            <param name="cbArg">Callback token object</param>
            <returns>LBMSource object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.createSource(com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Create an LBM Source object associated with this given context
            and a given topic and event queue.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.
            </remarks>
            <param name="lbmtopic">LBMTopic used to initialize the source</param>
            <param name="lbmevq">vent queue with which to associate the source
            (all source events will be posted to this event queue)</param>
            <returns>LBMSource object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.createSource(com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMSourceEventCallback,System.Object,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Create an LBM Source object associated with this context
            and a given topic and event queue.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.
            </remarks>
            <param name="lbmtopic">LBMTopic used to initialize the source</param>
            <param name="cb">Callback implementing the LBMSourceEventCallback delegate interface</param>
            <param name="cbArg">Callback token object</param>
            <param name="lbmevq">Event queue with which to associate the source
            (all source events will be posted to this event queue)</param>
            <returns>LBMSource object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.createHotFailoverSource(com.latencybusters.lbm.LBMTopic)">
            <summary>
            Create an LBM Hot-Failover Source object associated with this context and a given topic.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.
            </remarks>
            <param name="lbmtopic">LBMTopic used to initialize the source.</param>
            <returns>LBMHotFailoverSource object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.createHotFailoverSource(com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMSourceEventCallback,System.Object)">
            <summary>
            Create an LBM Hot-Failover Source object associated with this context
            and a given topic.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.
            </remarks>
            <param name="lbmtopic">LBMTopic used to initialize the source</param>
            <param name="cb">Callback implementing the LBMSourceEventCallback delegate interface</param>
            <param name="cbArg">Callback token object</param>
            <returns>LBMHotFailoverSource object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.createHotFailoverSource(com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Create an LBM Hot-Failover Source object associated with this given context
            and a given topic and event queue.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.
            </remarks>
            <param name="lbmtopic">LBMTopic used to initialize the source</param>
            <param name="lbmevq">vent queue with which to associate the source
            (all source events will be posted to this event queue)</param>
            <returns>LBMHotFailoverSource object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.createHotFailoverSource(com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMSourceEventCallback,System.Object,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Create an LBM Hot-Failover Source object associated with this context
            and a given topic and event queue.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.
            </remarks>
            <param name="lbmtopic">LBMTopic used to initialize the source</param>
            <param name="cb">Callback implementing the LBMSourceEventCallback delegate interface</param>
            <param name="cbArg">Callback token object</param>
            <param name="lbmevq">Event queue with which to associate the source
            (all source events will be posted to this event queue)</param>
            <returns>LBMHotFailoverSource object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.createReceiver(com.latencybusters.lbm.LBMTopic)">
            <summary>
            Create an LBM Receiver object associated with this context
            and a given topic.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.
            </remarks>
            <param name="lbmtopic">LBMTopic used to initialize the receiver</param>
            <returns>LBMReceiver object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.createReceiver(com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Create an LBM Receiver object associated with this context
            and a given topic and event queue.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.
            </remarks>
            <param name="lbmtopic">LBMTopic used to initialize the receiver</param>
            <param name="lbmevq">Event queue with which to associate the receiver
            (all receiver events will be posted to this event queue)</param>
            <returns>LBMReceiver object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.createReceiver(com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMReceiverCallback,System.Object)">
            <summary>
            Create an LBM Receiver object associated with this context
            and a given topic.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.
            </remarks>
            <param name="lbmtopic">LBMTopic used to initialize the receiver</param>
            <param name="cb">Callback implementing the LBMReceiverCallback delegate interface</param>
            <param name="cbArg">Callback object passed as token to callback interface</param>
            <returns>LBMReceiver object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.createReceiver(com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMReceiverCallback,System.Object,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Create an LBM Receiver object associated with this context
            and a given topic and event queue.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.
            </remarks>
            <param name="lbmtopic">LBMTopic used to initialize the receiver</param>
            <param name="cb">Callback implementing the LBMReceiverCallback delegate interface</param>
            <param name="cbArg">Callback object passed as token to callback interface</param>
            <param name="lbmevq">Event queue with which to associate the receiver
            (all receiver events will be posted to this event queue)</param>
            <returns>LBMReceiver object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.createHotFailoverReceiver(com.latencybusters.lbm.LBMTopic)">
            <summary>
            Create an LBM Hot-Failover Receiver object associated with this context
            and a given topic.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.
            </remarks>
            <param name="lbmtopic">LBMTopic used to initialize the receiver</param>
            <returns>LBMHotFailoverReceiver object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.createHotFailoverReceiver(com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Create an LBM Hot-Failover Receiver object associated with this context
            and a given topic and event queue.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.
            </remarks>
            <param name="lbmtopic">LBMTopic used to initialize the receiver</param>
            <param name="lbmevq">Event queue with which to associate the receiver
            (all receiver events will be posted to this event queue)</param>
            <returns>LBMReceiver object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.createHotFailoverReceiver(com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMReceiverCallback,System.Object)">
            <summary>
            Create an LBM Hot-Failover Receiver object associated with this context
            and a given topic.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.
            </remarks>
            <param name="lbmtopic">LBMTopic used to initialize the receiver</param>
            <param name="cb">Callback implementing the LBMReceiverCallback delegate interface</param>
            <param name="cbArg">Callback object passed as token to callback interface</param>
            <returns>LBMHotFailoverReceiver object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.createHotFailoverReceiver(com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMReceiverCallback,System.Object,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Create an LBM Hot-Failover Receiver object associated with this context
            and a given topic and event queue.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.
            </remarks>
            <param name="lbmtopic">LBMTopic used to initialize the receiver</param>
            <param name="cb">Callback implementing the LBMReceiverCallback delegate interface</param>
            <param name="cbArg">Callback object passed as token to callback interface</param>
            <param name="lbmevq">Event queue with which to associate the receiver
            (all receiver events will be posted to this event queue)</param>
            <returns>LBMReceiver object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.addSourceNotifyCallback(com.latencybusters.lbm.LBMSourceNotification)">
            <summary>
            Register a callback interface to be
            called when a new source is seen for any topic.
            </summary>
            <remarks>
            This callback is
            called directly in line and does not use the event queue; therefore,
            the callback function used should not block or it will block the
            context thread processing.  This facility is disabled by default
            and may be enabled by calling the
            <see cref="M:com.latencybusters.lbm.LBMContextAttributes.enableSourceNotification"/>
            method prior to instantiation of LBMContext.
            <seealso cref="T:com.latencybusters.lbm.LBMSourceNotification"/>
            <seealso cref="M:com.latencybusters.lbm.LBMContext.removeSourceNotifyCallback(com.latencybusters.lbm.LBMSourceNotification)"/>
            </remarks>
            <param name="cb">Callback implementing the LBMSourceNotification delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.addSourceNotifyCallback(com.latencybusters.lbm.LBMSourceNotification,System.Object)">
            <summary>
            Register a callback interface (and a callback handle argument) to be
            called when a new source is seen for any topic.
            </summary>
            <remarks>
            This callback is
            called directly in line and does not use the event queue; therefore,
            the callback function used should not block or it will block the
            context thread processing.  This facility is disabled by default
            and may be enabled by calling the
            <see cref="M:com.latencybusters.lbm.LBMContextAttributes.enableSourceNotification"/>
            method prior to instantiation of LBMContext.
            <seealso cref="T:com.latencybusters.lbm.LBMSourceNotification"/>
            <seealso cref="M:com.latencybusters.lbm.LBMContext.removeSourceNotifyCallback(com.latencybusters.lbm.LBMSourceNotification)"/>
            </remarks>
            <param name="cb">Callback implementing the LBMSourceNotification delegate interface</param>
            <param name="cbArg">Callback object passed as a token to the callback interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.removeSourceNotifyCallback(com.latencybusters.lbm.LBMSourceNotification)">
            <summary>
            Deregister a source notification callback
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMSourceNotification"/>
            <seealso cref="M:com.latencybusters.lbm.LBMContext.addSourceNotifyCallback(com.latencybusters.lbm.LBMSourceNotification)"/>
            </remarks>
            <param name="cb">Previously registered callback implementing the
            LBMSourceNotification delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.getStatistics">
            <summary>
            Return the current set of statistics for this context
            </summary>
            <returns>LBMContextStatistics object containing the statistics
            corresponding to this context</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.resetStatistics">
            <summary>
            This will reset the statistics for this context at the c layer.
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.getSourceStatistics(System.Int32)">
            <summary>
            Return the aggregate set of source transport statistics for this context
            </summary>
            <param name="maxStats">Maximum number of sources</param>
            <returns>LBMReceiverStatistics object containing the statistics
            corresponding to the specified number of sources</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.resetSourceStatistics">
            <summary>
            This will reset the transport statistics for all sources in this context.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.getReceiverStatistics(System.Int32)">
            <summary>
            Return the aggregate set of receiver transport statistics for this context
            </summary>
            <param name="maxStats">Maximum number of sources</param>
            <returns>LBMReceiverStatistics object containing the statistics
            corresponding to the specified number of sources</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.resetReceiverStatistics">
            <summary>
            This will reset the transport stats for all receivers in this context.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.getImmediateMessageSourceStatistics(System.Int32)">
            <summary>
            Return the immediate message source statistics for this context.
            </summary>
            <param name="maxStats">Maximum number of sources</param>
            <returns>LBMImmediateMessageSourceStatistics object containing the statistics corresponding
            to this context</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.resetImmediateMessageSourceStatistics">
            <summary>
            This will reset the immediate message source transport statistics for this context.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.getImmediateMessageReceiverStatistics(System.Int32)">
            <summary>
            Return the immediate message source statistics for this context.
            </summary>
            <param name="maxStats">Maximum number of sources</param>
            <returns>LBMImmediateMessageSourceStatistics object containing the statistics corresponding
            to this context</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.resetImmediateMessageReceiverStatistics">
            <summary>
            Reset the immediate message receiver transport statistics for this context.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.getUMQInflight(System.String)">
            <summary>Get the current UMQ inflight value for this context</summary>
            <param name="queue">Name of the queue</param>
            <returns>the inflight value</returns>
            <exception ref="com.latencybusters.lbm.LBMException">if an error occurs while retrieving the inflight value</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.setUMQInflight(System.String,com.latencybusters.lbm.LBMSetInflightCallback,System.Object)">
            <summary>Set the current UMQ inflight value for this context</summary>
            <param name="queue">Name of the queue</param>
            <param name="cb">LBMSetInflightCallback delegate</param>
            <param name="cbObj">Client object passed into callback</param>
            <returns>the new inflight value</returns>
            <exception ref="com.latencybusters.lbm.LBMException">if an error occurs while setting the inflight value</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.setUMQMessageStable(System.String,com.latencybusters.lbm.UMQMessageId)">
            <summary>Mark a specific msg_id as stable, triggering an event if configured to do so, and adjusting the inflight if necessary</summary>
            <param name="queue">Name of the queue</param>
            <param name="msg_id">MessageId of the message to mark stable</param>
            <exception ref="com.latencybusters.lbm.LBMException">if an error occurs while marking the message stable</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.requestTopicResolution(System.UInt16,System.UInt32,System.UInt32)">
            <summary>
            Request Topic Advertisements (sources), Topic Queries (receivers),
            and/or Wildcard Topic Queries (wildcard receivers) in the configured topic
            resolution address domain.
            </summary>
            <remarks>
            Since Advertisements and Queries can become quiescent after a
            period defined by the Topic Resolution configuration attributes,
            this function will schedule Topic Resolution Requests at the given
            interval and duration. Contexts that receive these requests
            will respond with one advertisement per source and/or one
            query per receiver as appropriate. These requests
            will be ignored for topics that are not quiescent. Note that
            requests are only sent on the outgoing address and are only
            received on the incoming address. Responses to the request
            will similarly be sent only on the outgoing address.
            </remarks>
            <param name="flags">Flags indicating desired requests.  ORed set of values.
            <see cref="F:com.latencybusters.lbm.LBM.TOPIC_RES_REQUEST_ADVERTISEMENT"/> - Request advertisements from quiescent sources.
            <see cref="F:com.latencybusters.lbm.LBM.TOPIC_RES_REQUEST_QUERY"/> - Request queries from quiescent receivers.
            <see cref="F:com.latencybusters.lbm.LBM.TOPIC_RES_REQUEST_WILDCARD_QUERY"/> - Request queries from quiescent wildcard receivers.</param>
            <see cref="F:com.latencybusters.lbm.LBM.TOPIC_RES_REQUEST_CONTEXT_ADVERTISEMENT"/> - Request context advertisements from quiescent contexts.
            <see cref="F:com.latencybusters.lbm.LBM.TOPIC_RES_REQUEST_CONTEXT_QUERY"/> - Request context queries from quiescent contexts.
            <param name="interval_msec"> Interval between requests in milliseconds.  Less than 10 should be used with caution.  Less than 5 is not recommended.</param>
            <param name="duration_sec"> Minimum duration of requests in seconds.  Actual duration can be longer depending on the interval.  A value of zero will result in 1 request and the interval will be meaningless.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.removeSourceNotifyCallback(com.latencybusters.lbm.LBMSourceNotification,System.Object)">
            <summary>
            Deregister a source notification callback
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMSourceNotification"/>
            <seealso cref="M:com.latencybusters.lbm.LBMContext.addSourceNotifyCallback(com.latencybusters.lbm.LBMSourceNotification)"/>
            </remarks>
            <param name="cb">Previously registered callback implementing the
            LBMSourceNotification delegate interface</param>
            <param name="cbArg">Callback token for previously registered callback</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContext.Dispose">
            <summary>
            Same as <see cref="M:com.latencybusters.lbm.LBMContext.close"/>
            </summary>
            <remarks><seealso cref="M:com.latencybusters.lbm.LBMContext.close"/></remarks>
        </member>
        <member name="T:com.latencybusters.lbm.LBMSourceNotification">
            <summary>
            New source notification callback delegate
            </summary>
            <param name="topic">Topic string for available</param>
            <param name="source">String identifing source advertising on this topic</param>
            <param name="cbArg">Callback object token</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMContextEventCallback">
            <summary>Context event callback.</summary>
            <param name="cbArg">Callback object token </param>
            <param name="contextEvent">LBMContextEvent object encapsulating event </param>
            <returns> an int, which should always be 0. </returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMResolverEventCallback">
            <summary>Resolver event callback.</summary>
            <param name="cbArg">Callback object token </param>
            <param name="resolverEvent">LBMResolverEvent object encapsulating event </param>
            <returns> an int, which should always be 0. </returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMSourceCostCallback">
            <summary>
            Application callback to evaluate the cost of a newly discovered source.  Set via the context attributes
            setSourceCostCallback function.
            </summary>
            <param name="cbArg">Callback object token</param>
            <param name="topic">Topic for which the new source was discovered</param>
            <param name="transport">LBMTransportSourceInfo object describing the transport session</param>
            <param name="hop_count">Current hop count for the transport session</param>
            <param name="cost">Current cumulative cost for the transport session</param>
            <returns>Application-determined cost for this source as an unsigned 32-bit number.
            To permanently reject this source, return LBM.LBM_SRC_COST_FUNCTION_REJECT</returns>
        </member>
        <member name="T:com.latencybusters.lbm.UMEReceiverLivenessCreationCallback">
            <summary>
            Application callback to attain information about a new "connected" receiver.
            </summary>
            <param name="info">Information about the receiver whom has been declared "alive"</param>
            <param name="cbArg">Callback object token</param>
            <returns>User-supplied callback object passed in to corresponding <see cref="T:com.latencybusters.lbm.UMEReceiverLivenessDeletionCallback"/> callback.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.UMEReceiverLivenessDeletionCallback">
            <summary>
            Application callback to attain information about a previously "connected" receiver that has gone away.
            </summary>
            <param name="info">Information about the receiver whom has been declared "dead"</param>
            <param name="cbArg">Callback object token</param>
            <param name="srcCbArg">Callback object token returned by the corresponding <see cref="T:com.latencybusters.lbm.UMEReceiverLivenessCreationCallback"/>.</param>
            <returns></returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMContextAttributes">
            <summary>
            Encapsulates the set of default LBM context attributes.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.#ctor">
            <summary>
            Instantiate an LBMContextAttributes class
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.#ctor(System.String)">
            <summary>
            Instantiate an LBMContextAttributes class using a context name from the xml configuration that
            must have been previously loaded.  Use an empty string ("") to match a context without a name.
            </summary>
            <param name="contextName">Context name string. Is written into the attributes object.</param>
            <exception ref="com.latencybusters.lbm.LBMException">The contextName is not permitted by the XML configuration, or other unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.Finalize">
            <summary>
            LBMContextAttributes class finalization
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.Dispose">
            <summary>
            Free memory associated with this set of attributes.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.dispose">
            <summary>
            Free memory associated with this set of attributes (same as Dispose()). 
            <seealso cref="M:com.latencybusters.lbm.LBMContextAttributes.Dispose"/>
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.setFromXml(System.String)">
            <summary>
            Set values in an LBMContextAttributes class using a context name from the xml configuration that
            must have been previously loaded.  Use an empty string ("") to match a context without a name.
            </summary>
            <param name="contextName">Context name string. Is written into the attributes object.</param>
            <exception ref="com.latencybusters.lbm.LBMException">The contextName is not permitted by the XML configuration, or other unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.dumpAttributeList">
            <summary>
            Returns an array of context attributes in LBConfigOption 
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <returns>Returns an array of context attributes in LBConfigOption</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.getValue(System.String)">
            <summary>
            Returns the current value of an attribute from this set of context attributes.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to retrieve</param>
            <returns>Value corresponding to the specified attribute name</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.setValue(System.String,System.String)">
            <summary>
            Set the current value of an attribute in this set of
            context attributes.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to set</param>
            <param name="attributeValue">New attribute value</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.setSourceNotification(com.latencybusters.lbm.LBMSourceNotification,System.Object)">
            <summary>
            Set the callback and token to be used for source notifications.
            </summary>
            <param name="cb">The source notification callback</param>
            <param name="cbarg">The callback object token</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.clearSourceNotification">
            <summary>
            Clear the currently stored source notification callback and token
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.enableSourceNotification">
            <summary>
            Enable new source notifications.
            </summary>
            <remarks>
            New source notifications are delivered via the source notification
            callback set by <see cref="M:com.latencybusters.lbm.LBMContext.addSourceNotifyCallback(com.latencybusters.lbm.LBMSourceNotification)"/>.
            <seealso cref="M:com.latencybusters.lbm.LBMContext.addSourceNotifyCallback(com.latencybusters.lbm.LBMSourceNotification)"/>
            <seealso cref="M:com.latencybusters.lbm.LBMContextAttributes.disableSourceNotification"/>
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.disableSourceNotification">
            <summary>
            Disable new source notifications.
            </summary>
            <remarks>
            <seealso cref="M:com.latencybusters.lbm.LBMContextAttributes.enableSourceNotification"/>
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.setResolverEventCallback(com.latencybusters.lbm.LBMResolverEventCallback,System.Object)">
            <summary>
            Set the context event callback for an LBMContext.
            </summary>
            <param name="cb">
            A delegate of type LBMResolverEventCallback
            </param>
            <param name="cbArg">
            A token to be passed in to the callback when an event occurs
            </param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.setResolverEventCallback(com.latencybusters.lbm.LBMResolverEventCallback)">
            <summary>
            Set the context event callback for an LBMContext.
            </summary>
            <param name="cb">
            A delegate of type LBMResolverEventCallback
            </param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.setSourceCostCallback(com.latencybusters.lbm.LBMSourceCostCallback)">
            <summary>
            Set the source cost callback function for an LBMContext,
            which is an application callback to evaluate the cost of a newly discovered source
            </summary>
            <param name="cb">LBMSourceCostCallback callback delegate</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.setSourceCostCallback(com.latencybusters.lbm.LBMSourceCostCallback,System.Object)">
            <summary>
            Set the source cost callback function for an LBMContext,
            which is an application callback to evaluate the cost of a newly discovered source
            </summary>
            <param name="cb">LBMSourceCostCallback callback delegate</param>
            <param name="cbArg">Callback object token</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.setContextSourceEventCallback(com.latencybusters.lbm.LBMContextSourceEventCallback)">
            <summary>
            Set the context-level source event callback for an LBMContext.
            </summary>
            <param name="cb">LBMContextSourceEventCallback callback delegate.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.setContextSourceEventCallback(com.latencybusters.lbm.LBMContextSourceEventCallback,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Set the context-level source event callback for an LBMContext.
            </summary>
            <param name="cb">LBMContextSourceEventCallback callback delegate.</param>
            <param name="evq">LBMEventQueue on which to place context-level source events (can be null).</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.setContextSourceEventCallback(com.latencybusters.lbm.LBMContextSourceEventCallback,System.Object)">
            <summary>
            Set the context-level source event callback for an LBMContext.
            </summary>
            <param name="cb">LBMContextSourceEventCallback callback delegate.</param>
            <param name="cbArg">Callback object.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.setContextSourceEventCallback(com.latencybusters.lbm.LBMContextSourceEventCallback,System.Object,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Set the context-level source event callback for an LBMContext.
            </summary>
            <param name="cb">LBMContextSourceEventCallback callback delegate.</param>
            <param name="cbArg">Callback object.</param>
            <param name="evq">LBMEventQueue on which to place context-level source events (can be null).</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.setContextEventCallback(com.latencybusters.lbm.LBMContextEventCallback)">
            <summary>
            Set the context event callback for an LBMContext.
            </summary>
            <param name="cb">
            A delegate of type LBMContextEventCallback
            </param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.setContextEventCallback(com.latencybusters.lbm.LBMContextEventCallback,System.Object)">
            <summary>
            Set the context event callback for an LBMContext.
            </summary>
            <param name="cb">
            A delegate of type LBMContextEventCallback
            </param>
            <param name="cbArg">
            A token to be passed in to the callback when an event occurs
            </param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.setContextEventCallback(com.latencybusters.lbm.LBMContextEventCallback,System.Object,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Set the context event callback for an LBMContext.
            </summary>
            <param name="cb">
            A delegate of type LBMContextEventCallback
            </param>
            <param name="cbArg">
            A token to be passed in to the callback when an event occurs
            </param>
            <param name="evq">
            An event queue used to hold context events until the application is ready to process them
            </param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.setImmediateMessageCallback(com.latencybusters.lbm.LBMImmediateMessageCallback)">
            <summary>
            Set (and enable) the context callback for topic-less immediate mode messages.
            </summary>
            <param name="cb">LBMImmediateMessageCallback callback delegate.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.setImmediateMessageCallback(com.latencybusters.lbm.LBMImmediateMessageCallback,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Set (and enable) the context callback for topic-less immediate mode messages.
            </summary>
            <param name="cb">LBMImmediateMessageCallback callback delegate.</param>
            <param name="evq">LBMEventQueue on which to place received topic-less immediate-mode messages (can be null).</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.setImmediateMessageCallback(com.latencybusters.lbm.LBMImmediateMessageCallback,System.Object)">
            <summary>
            Set (and enable) the context callback for topic-less immediate mode messages.
            </summary>
            <param name="cb">LBMImmediateMessageCallback callback delegate.</param>
            <param name="cbArg">Callback object.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.setImmediateMessageCallback(com.latencybusters.lbm.LBMImmediateMessageCallback,System.Object,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Set (and enable) the context callback for topic-less immediate mode messages.
            </summary>
            <param name="cb">LBMImmediateMessageCallback callback delegate.</param>
            <param name="cbArg">Callback object.</param>
            <param name="evq">LBMEventQueue on which to place received topic-less immediate-mode messages (can be null).</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.setUMEReceiverLivenessNotificationCallbacks(com.latencybusters.lbm.UMEReceiverLivenessCreationCallback,com.latencybusters.lbm.UMEReceiverLivenessDeletionCallback,System.Object)">
            <summary>
            Set per receiver context liveness detection creation and deletion notification callback functions.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Both receiver liveness notification callbacks must be set or cleared at once.</exception>
            <exception ref="com.latencybusters.lbm.LBMException">Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer functions.</exception>
            <param name="creationCb">UME Receiver Liveness creation callback delegate</param>
            <param name="deletionCb">UME Reciever Liveness deletion callback delegate</param>
            <param name="cbArg">Client-supplied callback object.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.setObjectRecycler(com.latencybusters.lbm.LBMObjectRecyclerBase,System.Object)">
            <summary>
            Set the LBM object recycler that can be used by the context to reuse LBMMessage objects as
            well as LBM Context/Receiver/Source Statistics objects.
            </summary>
            <param name="objRec">an LBM object recycler that will be called when objects need to be retrieved</param>
            <param name="objRecCbArg">a callback object token that will be passed in the retrieve method</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.getObjectRecycler">
            <summary>
            Get the LBM object recycler
            </summary>
            <returns>The object recycler if one has been set</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.getObjectRecyclerCallbackArg">
            <summary>
            Get the LBM object recycler callback object token
            </summary>
            <returns>The object recycler callback object token that will be passed to retrieve methods</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextAttributes.wireUpSourceCostCallback(com.latencybusters.lbm.LBMContext._LBMSourceCostCallback)">
            <summary>
            This function will be called from the context constructor if a custom source callback function
            hass been set on the context attributes.
            </summary>
            <param name="internalSourceCostCallback">the internal source cost callback function on the context</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMContextStatistics">
            <summary>
            LBM Context Statistics
            </summary>
        </member>
        <member name="T:com.latencybusters.lbm.LBMStatistics">
            <summary>
            UM Transport Statistics base class
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMStatistics.getApplicationSourceId">
            <summary>
            Retrieve the application source identifier associated with
            this set of statistics.
            </summary>
            <remarks>
            This attribute is only set for statistics returned by the
            UM Monitoring framework.
            </remarks>
            <returns>Application source ID</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMStatistics.getSender">
            <summary>
            Retrieve the IP sender address associated with this set of
            statistics.
            </summary>
            <remarks>
            This attribute is only set for statistics returned by the
            UM Monitoring framework.
            </remarks>
            <returns>IPAddress object corresponding to the statistics'
            sender IP address</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMStatistics.getTimestamp">
            <summary>
            Retrieve the timestamp associated with this set of
            statistics.
            </summary>
            <remarks>
            This attribute is only set for statistics returned by the
            UM Monitoring framework.
            </remarks>remarks>
            <returns>DateTime object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMStatistics.getProcessId">
            <summary>
            Retrieve the sender process ID associated with
            this set of statistics.
            </summary>
            <remarks>
            This attribute is only set for statistics returned by the
            UM Monitoring framework.
            </remarks>
            <returns>Sender process ID</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMStatistics.getContextId">
            <summary>
            Retrieve the sender context ID associated with
            this set of statistics.
            </summary>
            <remarks>
            This attribute is only set for statistics returned by the
            UM Monitoring framework.
            </remarks>
            <returns>Sender context ID</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMStatistics.getObjectId">
            <summary>
            Retrieve the sender object ID associated with
            this set of statistics.
            </summary>
            <remarks>
            This attribute is only set for statistics returned by the
            UM Monitoring framework.
            </remarks>
            <returns>Sender object ID</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMStatistics.getSource">
            <summary>
            Retrieve the source attribute from the statistics attribute block
            associated with this set of statistics.
            </summary>
            <remarks>
            This attribute is only set for statistics returned by the
            UM Monitoring framework. Compare return value to 
            LBMMonitor.ATTR_SOURCE_NORMAL and LBMMonitor.ATTR_SOURCE_IM.
            </remarks>
            <returns>Sender source flag</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.#ctor">
            <summary>
            Instantiate an empty object containing no statistics.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.#ctor(com.latencybusters.lbm.LBMContext)">
            <summary>
            Instantiate an object containing the current set of
            statistics for a given context.
            </summary>
            <param name="lbmctx">LBMContext object to load statistics from.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.refresh(com.latencybusters.lbm.LBMContext)">
            <summary>
            Refresh the current set of statistics using the given lbm context.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="lbmctx">LBMContext object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.topicResolutionDatagramsSent">
            <summary>
            Number of topic resolution datagrams sent from this context.
            </summary>
            <returns>
            Number of topic resolution datagrams sent from this context. Each
            datagram can contain
            one or more advertisements, queries, query responses, etc. from source or receiver
            objects. A faster accumulation of counts typically indicates more source, receiver,
            and/or context objects are being created.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.topicResolutionBytesSent">
            <summary>
            Number of topic resolution datagram bytes sent.
            </summary>
            <returns>
            Number of topic resolution datagram bytes sent. This count is triggered under the
            same circumstances as datagrams sent (above), but measures the total number of bytes
            for all datagrams sent, including their headers.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.topicResolutionDatagramsReceived">
            <summary>
            Number of topic resolution datagrams received by this context.
            </summary>
            <returns>
            Number of topic resolution datagrams received by this context.
            Each datagram can contain
            one or more advertisements, queries, query responses, etc. from source or receiver
            objects. A faster accumulation of counts typically indicates more source, receiver,
            and/or context objects are being created.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.topicResolutionBytesReceived">
            <summary>
            Number of topic resolution datagram bytes received.
            </summary>
            <returns>
            Number of topic resolution datagram bytes received.
            This count is triggered under the
            same circumstances as datagrams received (above), but measures the total number of
            bytes for all datagrams received, including their headers.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.topicResolutionDatagramsDroppedVersion">
            <summary>
            Number of topic resolution datagrams discarded due to incorrect version.
            </summary>
            <returns>
            Number of topic resolution datagrams discarded due to incorrect version.
            The datagram's
            version field must match the expectations of the receiving context.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.topicResolutionDatagramsDroppedType">
            <summary>
            Number of topic resolution datagrams discarded due to incorrect type.
            </summary>
            <returns>Number of topic resolution datagrams discarded due to incorrect
            type. The datagram's type field must match the expectations of the
            receiving context.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.topicResolutionDatagramsDroppedMalformed">
            <summary>
            Number of topic resolution datagrams discarded due to being malformed.
            </summary>
            <returns>Number of topic resolution datagrams discarded due to being
            malformed or corrupted. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.topicResolutionDatagramsSendFailed">
            <summary>
            Number of topic resolution datagram sends that failed.
            </summary>
            <returns>Number of topic resolution datagram sends that failed.  This count
            should be at or at least near 0. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.topicResolutionSourceTopics">
            <summary>
            Total number of topics in the source topic resolver cache.
            </summary>
            <returns> Number of topics in the source topic resolver cache
            (also known as the topic map). Inordinately large or growing values here may
            impact performance.  </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.topicResolutionReceiverTopics">
            <summary>
            Total number of topics in the receiver topic resolver cache.
            </summary>
            <returns>Total number of topics in the receiver topic resolver cache (also
            referred to as the topic map). Inordinately large or growing values here
            may impact performance.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.topicResolutionUnresolvedReceiverTopics">
            <summary>
            Number of unresolved topics in the receiver topic resolver cache.
            </summary>
            <returns> Number of unresolved topics in the receiver topic resolver cache
            (aka topic map). Inordinately large or growing values here may impact
            performance, though this count can be close to the total number of topics in
            the resolver cache under normal conditions.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.lbtrmUnknownMessagesReceived">
            <summary>
            Number of LBT-RM datagrams received not belonging to any transport session.
            </summary>
            <returns>
            Number of LBT-RM datagrams received not belonging to any transport
            session. Such occurrences should be investigated. These datagrams can be
            from a source in a different topic resolution domain targeting the same group
            (or IP) and port as a source of interest on this receiver's topic resolution
            domain. Among less likely possibilities would be an attempt to spoof UM
            messages. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.lbtruUnknownMessagesReceived">
            <summary>
            Number of LBT-RU datagrams received not belonging to any transport session.
            </summary>
            <returns>
            Number of LBT-RU datagrams received not belonging to any transport session. Such
            occurrences should be investigated. These datagrams can be from a source in a
            different topic resolution domain targeting the same group (or IP) and port
            as a source of interest on this receiver's topic resolution domain. Among less
            likely possibilities would be an attempt to spoof UM messages.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.sendBlocked">
            <summary>
            Number of incidents where a UM send call was blocked.
            </summary>
            <returns>Number of incidents where a UM send call was blocked. Unusually
            high counts could indicate performance degradation or I/O problems.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.sendWouldBlock">
            <summary>
            Number of incidents where a UM send call returned EWOULDBLOCK.
            </summary>
            <returns>
            Number of incidents where a UM send call returned EWOULDBLOCK. This is when a send
            call set to be nonblocking encounters an error condition where it would otherwise be
            blocked. Under normal operating conditions, this count should be at or near 0.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.responseBlocked">
            <summary>
            Number of incidents where a UM send response call was blocked.
            </summary>
            <returns>Number of incidents where a UM send response call was blocked.
            Unusually high counts could indicate performance degradation or I/O problems.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.responseWouldBlock">
            <summary>
            Number of incidents where a UM send response call returned EWOULDBLOCK.
            </summary>
            <returns>
            Number of incidents where a UM send response call returned EWOULDBLOCK. This
            is when a send response call
            set to be nonblocking encounters an error condition where it would otherwise be
            blocked. Under normal operating conditions, this count should be at or near 0.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.unicastImmediateMessageDuplicatesReceived">
            <summary>
            Number of duplicate unicast immediate messages (UIMs) received and dropped.
            </summary>
            <returns>Number of duplicate unicast immediate messages (UIMs) received and dropped.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.unicastImmediateMessageNoStreamReceived">
            <summary>
            Number of unicast immediate messages (UIMs) received without stream information.
            </summary>
            <returns>Number of unicast immediate messages (UIMs) received without stream information.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.fragmentsLost">
            <summary>
            Number of fragments that have possibly been lost. This stat
            is incremented when a gap is detected by a receiver delivery controller. A
            delivery controller is created for every topic that has an interested
            receiver. This stat is not updated for gaps detected in responses,
            MIM transports, or UIMs. This stat will not be updated for hot-failover
            receivers with arrival-order delivery (i.e. option ordered_delivery set to
            0). SMX receivers are excluded from this stat. THIS FIELD IS UNSUPPORTED.
            </summary>
            <returns>Number of fragments possibly lost. THIS FIELD IS UNSUPPORTED.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.fragmentsUnrecoverablyLost">
            <summary>
            Number of fragments that have been declared
            as unrecoverably lost. This stat is incremented when
            LBM_MSG_UNRECOVERABLE_LOSS or LBM_MSG_UNRECOVERABLE_LOSS_BURST is
            delivered to an UM receiver callback. In the case of burst loss,
            the stat is incremented by the number of fragments lost in the burst
            event. This stat will not be updated for hot-failover receivers
            with arrival-order delivery (i.e. option ordered_delivery set to
            0). For hot-failover receivers, this stat may be updated while no
            actual LBM_MSG_UNRECOVERABLE_LOSS/LOSS_BURST messages are delivered
            to the application. In that case, one of the receivers underlying the
            hot-failover receivers had experienced unrecoverable loss, but the other
            underlying receiver was able to compensate. SMX receivers are excluded
            from this stat. THIS FIELD IS UNSUPPORTED.
            </summary>
            <returns>Number of fragments unrecoverably lost. THIS FIELD IS UNSUPPORTED.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.receiveCallbackServiceTimeMin">
            <summary>
            Minimum time (in milliseconds) spent in message delivery
            callbacks associated with LBM receivers, wildcard receivers, hot-failover
            receivers. For the Java and .NET APIs, the overhead time spent in crossing
            the managed/jni boundaries is included. This stat is only collected if
            the context option receiver_callback_service_time_enabled is set to 1. SMX
            receivers are excluded from these stats. THIS FIELD IS UNSUPPORTED.
            </summary>
            <returns>Minimum message delivery service time. THIS FIELD IS UNSUPPORTED.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.receiveCallbackServiceTimeMax">
            <summary>
            Maximum time (in milliseconds) spent in message delivery
            callbacks associated with LBM receivers, wildcard receivers, hot-failover
            receivers. For the Java and .NET APIs, the overhead time spent in crossing
            the managed/jni boundaries is included. This stat is only collected if
            the context option receiver_callback_service_time_enabled is set to 1. SMX
            receivers are excluded from these stats. THIS FIELD IS UNSUPPORTED.
            </summary>
            <returns>Maximum message delivery service time. THIS FIELD IS UNSUPPORTED.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.receiveCallbackServiceTimeMean">
            <summary>
            Mean time (in milliseconds) spent in message delivery
            callbacks associated with LBM receivers, wildcard receivers, hot-failover
            receivers. This is an exponentially weighted moving average (weighted
            to more recent). For the Java and .NET APIs, the overhead time spent
            in crossing the managed/jni boundaries is included. This stat is only
            collected if the context option receiver_callback_service_time_enabled
            is set to 1. SMX receivers are excluded from these stats. THIS FIELD IS
            UNSUPPORTED.
            </summary>
            <returns>Mean message delivery service time. THIS FIELD IS UNSUPPORTED.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.Dispose">
            <summary>
            Free memory associated with this set of statistics.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextStatistics.dispose">
            <summary>
            Free memory associated with this set of statistics (same as Dispose()). 
            <seealso cref="M:com.latencybusters.lbm.LBMContextStatistics.Dispose"/>
            </summary>
        </member>
        <member name="T:com.latencybusters.lbm.LBMHotFailoverReceiver">
            <summary>
            LBM Hot-Failover Receiver class.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to instantiate this class from a context thread callback. 
            </remarks>
        </member>
        <member name="T:com.latencybusters.lbm.LBMReceiver">
            <summary>
            LBM Receiver class.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to instantiate this class from a context thread callback. 
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.#ctor(com.latencybusters.lbm.LBMContext,com.latencybusters.lbm.LBMTopic)">
            <summary>
            Instantiate an LBM Receiver object associated with a given context and topic.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Topic is not a receiver topic</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Topic has single receiver callback mode enabled</exception>
            <remarks>ATTENTION: An application should have at least one receiver callback
            registered per receiver object.  Use of this constructor creates a window
            after receiver creation and before adding a callback in which
            messages may be lost; therefore, its using this constructor is not recommended.
            Use a constructor that specifies at least one initial callback instead.
            <para><b>Warning</b>: It is not safe to call this constructor from a context thread callback.</para>
            </remarks>
            <param name="lbmctx">Context with which to associate the receiver</param>
            <param name="lbmtopic">LBMTopic used to initialize the receiver</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.#ctor(com.latencybusters.lbm.LBMContext,com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Instantiate an LBM Receiver object associated with a given context,
            topic, and event queue
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Topic is not a receiver topic</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Topic has single receiver callback mode enabled</exception>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>ATTENTION: An application should have at least one receiver callback
            registered per receiver object.  Use of this constructor creates a window
            after receiver creation and before adding a callback in which
            messages may be lost; therefore, its using this constructor is not recommended.
            Use a constructor that specifies at least one initial callback instead.
            <para><b>Warning</b>: It is not safe to call this constructor from a context thread callback.</para>
            </remarks>
            <param name="lbmctx">Context with which to associate the receiver</param>
            <param name="lbmtopic">LBMTopic used to initialize the receiver</param>
            <param name="lbmevq">Event queue with which to associate the receiver
            (all receiver events will be posted to this event queue)</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.#ctor(com.latencybusters.lbm.LBMContext,com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMReceiverCallback,System.Object)">
            <summary>
            Instantiate an LBM Receiver object associated with a given context
            and topic, with an initial receiver callback and callback object set.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Topic is not a receiver topic</exception>
            <remarks>
            <para><b>Warning</b>: It is not safe to call this constructor from a context thread callback.</para>
            </remarks>
            <param name="lbmctx">Context with which to associate the receiver</param>
            <param name="lbmtopic">LBMTopic used to initialize the receiver</param>
            <param name="cb">Callback implementing the LBMReceiverCallback delegate interface</param>
            <param name="cbArg">Callback object passed as token to callback interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.#ctor(com.latencybusters.lbm.LBMContext,com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMReceiverCallback,System.Object,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Instantiate an LBM Receiver object associated with a given context,
            topic, and event queue, with an initial receiver callback and callback object set.
            </summary>
            <remarks>
            <para><b>Warning</b>: It is not safe to call this constructor from a context thread callback.</para>
            </remarks>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Topic is not a receiver topic</exception>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="lbmctx">Context with which to associate the receiver</param>
            <param name="lbmtopic">LBMTopic used to initialize the receiver</param>
            <param name="cb">Callback implementing the LBMReceiverCallback delegate interface</param>
            <param name="cbArg">Callback object passed as token to callback interface</param>
            <param name="lbmevq">Event queue with which to associate the receiver
            (all receiver events will be posted to this event queue)</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.#ctor(com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMReceiverCallback,System.Object)">
            <summary>
            This constructor meant for inherited classes that need to 
            initialize the readonly singleReceiverCallback stuff, i.e. LBMHotFailoverReceiver
            </summary>
            <param name="lbmtopic"></param>
            <param name="cb"></param>
            <param name="cbArg"></param>
            <param name="lbmevq"></param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.Finalize">
            <summary>
            LBMReceiver finalization
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.close">
            <summary>
            Close and dispose of this receiver
            </summary>
            <remarks>
            <para><b>Warning</b>: It is not safe to call this method from a context thread callback.</para>
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.receiverCount">
            <summary>
            Returns the number of receiver callbacks registered to this receiver
            </summary>
            <returns>The number of receiver callbacks registered to this receiver.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.addReceiver(com.latencybusters.lbm.LBMReceiverCallback)">
            <summary>
            Register a receiver callback
            </summary>
            <remarks>
            If the single receiver callback mode is enabled, this API has no effect
            and will log a warning if invoked.
            <seealso cref="T:com.latencybusters.lbm.LBMReceiverCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMReceiver.removeReceiver(com.latencybusters.lbm.LBMReceiverCallback)"/>
            </remarks>
            <param name="cb">Callback implementing the LBMReceiverCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.addReceiver(com.latencybusters.lbm.LBMReceiverCallback,System.Object)">
            <summary>
            Register a receiver callback
            </summary>
            <remarks>
            If the single receiver callback mode is enabled, this API has no effect
            and will log a warning if invoked.
            <seealso cref="T:com.latencybusters.lbm.LBMReceiverCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMReceiver.removeReceiver(com.latencybusters.lbm.LBMReceiverCallback)"/>
            </remarks>
            <param name="cb">Callback implementing the LBMReceiverCallback delegate interface</param>
            <param name="cbArg">Callback token object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.removeReceiver(com.latencybusters.lbm.LBMReceiverCallback)">
            <summary>
            Deregister a receiver callback
            </summary>
            <remarks>
            If the single receiver callback mode is enabled, this API has no effect
            and will log a warning if invoked.
            <seealso cref="T:com.latencybusters.lbm.LBMReceiverCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMReceiver.addReceiver(com.latencybusters.lbm.LBMReceiverCallback)"/>
            </remarks>
            <param name="cb">Previously registered callback implementing the
            LBMReceiverCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.removeReceiver(com.latencybusters.lbm.LBMReceiverCallback,System.Object)">
            <summary>
            Deregister a receiver callback (and callback token)
            </summary>
            <remarks>
            If the single receiver callback mode is enabled, this API has no effect
            and will log a warning if invoked.
            <seealso cref="T:com.latencybusters.lbm.LBMReceiverCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMReceiver.addReceiver(com.latencybusters.lbm.LBMReceiverCallback)"/>
            </remarks>
            <param name="cb">Previously registered callback implementing the
            LBMReceiverCallback delegate interface</param>
            <param name="cbArg">Callback token for previously registered callback</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.dumpAttributeList">
            <summary>
            Dump source configuration options
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <returns>An array of LBMConfigOptions</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.getAttributeValue(System.String)">
            <summary>
            Returns the value of a receiver-related attribute for this receiver
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to retrieve</param>
            <returns>Value corresponding to the specified attribute name</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.setAttributeValue(System.String,System.String)">
            <summary>
            Set the value of a receiver-related attribute for this receiver
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to set</param>
            <param name="attributeValue">New attribute value</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.getStatistics(System.String)">
            <summary>
            Return the current set of receiver transport statistics for a particular source
            </summary>
            <param name="source">Source string (as returned by LBMMesage source())
            that specifies the set of statistics to return</param>
            <returns>LBMReceiverStatistics object containing the statistics
            corresponding to the specified source</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.resetStatistics(System.String)">
            <summary>
            Reset the current set of receiver transport statistics for a particular source.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="source">The string version of the source to reset statistics for.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.getStatistics(System.Int32)">
            <summary>
            Return the current set of receiver transport statistics for all sources
            </summary>
            <param name="maxStats">Maximum number of sources</param>
            <returns>LBMReceiverStatistics object containing the statistics
            corresponding to the specified number of sources</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.resetStatistics">
            <summary>
            Reset the receiver transport statistics for all sources.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.subscribeChannel(System.Int64,com.latencybusters.lbm.LBMReceiverCallback,System.Object)">
             <summary>
             Subscribe to the given channel, with an optional callback and token object.
             The specified callback will be called to deliver messages sent with the 
             specified channel number.  If null is specified for the callback, messages
             sent with the specified channel number will be delivered to the receiver's
             normal callback.
            
             Only one callback may be registered for a given channel.  If this method is called
             twice with the same channel number, an error will result.
             </summary>
             <param name="channelNumber">A positive integer indicating the channel to subscribe to</param>
             <param name="cb">An option callback to be called for messages on the specified channel</param>
             <param name="cbArg">A token to be passed to the specified callback. If null is specified for the cb argument, this argument will be ignored.</param> 
             <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.  Most likely due to attempting to subscribe to a channel for which a subscription already exists.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.unsubscribeChannel(System.Int64)">
            <summary> Discontinue an existing channel subscription. </summary>
            <param name="channelNumber">A positive integer indicating that channel to unsubscribe from</param>
            <exception ref="com.latencybusters.lbm.LBMException">Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.  Most likely due to attempting to unsubscribe from a channel that was not previously subscribed to</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.umederegister">
            <summary> Deregister from all stores. </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> An error occurred while attempting to deregister </exception> 
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.deregister">
            <summary> Deregister from all queues. </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> An error occurred while attempting to deregister </exception> 
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.deregister(System.String)">
            <summary> Deregister from a single queue, specified by name. </summary>
            <param name="queue">The queue to deregister from </param>
            <exception ref="com.latencybusters.lbm.LBMException"> An error occurred while attempting to deregister </exception> 
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.indexStopAssignment(System.String)">
            <summary>Stops this receiver's eligibility for new index assignments from a queue.</summary>
            <param name="queue">The name of the queue to stop new index assignment from, or null for all queues.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.indexStartAssignment(System.String)">
            <summary>Starts this receiver's eligibility for new index assignments from a queue.</summary>
            <param name="queue">The name of the queue to start new index assignment from, or null for all queues.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.indexRelease(System.String,com.latencybusters.lbm.UMQIndexInfo)">
            <summary>Instruct the given UMQ queue(s) to release the given UMQ index that is assigned to the given receiver.</summary>
            <param name="queue">Name of the queue at which to release the index, or null for all queues.</param>
            <param name="index">The index to release, or null for all indices.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiver.Dispose">
            <summary>
            Same as <see cref="M:com.latencybusters.lbm.LBMReceiver.close"/>
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks><seealso cref="M:com.latencybusters.lbm.LBMReceiver.close"/></remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHotFailoverReceiver.#ctor(com.latencybusters.lbm.LBMContext,com.latencybusters.lbm.LBMTopic)">
            <summary>
            Instantiate an LBM Hot-Failover Receiver object associated with a given context and topic.
            </summary>
            <remarks>ATTENTION: An application should have at least one receiver callback
            registered per receiver object.  Use of this constructor creates a window
            after receiver creation and before adding a callback in which
            messages may be lost; therefore, its using this constructor is not recommended.
            Use a constructor that specifies at least one initial callback instead.
            <b>Warning</b>: It is not safe to call this constructor from a context thread callback.</remarks>
            <param name="lbmctx">Context with which to associate the receiver</param>
            <param name="lbmtopic">LBMTopic used to initialize the receiver</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHotFailoverReceiver.#ctor(com.latencybusters.lbm.LBMContext,com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Instantiate an LBM Hot-Failover Receiver object associated with a given context,
            topic, and event queue
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Topic is not a receiver topic</exception>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>ATTENTION: An application should have at least one receiver callback
            registered per receiver object.  Use of this constructor creates a window
            after receiver creation and before adding a callback in which
            messages may be lost; therefore, its using this constructor is not recommended.
            Use a constructor that specifies at least one initial callback instead.
            <b>Warning</b>: It is not safe to call this constructor from a context thread callback.</remarks>
            <param name="lbmctx">Context with which to associate the receiver</param>
            <param name="lbmtopic">LBMTopic used to initialize the receiver</param>
            <param name="lbmevq">Event queue with which to associate the receiver
            (all receiver events will be posted to this event queue)</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHotFailoverReceiver.#ctor(com.latencybusters.lbm.LBMContext,com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMReceiverCallback,System.Object)">
            <summary>
            Instantiate an LBM Hot-Failover Receiver object associated with a given context
            and topic, with an initial receiver callback and callback object set.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this constructor from a context thread callback.
            </remarks>
            <param name="lbmctx">Context with which to associate the receiver</param>
            <param name="lbmtopic">LBMTopic used to initialize the receiver</param>
            <param name="cb">Callback implementing the LBMReceiverCallback delegate interface</param>
            <param name="cbArg">Callback object passed as token to callback interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHotFailoverReceiver.#ctor(com.latencybusters.lbm.LBMContext,com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMReceiverCallback,System.Object,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Instantiate an LBM Hot-Failover Receiver object associated with a given context,
            topic, and event queue, with an initial receiver callback and callback object set.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Topic is not a receiver topic</exception>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            <b>Warning</b>: It is not safe to call this constructor from a context thread callback.
            </remarks>
            <param name="lbmctx">Context with which to associate the receiver</param>
            <param name="lbmtopic">LBMTopic used to initialize the receiver</param>
            <param name="cb">Callback implementing the LBMReceiverCallback delegate interface</param>
            <param name="cbArg">Callback object passed as token to callback interface</param>
            <param name="lbmevq">Event queue with which to associate the receiver
            (all receiver events will be posted to this event queue)</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHotFailoverReceiver.subscribeChannel(System.Int64,com.latencybusters.lbm.LBMReceiverCallback,System.Object)">
            <summary>
            Channel functionality is not currently supported by hot failover receivers.  Calling this method will result in an exception.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException">Thrown if this method is called on a Hot Failover receiver. </exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHotFailoverReceiver.unsubscribeChannel(System.Int64)">
            <summary>
            Channel functionality is not currently supported by hot failover receivers.  Calling this method will result in an exception.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException">Thrown if this method is called on a Hot Failover receiver. </exception>
        </member>
        <member name="T:com.latencybusters.lbm.LBMHotFailoverSource">
            <summary>
            LBM Hot-Failover Source class.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to instantiate this object from a context thread.
            </remarks>
        </member>
        <member name="T:com.latencybusters.lbm.LBMSource">
            <summary>
            LBM Source class.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to instantiate this object from a context thread.
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.#ctor(com.latencybusters.lbm.LBMContext,com.latencybusters.lbm.LBMTopic)">
            <summary>
            Instantiate an LBM Source object associated with a given context
            and topic
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this constructor from a context thread callback.
            </remarks>
            <param name="lbmctx">Context with which to associate the source</param>
            <param name="lbmtopic">LBMTopic used to initialize the source</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.#ctor(com.latencybusters.lbm.LBMContext,com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMSourceEventCallback,System.Object)">
            <summary>
            Instantiate an LBM Source object associated with a given context
            and topic and initialize source event callback
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this constructor from a context thread callback.
            </remarks>
            <param name="lbmctx">Context with which to associate the source</param>
            <param name="lbmtopic">LBMTopic used to initialize the source</param>
            <param name="cb">Callback implementing the LBMSourceEventCallback delegate interface</param>
            <param name="cbArg">Callback token object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.#ctor(com.latencybusters.lbm.LBMContext,com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Instantiate an LBM Source object associated with a given context,
            topic, and event queue
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this constructor from a context thread callback.
            </remarks>
            <param name="lbmctx">Context with which to associate the source</param>
            <param name="lbmtopic">LBMTopic used to initialize the source</param>
            <param name="lbmevq">Event queue with which to associate the source
            (all source events will be posted to this event queue)</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.#ctor(com.latencybusters.lbm.LBMContext,com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMSourceEventCallback,System.Object,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Instantiate an LBM Source object associated with a given context,
            topic, and event queue and initialize source event callback
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this constructor from a context thread callback.
            </remarks>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Topic is not a source topic</exception>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="lbmctx">Context with which to associate the source</param>
            <param name="lbmtopic">LBMTopic used to initialize the source</param>
            <param name="cb">Callback implementing the LBMSourceEventCallback delegate interface</param>
            <param name="cbArg">Callback token object</param>
            <param name="lbmevq">Event queue with which to associate the source</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.Finalize">
            <summary>
            LBMSource finalization
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.close">
            <summary>
            Close and dispose of this source
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.umederegister">
            <summary>
            Deregister the UME Source
            </summary>
            <returns>
            Void
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.isClosed">
            <summary>
            Check if a source has been closed
            </summary>
            <returns>
            A bool that is true if the source no longer points to a valid C reference
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.createChannel(System.Int64)">
            <summary>
            Create a channel object to send messages with the given channel number.
            </summary>
            <param name="channelNumber">Channel number in the range 0-4294967295</param>
            <returns>A new LBMSourceChannelInfo object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.deleteChannel(com.latencybusters.lbm.LBMSourceChannelInfo)">
            <summary>
            Deletea channel object
            </summary>
            <param name="channelInfo">A channelInfo object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.addSourceCallback(com.latencybusters.lbm.LBMSourceEventCallback)">
            <summary>
            Register a source event callback
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMSourceEventCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMSource.removeSourceCallback(com.latencybusters.lbm.LBMSourceEventCallback)"/>
            </remarks>
            <param name="cb">Callback implementing the LBMSourceEventCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.addSourceCallback(com.latencybusters.lbm.LBMSourceEventCallback,System.Object)">
            <summary>
            Register a source event callback (and callback token)
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMSourceEventCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMSource.removeSourceCallback(com.latencybusters.lbm.LBMSourceEventCallback)"/>
            </remarks>
            <param name="cb">Callback implementing the LBMSourceEventCallback delegate interface</param>
            <param name="cbArg">Callback token object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.removeSourceCallback(com.latencybusters.lbm.LBMSourceEventCallback)">
            <summary>
            Deregister a source event callback
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMSourceEventCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMSource.addSourceCallback(com.latencybusters.lbm.LBMSourceEventCallback)"/>
            </remarks>
            <param name="cb">Previously registered callback implementing the
            LBMSourceEventCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.removeSourceCallback(com.latencybusters.lbm.LBMSourceEventCallback,System.Object)">
            <summary>
            Deregister a source event callback
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMSourceEventCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMSource.addSourceCallback(com.latencybusters.lbm.LBMSourceEventCallback)"/>
            </remarks>
            <param name="cb">Previously registered callback implementing the
            LBMSourceEventCallback delegate interface</param>
            <param name="cbArg">Callback token object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.dumpAttributeList">
            <summary>
            Dump source configuration options
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <returns>An array of LBMConfigOptions</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.getAttributeValue(System.String)">
            <summary>
            Returns the value of a source-related attribute for this source
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to retrieve</param>
            <returns>Value corresponding to the specified attribute name</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.setAttributeValue(System.String,System.String)">
            <summary>
            Set the value of a source-related attribute for this source
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to set</param>
            <param name="attributeValue">New attribute value</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.getStatistics">
            <summary>
            Return the current set of source transport statistics for this source
            </summary>
            <returns>LBMSourceStatistics object containing the statistics
            corresponding to this source</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.resetStatistics">
            <summary>
            This will reset the transport statistics for this source.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.getInflight(System.Int32)">
            <summary>Get the current inflight value for this source</summary>
            <param name="type">The type of flight size</param>
            <returns>the inflight value</returns>
            <exception ref="com.latencybusters.lbm.LBMException">if an error occurs while retrieving the inflight value</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.setInflight(System.Int32,com.latencybusters.lbm.LBMSetInflightCallback,System.Object)">
            <summary>Set the current inflight value for this source</summary>
            <param name="type">The type of flight size</param>
            <param name="cb">LBMSetInflightCallback delegate</param>
            <param name="cbObj">Client object passed into callback</param>
            <returns>the new inflight value</returns>
            <exception ref="com.latencybusters.lbm.LBMException">if an error occurs while setting the inflight value</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.getInflight(System.Int32,System.Int32@,System.UInt64@)">
            <summary>
            Get the current inflight values for message and bytes.
            </summary>
            <param name="type">The type of flight size</param>
            <param name="messages">This reference will be set to the current number of inflight messages.</param>
            <param name="bytes">This reference will be set to the current number of inflight bytes.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.setInflight(System.Int32,System.Int32@,System.UInt64@,com.latencybusters.lbm.LBMSetInflightCallbackEx,System.Object)">
            <summary>
            Set the current inflight messages and bytes for this source. Note that increasing one value while decreasing the other is not allowed. 
            If you need to do this, call setInflight twice using 0 as the value for the one you are not changing.
            </summary>
            <param name="type">The type of flight size</param>
            <param name="messages">This reference will be set to the new number of inflight messages</param>
            <param name="bytes">This reference will be set to the new number of inflight bytes</param>
            <param name="cb">Delegate called when appropriate locking is held to let the application safely set set values</param>
            <param name="cbObj">Client object passed into the callback</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.setUMEMessageStable(System.Int64)">
            <summary>Mark a specific sqn as stable, triggering an event if configured to do so, and adjusting the inflight if necessary</summary>
            <param name="sqn">Sqn of the fragment to mark stable</param>
            <exception ref="com.latencybusters.lbm.LBMException">if an error occurs while marking the fragment stable</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.send(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send a message to the topic associated with the LBM source
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            <b>Caution</b>: It is not recommended to call this method from a context thread callback.
            <para><b>Warning</b> (UME only): Calling this method from a context thread
            callback for stability and confirmation events could cause a
            deadlock.</para>
            <para>
            Possible OR'd set of flag value include:
            </para>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/>,
            <see cref="F:com.latencybusters.lbm.LBM.SRC_BLOCK"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_START_BATCH"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_END_BATCH"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_COMPLETE_BATCH"/>, and
            <see cref="F:com.latencybusters.lbm.LBM.MSG_FLUSH"/>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_MESSAGE_STABLE"/>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_DELIVERY_CONFIRMATION"/>
            </remarks>
            <param name="message">Data to send in this message</param>
            <param name="messageLength">Number of bytes of data to send in this message</param>
            <param name="flags">Flags indicating various conditions</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.send(System.Byte[],System.Int32,System.Int32,System.Object)">
            <summary>
            Send a message to the topic associated with the LBM source
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Certified delivery notification is not enabled</exception>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            <b>Caution</b>: It is not recommended to call this method from a context thread callback.
            <para><b>Warning</b> (UME only): Calling this method from a context thread
            callback for stability and confirmation events could cause a
            deadlock.</para>
            <para>
            Possible OR'd set of flag value include:
            </para>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/>,
            <see cref="F:com.latencybusters.lbm.LBM.SRC_BLOCK"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_START_BATCH"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_END_BATCH"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_COMPLETE_BATCH"/>, and
            <see cref="F:com.latencybusters.lbm.LBM.MSG_FLUSH"/>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_MESSAGE_STABLE"/>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_DELIVERY_CONFIRMATION"/>
            </remarks>
            <param name="message">Data to send in this message</param>
            <param name="messageLength">Number of bytes of data to send in this message</param>
            <param name="flags">Flags indicating various conditions</param>
            <param name="cbArg">Client object to be passed back in stability or
            confirmation events related to this message (UME only)</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.send(System.Byte[],System.Int32,System.Int32,com.latencybusters.lbm.LBMSourceSendExInfo)">
            <summary>
            Send a message to the topic associated with the LBM source
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Confirmed delivery or message stability notifications are not enabled</exception>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            <b>Caution</b>: It is not recommended to call this method from a context thread callback.
            <para><b>Warning</b> (UME only): Calling this method from a context thread
            callback for stability and confirmation events could cause a
            deadlock.</para>
            <para>
            Possible OR'd set of flag value include:
            </para>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/>,
            <see cref="F:com.latencybusters.lbm.LBM.SRC_BLOCK"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_START_BATCH"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_END_BATCH"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_COMPLETE_BATCH"/>, and
            <see cref="F:com.latencybusters.lbm.LBM.MSG_FLUSH"/>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_MESSAGE_STABLE"/>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_MESSAGE_STABLE_EX"/>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_DELIVERY_CONFIRMATION"/>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_DELIVERY_CONFIRMATION_EX"/>
            </remarks>
            <param name="message">Data to send in this message</param>
            <param name="messageLength">Number of bytes of data to send in this message</param>
            <param name="flags">Flags indicating various conditions</param>
            <param name="exinfo">LBMSourceSendExInfo object, which includes flags to
            change callback behavior and a client-supplied object to be passed back. (UME only)</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.send(com.latencybusters.lbm.LBMRequest,System.Int32)">
            <summary>
            Send a request message to the topic associated with the LBM source
            </summary>
            <remarks>
            <b>Caution</b>: It is not recommended to call this method from a context thread callback.
            <para>Possible OR'd set of flag value include:</para>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/>,
            <see cref="F:com.latencybusters.lbm.LBM.SRC_BLOCK"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_START_BATCH"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_END_BATCH"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_COMPLETE_BATCH"/>, and
            <see cref="F:com.latencybusters.lbm.LBM.MSG_FLUSH"/>
            </remarks>
            <param name="lbmreq">LBMRequest object</param>
            <param name="flags">Flags indicating various conditions</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.send(com.latencybusters.lbm.LBMRequest,com.latencybusters.lbm.LBMEventQueue,System.Int32)">
            <summary>
            Send a request message to the topic associated with the LBM source
            using a designated event queue for responses
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            <b>Caution</b>: It is not recommended to call this method from a context thread callback.
            <para>Possible OR'd set of flag value include:</para>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/>,
            <see cref="F:com.latencybusters.lbm.LBM.SRC_BLOCK"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_START_BATCH"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_END_BATCH"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_COMPLETE_BATCH"/>, and
            <see cref="F:com.latencybusters.lbm.LBM.MSG_FLUSH"/>
            </remarks>
            <param name="lbmreq">LBMRequest object</param>
            <param name="lbmevq">LBMEventQueue used to handle response messages</param>
            <param name="flags">Flags indicating various conditions</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.send(com.latencybusters.lbm.LBMRequest,System.Int32,com.latencybusters.lbm.LBMSourceSendExInfo)">
            <summary>
            Send a request message to the topic associated with the LBM source
            using an designated event queue for responses
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            <b>Caution</b>: It is not recommended to call this method from a context thread callback.
            <para>Possible OR'd set of flag value include:</para>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/>,
            <see cref="F:com.latencybusters.lbm.LBM.SRC_BLOCK"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_START_BATCH"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_END_BATCH"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_COMPLETE_BATCH"/>, and
            <see cref="F:com.latencybusters.lbm.LBM.MSG_FLUSH"/>
            </remarks>
            <param name="lbmreq">LBMRequest object</param>
            <param name="flags">Flags indicating various conditions</param>
            <param name="exinfo">LBMSourceSendExInfo object, which includes flags to
            change callback behavior and a client-supplied object to be passed back. (UME only)</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.send(com.latencybusters.lbm.LBMRequest,com.latencybusters.lbm.LBMEventQueue,System.Int32,com.latencybusters.lbm.LBMSourceSendExInfo)">
            <summary>
            Send a request message to the topic associated with the LBM source
            using an designated event queue for responses
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            <b>Caution</b>: It is not recommended to call this method from a context thread callback.
            <para>Possible OR'd set of flag value include:</para>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/>,
            <see cref="F:com.latencybusters.lbm.LBM.SRC_BLOCK"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_START_BATCH"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_END_BATCH"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_COMPLETE_BATCH"/>, and
            <see cref="F:com.latencybusters.lbm.LBM.MSG_FLUSH"/>
            </remarks>
            <param name="lbmreq">LBMRequest object</param>
            <param name="lbmevq">LBMEventQueue used to handle response messages</param>
            <param name="flags">Flags indicating various conditions</param>
            <param name="exinfo">LBMSourceSendExInfo object, which includes flags to
            change callback behavior and a client-supplied object to be passed back. (UME only)</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.flush">
            <summary>
            Send messages from both the explicit and implicit batches ASAP.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            <b>Warning</b> (UME only): Calling this method from a context thread
            callback for stability and confirmation events could cause a
            deadlock.
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.buffAcquire(System.IntPtr@,System.UInt32,System.Int32)">
            <summary>
            Acquire a pointer to a buffer of the specified length, to be filled in and sent later.
            <b>Warning</b>: this API is NOT thread safe between sources on the same transport session.
            For thread safety, use the <see cref="M:com.latencybusters.lbm.LBMSource.send(System.Byte[],System.Int32,System.Int32)"/> api.
            </summary>
            <param name="bufp">A pointer to the location in memory availble for writing to.</param>
            <param name="len">The request length of the buffer in bytes</param>
            <param name="flags">Set to <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/> for non-blocking behavior. Default is blocking.</param>
            <returns>0 if successful, -1 if send would block and non-blocking sends were requested.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.buffsComplete">
            <summary>
            Sends all buffers on a transport session that had ben previously acquired.
            <b>Warning</b>: this API is NOT thread safe between sources on the same transport session.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.buffsCompleteAndAcquire(System.IntPtr@,System.UInt32,System.Int32)">
            <summary>
            First sends all buffers on a transport session that had ben previously acquired, and 
            then acquires a pointer to a buffer of the specified length, to be filled in and sent later.
            <b>Warning</b>: this API is NOT thread safe between sources on the same transport session.
            </summary>
            <param name="bufp">A pointer to the location in memory availble for writing to.</param>
            <param name="len">The request length of the buffer in bytes</param>
            <param name="flags">Set to <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/> for non-blocking behavior. Default is blocking.</param>
            <returns>0 if successful, -1 if send would block and non-blocking sends were requested.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.buffsCancel">
            <summary>
            Cancels all outstanding (not yet completed) buffers previously acquired using <see cref="M:com.latencybusters.lbm.LBMSource.buffAcquire(System.IntPtr@,System.UInt32,System.Int32)"/>
            or <see cref="M:com.latencybusters.lbm.LBMSource.buffsCompleteAndAcquire(System.IntPtr@,System.UInt32,System.Int32)"/>. All such acquired but not completed buffers for this source (only)
            will no longer be received by any receives.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSource.Dispose">
            <summary>
            Same as <see cref="M:com.latencybusters.lbm.LBMSource.close"/>
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks><seealso cref="M:com.latencybusters.lbm.LBMSource.close"/></remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHotFailoverSource.#ctor(com.latencybusters.lbm.LBMContext,com.latencybusters.lbm.LBMTopic)">
            <summary>
            Instantiate an LBM Hot-Failover Source object associated with a given context
            and topic.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this constructor from a context thread callback.
            </remarks>
            <param name="lbmctx">Context with which to associate the source</param>
            <param name="lbmtopic">LBMTopic used to initialize the source</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHotFailoverSource.#ctor(com.latencybusters.lbm.LBMContext,com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMSourceEventCallback,System.Object)">
            <summary>
            Instantiate an LBM Hot-Failover Source object associated with a given context
            and topic and initialize source event callback.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this constructor from a context thread callback.
            </remarks>
            <param name="lbmctx">Context with which to associate the source</param>
            <param name="lbmtopic">LBMTopic used to initialize the source</param>
            <param name="cb">Callback implementing the LBMSourceEventCallback delegate interface</param>
            <param name="cbArg">Callback token object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHotFailoverSource.#ctor(com.latencybusters.lbm.LBMContext,com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Instantiate an LBM Hot-Failover Source object associated with a given context,
            topic, and event queue.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this constructor from a context thread callback.
            </remarks>
            <param name="lbmctx">Context with which to associate the source</param>
            <param name="lbmtopic">LBMTopic used to initialize the source</param>
            <param name="lbmevq">Event queue with which to associate the source
            (all source events will be posted to this event queue)</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHotFailoverSource.#ctor(com.latencybusters.lbm.LBMContext,com.latencybusters.lbm.LBMTopic,com.latencybusters.lbm.LBMSourceEventCallback,System.Object,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Instantiate an LBM Hot-Failover Source object associated with a given context,
            topic, and event queue and initialize source event callback.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this constructor from a context thread callback.
            </remarks>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Topic is not a source topic</exception>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="lbmctx">Context with which to associate the source</param>
            <param name="lbmtopic">LBMTopic used to initialize the source</param>
            <param name="cb">Callback implementing the LBMSourceEventCallback delegate interface</param>
            <param name="cbArg">Callback token object</param>
            <param name="lbmevq">Event queue with which to associate the source</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHotFailoverSource.send(System.Byte[],System.Int32,System.Int64,System.Int32)">
            <summary>
            Send a message to the topic associated with the LBM source
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            <b>Caution</b>: It is not recommended to call this method from a context thread callback.
            <para>Possible OR'd set of flag value include:</para>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/>,
            <see cref="F:com.latencybusters.lbm.LBM.SRC_BLOCK"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_START_BATCH"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_END_BATCH"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_COMPLETE_BATCH"/>, and
            <see cref="F:com.latencybusters.lbm.LBM.MSG_FLUSH"/>
            </remarks>
            <param name="message">Data to send in this message</param>
            <param name="messageLength">Number of bytes of data to send in this message</param>
            <param name="sqn">The application sequence number to associate with this message</param>
            <param name="flags">Flags indicating various conditions</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHotFailoverSource.send(System.Byte[],System.Int32,System.Int64,System.Int32,com.latencybusters.lbm.LBMSourceSendExInfo)">
            <summary>
            Send a message to the topic associated with the LBM source
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Confirmed delivery or message stability notifications are not enabled</exception>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            <b>Caution</b>: It is not recommended to call this method from a context thread callback.
            <para><b>Warning</b> (UME only): Calling this method from a context thread
            callback for stablity and confirmation events could cause a
            deadlock.</para>
            <para>
            Possible OR'd set of flag value include:
            </para>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/>,
            <see cref="F:com.latencybusters.lbm.LBM.SRC_BLOCK"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_START_BATCH"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_END_BATCH"/>,
            <see cref="F:com.latencybusters.lbm.LBM.MSG_COMPLETE_BATCH"/>, and
            <see cref="F:com.latencybusters.lbm.LBM.MSG_FLUSH"/>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_MESSAGE_STABLE"/>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_MESSAGE_STABLE_EX"/>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_DELIVERY_CONFIRMATION"/>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_EVENT_UME_DELIVERY_CONFIRMATION_EX"/>
            </remarks>
            <param name="message">Data to send in this message</param>
            <param name="messageLength">Number of bytes of data to send in this message</param>
            <param name="sqn">The application sequence number to associate with this message</param>
            <param name="flags">Flags indicating various conditions</param>
            <param name="exinfo">LBMSourceSendExInfo object, which includes flags to
            change callback behavior and a client-supplied object to be passed back. (UME only)</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHotFailoverSource.sendReceiverReset(System.Int32,com.latencybusters.lbm.LBMSourceSendExInfo)">
             <summary>
            	Send a message that instructs hot-failover receivers to reset their state. In, and only in, the case that hf receivers
            	cannot be manually restarted, this function can be used to allow delivering of previously sent sequence numbers. The
            	hot-failover receiver will deliver a message of type LBM.MSG_HF_RESET and will include the new expected sequence number.
            	The sequence number contained with the reset will be used as the next expected sequence number to be sent.
            
             NOTE: The best way to reset a hot-failover receiver's state is to restart the receiver itself. This function should be used
            	only when that is impossible. 
             </summary>
             <remarks>
             <b>Caution</b>: It is not recommended to call this method from a context thread callback.
             <para>
             <b>Warning</b> (UME only): Calling this method from a context thread
             callback for stablity and confirmation events could cause a deadlock.
             </para>
             Hot failover send flags on the exinfo parameter
             <see cref="F:com.latencybusters.lbm.LBM.SRC_SEND_EX_FLAG_HF_32"/>, or
             <see cref="F:com.latencybusters.lbm.LBM.SRC_SEND_EX_FLAG_HF_64"/>
             </remarks>
             <exception ref="com.latencybusters.lbm.LBMEInvalException">Exinfo was null, Confirmed delivery or message stability notifications are not enabled</exception>
             <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception> 
             <param name="flags">Flags indicating various send conditions</param>
             <param name="exinfo">Send ex info containing hf reset sequence number</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMHFXAttributes">
            <summary>
            Encapsulates the set of default LBM HFX attributes
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFXAttributes.#ctor">
            <summary>
            Instantiate LBMHFXAttributes class
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFXAttributes.#ctor(System.String)">
            <summary>
            Instantiate an LBMHFXAttributes class using a topic name from the xml configuration that
            must have been previously loaded.
            </summary>
            <param name="topicName">The topic name string that will be used to create the LBMHFX object.</param>
            <exception ref="com.latencybusters.lbm.LBMException">The HFX topic name is not permitted by XML configuration or other unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFXAttributes.Finalize">
            <summary>
            LBMHFXAttributes class finalization
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFXAttributes.Dispose">
            <summary>
            Free memory associated with this set of attributes.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFXAttributes.dispose">
            <summary>
            Free memory associated with this set of attributes (same as Dispose()). 
            <seealso cref="M:com.latencybusters.lbm.LBMHFXAttributes.Dispose"/>
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFXAttributes.setFromXml(System.String)">
            <summary>
            Set values in an LBMHFXAttributes class using a topic name from the xml configuration that
            must have been previously loaded.
            </summary>
            <param name="topicName">The topic name string that will be used to create the LBMHFX object.</param>
            <exception ref="com.latencybusters.lbm.LBMException">The HFX topic name is not permitted by XML configuration or other unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFXAttributes.dumpAttributeList">
            <summary>
            Dump HFX configuration options
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <returns>An array of LBMConfigOptions</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFXAttributes.getValue(System.String)">
            <summary>
            Returns the current value of an attribute from this set of
            HFX attributes
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to retrieve</param>
            <returns>Value corresponding to the specified attribute name</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFXAttributes.setValue(System.String,System.String)">
            <summary>
            Set the current value of an attribute in this set of
            HFX attributes
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to set</param>
            <param name="attributeValue">New attribute value</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFXAttributes.setObjectRecycler(com.latencybusters.lbm.LBMObjectRecyclerBase,System.Object)">
            <summary>
            Set the LBM object recycler that can be used by the context to reuse LBMMessage objects as
            well as LBM Context/Receiver/Source Statistics objects.
            </summary>
            <param name="objRec">an LBM object recycler that will be called when objects need to be retrieved</param>
            <param name="objRecCbArg">a callback object token that will be passed in the retrieve method</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFXAttributes.getObjectRecycler">
            <summary>
            Get the LBM object recycler
            </summary>
            <returns>The object recycler if one has been set</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFXAttributes.getObjectRecyclerCallbackArg">
            <summary>
            Get the LBM object recycler callback object token
            </summary>
            <returns>The object recycler callback object token that will be passed to retrieve methods</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMHFX">
            <summary>
            Creates an LBM HFX object.
            </summary>
            <remarks>
            This creates an instance of the LBM HFX object, used to combine multiple
            hot failover streams on different LBMContexts into a single message stream.
            An HFX object can be used to create LBMHFXReceivers, which receive hot
            failover messages on a single context and deliver them to the HFX object.
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFX.#ctor(System.String,com.latencybusters.lbm.LBMReceiverCallback)">
            <summary>
            Instantiate an LBMHFX object using default attributes.
            </summary>
            <param name="topic">The topic to be used for receivers created using this HFX object.</param>
            <param name="cb">The callback to be invoked for messages received by this HFX object.</param>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFX.#ctor(System.String,com.latencybusters.lbm.LBMReceiverCallback,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Instantiate an LBMHFX object using default attributes and specifying an event queue to be used to deliver messages.
            </summary>
            <param name="topic">The topic to be used for receivers created using this HFX object.</param>
            <param name="cb">The callback to be invoked for messages received by this HFX object.</param>
            <param name="evq">LBM Event Queue to be used when delivering messages.</param>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFX.#ctor(com.latencybusters.lbm.LBMHFXAttributes,System.String,com.latencybusters.lbm.LBMReceiverCallback)">
            <summary>
            Instantiate an LBMHFX object using user-specified attributes.
            </summary>
            <param name="attr">A set of attributes that determine the behavior of the LBMHFX to be created</param>
            <param name="topic">The topic to be used for receivers created using this HFX object.</param>
            <param name="cb">The callback to be invoked for messages received by this HFX object.</param>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFX.#ctor(com.latencybusters.lbm.LBMHFXAttributes,System.String,com.latencybusters.lbm.LBMReceiverCallback,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Instantiate an LBMContext object using user-specified attributes, and specifying an event queue. 
            </summary>
            <param name="attr">A set of attributes that determine the behavior of the LBMHFX to be created</param>
            <param name="topic">The topic to be used for receivers created using this HFX object.</param>
            <param name="cb">The callback to be invoked for messages received by this HFX object.</param>
            <param name="evq">LBM Event Queue to be used when delivering messages.</param>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFX.dumpAttributeList">
            <summary>
            Dump HFX configuration options
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <returns>An array of LBMConfigOptions</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFX.close">
            <summary>
            Close and dispose of this HFX object.  All HFXReceiver objects created using this HFX object should be closed before calling this method.
            <para><b>Warning</b>: It is not safe to call this method from a context thread callback.</para>
            </summary>
            <remarks>
            The underlying objects may take some time to be deleted.  To be informed when deletion is complete, call <see cref="M:com.latencybusters.lbm.LBMHFX.close(com.latencybusters.lbm.LBMOperationCompleteCallback,System.Object)"/>
            </remarks>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFX.close(com.latencybusters.lbm.LBMOperationCompleteCallback,System.Object)">
            <summary>
            Close and dispose of this HFX object.  All HFXReceiver objects created using this HFX object should be closed before calling this method.
            <para><b>Warning</b>: It is not safe to call this method from a context thread callback.</para>
            </summary>
            <param name="cb">A callback to be delivered when the close() operation is complete</param>
            <param name="cbArg">A token to be delivered with the callback</param>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFX.onReceive(System.Object,com.latencybusters.lbm.LBMMessage)">
            <summary>
            Called when a new message is delivered 
            </summary>
            <param name="cbArg">The token passed in when the receiver delivering the message was created</param>
            <param name="msg">LBMMessage object encapsulating the message data received.</param>
            <returns>An integer.  Returning -1 from a user callback will result in a log message.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFX.createReceiver(com.latencybusters.lbm.LBMContext,com.latencybusters.lbm.LBMReceiverAttributes,System.Object)">
            <summary> Create a receiver on the specified context, with the specified attributes and callback token. A hot failover receiver is created on the specified context with the attributes passed in.  Some attributes related to message delivery may be overridden (e.g. duplicate delivery will be enabled if it is enabled on the HFX object. </summary>
            <param name="ctx"> Context on which to create the receiver.</param>
            <param name="rattr"> Attributes to be used for the receiver.</param>
            <param name="cbArg"> Callback token to be associated with messages delivered through the newly created receiver.</param>
            <returns>A new LBMHFXReceiver object associated with the given LBMContext.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFX.getAttributeValue(System.String)">
            <summary>
            Returns the value of a HFX-related attribute for this HFX.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to retrieve</param>
            <returns>Value corresponding to the specified attribute name</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFX.setAttributeValue(System.String,System.String)">
            <summary>
            Set the value of a HFX-related attribute for this HFX.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            Note that this method bypasses the property list.
            As such no attributes configured using this method will appear in
            the property list.
            </remarks>
            <param name="attributeName">Name of the attribute to set</param>
            <param name="attributeValue">New attribute value</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMHFXReceiver">
            <summary>
            The LBMHFXReceiver object is used to associate an LBMHFX object with an LBMContext.  Messages are delivered by each LBMHFXReceiver to the LBMHFX object, which handles dropping duplicates and ordering messages.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFXReceiver.dumpAttributeList">
            <summary>
            Dump receiver configuration options
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <returns>An array of LBMConfigOptions</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFXReceiver.getAttributeValue(System.String)">
            <summary>
            Returns the value of a receiver-related attribute for this receiver
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to retrieve</param>
            <returns>Value corresponding to the specified attribute name</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFXReceiver.setAttributeValue(System.String,System.String)">
            <summary>
            Set the value of a receiver-related attribute for this receiver
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to set</param>
            <param name="attributeValue">New attribute value</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFXReceiver.getStatistics(System.String)">
            <summary>
            Return the current set of receiver transport statistics for a particular
            source.
            </summary>
            <param name="source">Source string (as returned by LBMMesage source())
            that specifies the set of statistics to return.
            </param>
            <returns> LBMReceiverStatistics object containing the statistics
            corresponding to the specified source.
            </returns>
            <exception ref="com.latencybusters.lbm.LBMException">
            An error occurred retrieving receiver statistics.
            </exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFXReceiver.getStatistics(System.Int32)">
            <summary>
            Return the current set of receiver transport statistics for all
            sources.
            </summary>
            <param name="maxStats"> Maxiumum number of sources </param>
            <returns> LBMReceiverStatistics object containing the statistics
            corresponding to the specified number of sources.
            </returns>
            <exception ref="com.latencybusters.lbm.LBMException">
            An error occurred retrieving receiver statistics.
            </exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFXReceiver.close">
            <summary>
            Close this receiver.
            Call <see cref="M:com.latencybusters.lbm.LBMHFXReceiver.close(com.latencybusters.lbm.LBMOperationCompleteCallback,System.Object)"/> to be informed when the delete call has completed.
            </summary>
            <remarks>
            <para><b>Warning</b>: It is not safe to call this method from a context thread callback.</para>
            </remarks>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMHFXReceiver.close(com.latencybusters.lbm.LBMOperationCompleteCallback,System.Object)">
            <summary>
            Close and dispose of this HFXReceiver object.  
            <para><b>Warning</b>: It is not safe to call this method from a context thread callback.</para>
            </summary>
            <param name="cb">A callback to be delivered when the delete operation is complete.</param>
            <param name="cbArg">A token to be delivered with the callback</param>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="T:com.latencybusters.lbm.LBMEInvalException">
            <summary>
            LBM Invalid value exception class
            </summary>
        </member>
        <member name="T:com.latencybusters.lbm.LBMException">
            <summary>
            Base LBM Exception class
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMException.#ctor(System.Int32,System.String)">
            <summary>
            Instantiate an LBMException class
            </summary>
            <param name="errnum">Exception error number</param>
            <param name="errorMessage">Exception error message</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMException.errorNumber">
            <summary>
            Get LBM error number
            </summary>
            <returns>LBM error number</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEInvalException.#ctor(System.String)">
            <summary>
            Instantiate LBMEInvalException class
            </summary>
            <param name="errorMessage">Exception error message</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMENoMemException">
            <summary>
            LBM memory allocation exception class
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMENoMemException.#ctor(System.String)">
            <summary>
            Instantiate LBMENoMemException class
            </summary>
            <param name="errorMessage">Exception error message</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMEOPException">
            <summary>
            LBM internal processing exception class
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEOPException.#ctor(System.String)">
            <summary>
            Instantiate LBMEOPException class
            </summary>
            <param name="errorMessage">Exception error message</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMEOSException">
            <summary>
            LBM unrecoverable OS system call exception class
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEOSException.#ctor(System.String)">
            <summary>
            Instantiate LBMEOSException class
            </summary>
            <param name="errorMessage">Exception error message</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMETimedOutException">
            <summary>
            LBM timed out operation exception class
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMETimedOutException.#ctor(System.String)">
            <summary>
            Instantiate LBMETimedOutException class
            </summary>
            <param name="errorMessage">Exception error message</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMEWouldBlockException">
            <summary>
            LBM blocked operation exception class (occurs when a function that would otherwise block is set
            to be nonblocking)
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEWouldBlockException.#ctor(System.String)">
            <summary>
            Instantiate LBMEWouldBlockException class
            </summary>
            <param name="errorMessage">Exception error message</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMEventQueueCallback">
            <summary>
            Event queue callback delegate
            </summary>
            <param name="cbArg">Callback object token</param>
            <param name="eventType">Type of event</param>
            <param name="eventQueueSize">Current queue size (number of messages)</param>
            <param name="eventQueueDelay">Queuing delay (in microseconds) associated with the first message on the event queue</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMEventQueue">
            <summary>
            LBM Event Queue class.  This class may be subclassed to override the default
            event queue monitoring method or an LBMEventQueueCallback interface may be
            specified to handle the monitor callback.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueue.#ctor">
            <summary>
            Instantiate an LBM Event Queue object using default attributes.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueue.#ctor(com.latencybusters.lbm.LBMEventQueueAttributes)">
            <summary>
            Instantiate an LBM Event Queue object using the given attributes.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="lbmevqattr">LBMEventQueueAttributes used to initialize the event queue</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueue.Finalize">
            <summary>
            LBMEventQueue finalization
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueue.close">
            <summary>
            Close and dispose of this event queue
            </summary>
            <remarks>
            Since this method deletes the underlying LBM event queue object, it
            should not be called prior to closing or canceling of its dependent
            objects (e.g., LBMSource, LBMReceiver, LBMRequest, LBMTimer).
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueue.size">
            <summary>
            Determine the number of queued events in the event queue
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            This method is only supported when the queue_size_warning config variable is set. 
            If not set, then this function will throw an exception with an error number == LBM.EINVAL.		
            </remarks>
            <returns>Number of events queued on the event queue.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueue.shutdown">
            <summary>
            Shutdown the event queue by purging any pending events and not allowing additional events to be added to the queue
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <returns>Always returns 0 although an exception may be thrown in
            event of an error.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueue.getAttributeValue(System.String)">
            <summary>
            Returns the value of an event queue-related attribute for this event queue
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to retrieve</param>
            <returns>Value corresponding to the specified attribute name</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueue.dumpAttributeList">
            <summary>
            Dump source configuration options
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <returns>An array of LBMConfigOptions</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueue.setAttributeValue(System.String,System.String)">
            <summary>
            Set the value of an event queue-related attribute for this event queue.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to set</param>
            <param name="attributeValue">New attribute value</param>
        </member>
        <member name="F:com.latencybusters.lbm.LBMEventQueue.maxIterationRunTime">
            <summary>
            Maximum number of milliseconds that the event queue dispatcher should spend inside of the
            C level dispatcher at any particular time.  This is an internal framework tuning parameter and
            should not be changed.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueue.run(System.Int64)">
            <summary>
            Dispatch waiting events to the appropriate callback methods.
            </summary>
            <param name="milliseconds">Number of milliseconds to block before returning.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueue.stop">
            <summary>
            Signal any threads dispatching the event queue to return as soon as possible. 
            </summary>
            <remarks><seealso cref="M:com.latencybusters.lbm.LBMEventQueue.run(System.Int64)"/></remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueue.addMonitor(com.latencybusters.lbm.LBMEventQueueCallback)">
            <summary>
            Register a monitor callback
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMEventQueueCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMEventQueue.removeMonitor(com.latencybusters.lbm.LBMEventQueueCallback)"/>
            </remarks>
            <param name="cb">Callback implementing the LBMEventQueueCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueue.addMonitor(com.latencybusters.lbm.LBMEventQueueCallback,System.Object)">
            <summary>
            Register a monitor callback
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMEventQueueCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMEventQueue.removeMonitor(com.latencybusters.lbm.LBMEventQueueCallback)"/>
            </remarks>
            <param name="cb">Callback implementing the LBMEventQueueCallback delegate interface</param>
            <param name="cbArg">Callback token object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueue.removeMonitor(com.latencybusters.lbm.LBMEventQueueCallback)">
            <summary>
            Deregister a monitor callback
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMEventQueueCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMEventQueue.addMonitor(com.latencybusters.lbm.LBMEventQueueCallback)"/>
            </remarks>
            <param name="cb">Previously registered callback implementing the
            LBMEventQueueCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueue.removeMonitor(com.latencybusters.lbm.LBMEventQueueCallback,System.Object)">
            <summary>
            Deregister a monitor callback
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMEventQueueCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMEventQueue.addMonitor(com.latencybusters.lbm.LBMEventQueueCallback)"/>
            </remarks>
            <param name="cb">Previously registered callback implementing the
            LBMEventQueueCallback delegate interface</param>
            <param name="cbArg">Token for previously registered callback</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueue.getStatistics">
            <summary>
            Return the current set of statistics for this context.
            </summary>
            <returns>LBMEventQueueStatistics object containing the statistics corresponding to this event queue.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueue.resetStatistics">
            <summary>
            This will reset the statistics for this event queue.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>        
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueue.Dispose">
            <summary>
            Same as <see cref="M:com.latencybusters.lbm.LBMEventQueue.close"/>
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks><seealso cref="M:com.latencybusters.lbm.LBMEventQueue.close"/></remarks>
        </member>
        <member name="T:com.latencybusters.lbm.LBMEventQueueAttributes">
            <summary>
            Encapsulates the set of default LBM event queue attributes
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueAttributes.#ctor">
            <summary>
            Instantiate LBMEventQueueAttributes class
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueAttributes.#ctor(System.String)">
            <summary>
            Instantiate an LBMEventQueueAttributes class using an event queue name from the xml configuration that
            must have been previously loaded.
            </summary>
            <param name="eventQueueName">Event queue name string. Is written into the attributes object.</param>
            <exception ref="com.latencybusters.lbm.LBMException">The event queue name is not permitted by the XML configuration or other unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueAttributes.Finalize">
            <summary>
            LBMEventQueueAttributes class finalization
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueAttributes.Dispose">
            <summary>
            Free memory associated with this set of attributes.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueAttributes.dispose">
            <summary>
            Free memory associated with this set of attributes (same as Dispose()). 
            <seealso cref="M:com.latencybusters.lbm.LBMEventQueueAttributes.Dispose"/>
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueAttributes.setFromXml(System.String)">
            <summary>
            Set values in an LBMEventQueueAttributes class using an event queue name from the xml configuration that
            must have been previously loaded.
            </summary>
            <param name="eventQueueName">Event queue name string. Is written into the attributes object.</param>
            <exception ref="com.latencybusters.lbm.LBMException">The event queue name is not permitted by the XML configuration or other unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueAttributes.dumpAttributeList">
            <summary>
            Dump source configuration options
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <returns>An array of LBMConfigOptions</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueAttributes.getValue(System.String)">
            <summary>
            Returns the current value of an attribute from this set of
            event queue attributes
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to retrieve</param>
            <returns>Value corresponding to the specified attribute name</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueAttributes.setValue(System.String,System.String)">
            <summary>
            Set the current value of an attribute in this set of
            event queue attributes
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to set</param>
            <param name="attributeValue">New attribute value</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueAttributes.setObjectRecycler(com.latencybusters.lbm.LBMObjectRecyclerBase,System.Object)">
            <summary>
            Set the LBM object recycler that can be used by the event queue to reuse stats objects.
            </summary>
            <param name="objRec">an LBM object recycler that will be called when objects need to be retrieved</param>
            <param name="objRecCbArg">a callback object token that will be passed in the retrieve method</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueAttributes.getObjectRecycler">
            <summary>
            Get the LBM object recycler
            </summary>
            <returns>The object recycler if one has been set</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueAttributes.getObjectRecyclerCallbackArg">
            <summary>
            Get the LBM object recycler callback object token
            </summary>
            <returns>The object recycler callback object token that will be passed to retrieve methods</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMEventQueueStatistics">
            <summary>
            UM event queue statistics. These are 
            statistics for messages and other events that enter and exit
            the event queue. NOTE: Specific count-enable options must sometimes be enabled for
            these statistics to populate.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.#ctor">
            <summary>
            Instantiate an empty object containing no statistics.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.#ctor(com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Instantiate an object containing the current set of
            statistics for a given event queue.
            </summary>
            <param name="lbmevq">LBMEventQueue object to load statistics from.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.refresh(com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Refresh the current set of statistics using the given event queue.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="lbmevq">LBMEventQueue object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.dataMessages">
            <summary>
            Number of data messages currently in the event queue.
            </summary>
            <returns>
            Number of data messages currently in the event queue, i.e., a snapshot.
            Configuration option queue_count_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.dataMessagesTotal">
            <summary>
            Total number of data messages enqueued since last reset.
            </summary>
            <returns>
            Total accumulated number of data messages that have been added to the event
            queue (even if subsequently de-queued) since last reset. Configuration
            option queue_count_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.dataMessagesMinimumServiceTime">
            <summary>
            Minimum service time for data messages (in microseconds).
            </summary>
            <returns>
            Minimum service time for data messages (in microseconds). This is
            the low-water mark (i.e., the shortest so far) for data message service
            durations, measured from the point of de-queuement until the application has
            finished servicing the message. Configuration option
            queue_service_time_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.dataMessagesMeanServiceTime">
            <summary>
            Mean service time for data messages (in microseconds).
            </summary>
            <returns>
            Mean service time for data messages (in microseconds).
            This is an exponentially weighted moving average (weighted to more recent)
            for accumulated data message service durations, measured from the point of
            de-queuement until the application has finished servicing the message.
            Configuration option queue_service_time_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.dataMessagesMaximumServiceTime">
            <summary>
            Maximum service time for data messages (in microseconds).
            </summary>
            <returns>
            Maximum service time for data messages (in microseconds). This is
            the high-water mark (i.e., the longest so far) for data message service
            durations measured from the point of de-queuement until the application has
            finished servicing the message. Configuration option
            queue_service_time_enabled must be activated. 
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.responseMessages">
            <summary>
            Number of response messages currently enqueued.
            </summary>
            <returns>
            Number of response messages (from receiver objects) currently
            in the event queue, i.e., a snapshot. Configuration option
            queue_count_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.responseMessagesTotal">
            <summary>
            Total number of response messages enqueued since last reset.
            </summary>
            <returns>
            Total accumulated number of response messages that have been added to the
            event queue (even if subsequently de-queued) since last reset.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.responseMessagesMinimumServiceTime">
            <summary>
            Minimum service time for response messages (in microseconds).
            </summary>
            <returns>
            Minimum service time for response messages (in microseconds).
            This is the low-water mark (i.e., the shortest so far) for response message
            service durations, measured from the point of de-queuement until the
            application has finished servicing the message. Configuration option
            queue_service_time_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.responseMessagesMeanServiceTime">
            <summary>
            Mean service time for response messages (in microseconds).
            </summary>
            <returns>
            Mean service time for response messages (in microseconds). This is an
            exponentially weighted moving average (weighted to more recent) for
            accumulated response message service durations, measured from the point of
            de-queuement until the application has finished servicing the message.
            Configuration option queue_service_time_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.responseMessagesMaximumServiceTime">
            <summary>
            Maximum service time for response messages (in microseconds).
            </summary>
            <returns>
            Maximum service time for response messages (in microseconds). This is the
            high-water mark (i.e., the longest so far) for response message service
            durations measured from the point of de-queuement until the application has
            finished servicing the message. Configuration option
            queue_service_time_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.topiclessImmediateMessages">
            <summary>
            Number of topic-less immediate messages currently enqueued.
            </summary>
            <returns>
            Number of topic-less Multicast Immediate Messaging (MIM) messages currently
            in the event queue, i.e., a snapshot. Configuration option queue_count_enabled
            must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.topiclessImmediateMessagesTotal">
            <summary>
            Total number of topic-less immediate messages enqueued since last reset.
            </summary>
            <returns>
            Total accumulated number of topic-less Multicast Immediate Messaging (MIM)
            messages that have been added to the event queue (even if subsequently
            de-queued) since last reset. Configuration option queue_count_enabled must be
            activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.topiclessImmediateMessagesMinimumServiceTime">
            <summary>
            Minimum service time for topic-less immediate messages (in microseconds).
            </summary>
            <returns>
            Minimum service time for topic-less Multicast Immediate Messaging (MIM)
            messages (in microseconds). This is the low-water mark (i.e., the shortest so
            far) for topic-less MIM message service durations, measured from the point of
            de-queuement until the application has finished servicing the message.
            Configuration option queue_service_time_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.topiclessImmediateMessagesMeanServiceTime">
            <summary>
            Mean service time for topic-less immediate messages (in microseconds).
            </summary>
            <returns>
            Mean service time for topic-less Multicast Immediate Messaging (MIM)
            messages (in microseconds). This is an exponentially weighted moving average
            (weighted to more recent) for accumulated topic-less MIM message service
            durations, measured from the point of de-queuement until the application has
            finished servicing the message. Configuration option
            queue_service_time_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.topiclessImmediateMessagesMaximumServiceTime">
            <summary>
            Maximum service time for topic-less immediate messages (in microseconds).
            </summary>
            <returns>
            Maximum service time for topic-less Multicast Immediate Messaging (MIM)
            messages (in microseconds). This is the high-water mark (i.e., the longest so
            far) for topic-less MIM message service durations measured from the point of
            de-queuement until the application has finished servicing the message.
            Configuration option queue_service_time_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.wildcardReceiverMessages">
            <summary>
            Number of wildcard receiver messages currently enqueued.
            </summary>
            <returns>
            Number of wildcard receiver messages currently in the event queue, i.e., a
            snapshot. Configuration option queue_count_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.wildcardReceiverMessagesTotal">
            <summary>
            Total number of wildcard receiver messages enqueued since last reset.
            </summary>
            <returns>
            Total accumulated number of wildcard receiver messages that have been added
            to the event queue (even if subsequently de-queued) since last reset.
            Configuration option queue_count_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.wildcardReceiverMessagesMinimumServiceTime">
            <summary>
            Minimum service time for wildcard receiver messages (in microseconds).
            </summary>
            <returns>
            Minimum service time for wildcard receiver messages (in microseconds).
            This is the low-water mark (i.e., the shortest so far) for wildcard receiver
            message service durations measured from the point of de-queuement until the
            application has finished servicing the message. Configuration option
            queue_service_time_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.wildcardReceiverMessagesMeanServiceTime">
            <summary>
            Mean service time for wildcard receiver messages (in microseconds).
            </summary>
            <returns>
            Mean service time for wildcard receiver messages (in microseconds). This is
            an exponentially weighted moving average (weighted to more recent) for
            accumulated wildcard receiver message service durations, measured from the
            point of de-queuement until the application has finished servicing the
            message. Configuration option queue_service_time_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.wildcardReceiverMessagesMaximumServiceTime">
            <summary>
            Maximum service time for wildcard receiver messages (in microseconds).
            </summary>
            <returns>
            Maximum service time for wildcard receiver messages (in microseconds). This
            is the high-water mark (i.e., the longest so far) for wildcard receiver
            message service durations measured from the point of de-queuement until the
            application has finished servicing the message. Configuration option
            queue_service_time_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.ioEvents">
            <summary>
            Number of I/O events currently enqueued.
            </summary>
            <returns>
            Number of I/O events currently in the event queue, i.e., a snapshot.
            Configuration option queue_count_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.ioEventsTotal">
            <summary>
            Total number of I/O events enqueued since last reset.
            </summary>
            <returns>
            Total accumulated number of I/O events that have been added to the event
            queue (even if subsequently de-queued) since last reset. Configuration option
            queue_count_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.ioEventsMinimumServiceTime">
            <summary>
            Minimum service time for I/O events (in microseconds).
            </summary>
            <returns>
            Minimum service time for I/O events (in microseconds). This is the low-water
            mark (i.e., the shortest so far) for I/O event service durations measured
            from the point of de-queuement until the application has finished servicing
            the event. Configuration option queue_service_time_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.ioEventsMeanServiceTime">
            <summary>
            Mean service time for I/O events (in microseconds).
            </summary>
            <returns>
            Mean service time for I/O events (in microseconds). This is an exponentially
            weighted moving average (weighted to more recent) for accumulated I/O event
            service durations, measured from the point of de-queuement until the
            application has finished servicing the event. Configuration option
            queue_service_time_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.ioEventsMaximumServiceTime">
            <summary>
            Maximum service time for I/O events (in microseconds).
            </summary>
            <returns>
            Maximum service time for I/O events (in microseconds). This is the
            high-water mark (i.e., the longest so far) for I/O event service durations
            measured from the point of de-queuement until the application has finished
            servicing the event. Configuration option queue_service_time_enabled must be
            activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.timerEvents">
            <summary>
            Number of timer events currently enqueued.
            </summary>
            <returns>
            Number of timer events currently in the event queue, i.e., a snapshot.
            Configuration option queue_count_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.timerEventsTotal">
            <summary>
            Total number of timer events enqueued since last reset.
            </summary>
            <returns>
            Total accumulated number of timer events that have been added to the event
            queue (even if subsequently de-queued) since last reset. Configuration option
            queue_count_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.timerEventsMinimumServiceTime">
            <summary>
            Minimum service time for timer events (in microseconds).
            </summary>
            <returns>
            Minimum service time for timer events (in microseconds). This is the
            low-water mark (i.e., the shortest so far) for timer event service durations
            measured from the point of de-queuement until the application has finished
            servicing the event. Configuration option queue_service_time_enabled must be
            activated. 
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.timerEventsMeanServiceTime">
            <summary>
            Mean service time for timer events (in microseconds).
            </summary>
            <returns>
            Mean service time for timer events (in microseconds). This is an
            exponentially weighted moving average (weighted to more recent) for
            accumulated timer event service durations, measured from the point of
            de-queuement until the application has finished servicing the message.
            Configuration option queue_service_time_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.timerEventsMaximumServiceTime">
            <summary>
            Maximum service time for timer events (in microseconds).
            </summary>
            <returns>
            Maximum service time for timer events (in microseconds). This is the
            high-water mark (i.e., the longest so far) for timer event service durations
            measured from the point of de-queuement until the application has finished
            servicing the event. Configuration option queue_service_time_enabled must be
            activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.sourceEvents">
            <summary>
            Number of source events currently enqueued.
            </summary>
            <returns>
            Number of source events currently in the event queue, i.e., a snapshot.
            Configuration option queue_count_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.sourceEventsTotal">
            <summary>
            Total number of source events enqueued since last reset.
            </summary>
            <returns>
            Total accumulated number of source events that have been added to the event
            queue (even if subsequently de-queued) since last reset. Configuration option
            queue_count_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.sourceEventsMinimumServiceTime">
            <summary>
            Minimum service time for source events (in microseconds).
            </summary>
            <returns>
            Minimum service time for source events (in microseconds). This is the
            low-water mark (i.e., the shortest so far) for source event service durations
            measured from the point of de-queuement until the application has finished
            servicing the event. Configuration option queue_service_time_enabled must be
            activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.sourceEventsMeanServiceTime">
            <summary>
            Mean service time for source events (in microseconds).
            </summary>
            <returns>
            Mean service time for source events (in microseconds). This is an
            exponentially weighted moving average (weighted to more recent) for
            accumulated source event service durations, measured from the point of
            de-queuement until the application has finished servicing the message.
            Configuration option queue_service_time_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.sourceEventsMaximumServiceTime">
            <summary>
            Maximum service time for source events (in microseconds).
            </summary>
            <returns>
            Maximum service time for source events (in microseconds). This is the
            high-water mark (i.e., the longest so far) for source event service durations
            measured from the point of de-queuement until the application has finished
            servicing the event. Configuration option queue_service_time_enabled must be
            activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.unblockEvents">
            <summary>
            Number of unblock events currently enqueued.
            </summary>
            <returns>
            Number of unblock events currently in the event queue, i.e., a snapshot.
            Configuration option queue_count_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.unblockEventsTotal">
            <summary>
            Total number of unblock events enqueued since last reset.
            </summary>
            <returns>
            Total accumulated number of unblock events that have been added to the event
            queue (even if subsequently de-queued) since last reset. Configuration option
            queue_count_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.cancelEvents">
            <summary>
            Number of cancel events currently enqueued.
            </summary>
            <returns>
            Number of cancel events currently in the event queue, i.e., a snapshot.
            Configuration option queue_count_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.cancelEventsTotal">
            <summary>
            Total number of cancel events enqueued since last reset.
            </summary>
            <returns>
            Total accumulated number of cancel events that have been added to the event
            queue (even if subsequently de-queued) since last reset. Configuration option
            queue_count_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.cancelEventsMinimumServiceTime">
            <summary>
            Minimum service time for cancel events (in microseconds).
            </summary>
            <returns>
            Minimum service time for cancel events. Cancel events as seen by the event
            queue do not actually consume service time, so we do not recommend the general
            use of this counter.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.cancelEventsMeanServiceTime">
            <summary>
            Mean service time for cancel events (in microseconds).
            </summary>
            <returns>
            Mean service time for cancel events. Cancel events as seen by the event
            queue do not actually consume service time, so we do not recommend the general
            use of this counter.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.cancelEventsMaximumServiceTime">
            <summary>
            Maximum service time for cancel events (in microseconds).
            </summary>
            <returns>
            Maximum service time for cancel events. Cancel events as seen by the event
            queue do not actually consume service time, so we do not recommend the general
            use of this counter.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.callbackEvents">
            <summary>
            Number of callback events currently enqueued.
            </summary>
            <returns>
            Number of callback events currently in the event queue, i.e., a snapshot.
            Configuration option queue_count_enabled must be activated. 
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.callbackEventsTotal">
            <summary>
            Total number of callback events enqueued since last reset.
            </summary>
            <returns>
            Total accumulated number of callback events that have been added to the
            event queue even if subsequently de-queued) since last reset. Configuration
            option queue_count_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.callbackEventsMinimumServiceTime">
            <summary>
            Minimum service time for callback events (in microseconds).
            </summary>
            <returns>
            Minimum service time for callback events (in microseconds). This is the
            low-water mark (i.e., the shortest so far) for callback event service
            durations measured from the point of de-queuement until the application has
            finished servicing the event. Configuration option queue_service_time_enabled
            must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.callbackEventsMeanServiceTime">
            <summary>
            Mean service time for callback events (in microseconds).
            </summary>
            <returns>
            Mean service time for callback events (in microseconds). This is an
            exponentially weighted moving average (weighted to more recent) for
            accumulated callback event service durations, measured from the point of
            de-queuement until the application has finished servicing the message.
            Configuration option queue_service_time_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.callbackEventsMaximumServiceTime">
            <summary>
            Maximum service time for callback events (in microseconds).
            </summary>
            <returns>
            Maximum service time for callback events (in microseconds). This is the
            high-water mark (i.e., the longest so far) for callback event service
            durations measured from the point of de-queuement until the application has
            finished servicing the event. Configuration option queue_service_time_enabled
            must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.contextSourceEvents">
            <summary>
            Number of context source events currently enqueued.
            </summary>
            <returns>
            Number of context source events currently in the event queue, i.e., a
            snapshot. Configuration option queue_count_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.contextSourceEventsTotal">
            <summary>
            Total number of context source events enqueued since last reset.
            </summary>
            <returns>
            Total accumulated number of context source events that have been added to
            the event queue (even if subsequently de-queued) since last reset.
            Configuration option queue_count_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.contextSourceEventsMinimumServiceTime">
            <summary>
            Minimum service time for context source events (in microseconds).
            </summary>
            <returns>
            Minimum service time for context source events (in microseconds). This is
            the low-water mark (i.e., the shortest so far) for context source event
            service durations measured from the point of de-queuement until the
            application has finished servicing the event. Configuration option
            queue_service_time_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.contextSourceEventsMeanServiceTime">
            <summary>
            Mean service time for context source events (in microseconds).
            </summary>
            <returns>
            Mean service time for context source events (in microseconds). This is an
            exponentially weighted moving average (weighted to more recent) for
            accumulated context source event service durations, measured from the point of
            de-queuement until the application has finished servicing the event.
            Configuration option queue_service_time_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.contextSourceEventsMaximumServiceTime">
            <summary>
            Maximum service time for context source events (in microseconds).
            </summary>
            <returns>
            Maximum service time for context source events (in microseconds). This is
            the high-water mark (i.e., the longest so far) for context source event
            service durations measured from the point of de-queuement until the
            application has finished servicing the event. Configuration option
            queue_service_time_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.events">
            <summary>
            Number of events currently enqueued.
            </summary>
            <returns>
            Total number of events (including messages) currently in the event queue,
            i.e., a snapshot. Configuration option queue_count_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.eventsTotal">
            <summary>
            Total number of events enqueued since last reset.
            </summary>
            <returns>
            Total accumulated number of events (including messages) that have been added
            to the event queue (even if subsequently de-queued) since last reset.
            Configuration option queue_count_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.minimumAge">
            <summary>
            Minimum age of event queue entry when dequeued (in microseconds).
            </summary>
            <returns>
            Minimum age of event queue entry when dequeued (in microseconds). This is
            the low-water mark for the measured age of any event or message (i.e., the
            shortest one so far) from the point of enqueuement until de-queuement.
            Configuration option queue_age_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.meanAge">
            <summary>
            Mean age of event queue entry when dequeued (in microseconds).
            </summary>
            <returns>
            Mean age of event queue entries when dequeued (in microseconds). This is an
            exponentially weighted moving average (weighted to more recent) for
            accumulated event or message ages (measured from the point enqueuement until
            de-queuement). Configuration option queue_age_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.maximumAge">
            <summary>
            Maximum age of event queue entry when dequeued (in microseconds).
            </summary>
            <returns>
            Maximum age of event queue entry when dequeued (in microseconds). This is
            the high-water mark for the measured age of any event or message (i.e., the
            oldest one so far) from the point of enqueuement until de-queuement.
            Configuration option queue_age_enabled must be activated.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.Dispose">
            <summary>
            Free memory associated with this set of statistics.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEventQueueStatistics.dispose">
            <summary>
            Free memory associated with this set of statistics (same as Dispose()). 
            <seealso cref="M:com.latencybusters.lbm.LBMEventQueueStatistics.Dispose"/>
            </summary>
        </member>
        <member name="T:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics">
            <summary>
            UM context immediate message source transport statistics.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.#ctor">
            <summary>
            Instantiate an empty object containing no statistics.
            </summary>
            <remarks>
            <seealso cref="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.refresh(com.latencybusters.lbm.LBMContext,System.Int32)"/>
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.#ctor(com.latencybusters.lbm.LBMContext,System.Int32)">
            <summary>
            Instantiate object containing the aggregate set of statistics
            for a particular context
            </summary>
            <remarks>
            This constructor will throw LBMEInvalException if maxStats is
            less than the the available number of transport statistical
            sets.
            <seealso cref="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.refresh(com.latencybusters.lbm.LBMContext,System.Int32)"/>
            </remarks>
            <param name="lbmctx">LBMContext object associated with statistics to be retrieved</param>
            <param name="maxStats">Maximum number of statistical sets to retrieve</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.Dispose">
            <summary>
            Free memory associated with this set of statistics.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.dispose">
            <summary>
            Free memory associated with this set of statistics (same as Dispose()). 
            <seealso cref="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.Dispose"/>
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.refresh(com.latencybusters.lbm.LBMContext,System.Int32)">
            <param name="lbmctx">LBMContext object associated with statistics to be retrieved</param>
            <param name="maxStats">Maximum number of statistical sets to retrieve</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.size">
            <summary>
            Number of statistical sets encapsulated within this object
            </summary>
            <returns>Statistical set size</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.type">
            <summary>
            Transport type (TCP, LBT-RM, etc.)
            </summary>
            <remarks>
            This method returns a value from the first
            set of statistics encapsulated within this object.
            <seealso cref="T:com.latencybusters.lbm.LBM"/>
            </remarks>
            <returns>Transport type</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.type(System.Int32)">
            <summary>
            Transport type (TCP, LBT-RM, etc.)
            </summary>
            <remarks>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            <seealso cref="T:com.latencybusters.lbm.LBM"/>
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Transport type</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.typeName">
            <summary>
            Transport type name (TCP, LBT-RM, etc.).
            </summary>
            <remarks>
            This method returns a value from the first
            set of statistics encapsulated within this object
            </remarks>
            <returns>Transport type name</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.typeName(System.Int32)">
            <summary>
            Transport type name (TCP, LBT-RM, etc.).
            </summary>
            <remarks>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Transport type name</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.source">
            <summary>
            Source of transport as a string
            </summary>
            <remarks>
            This method returns a value from the first
            set of statistics encapsulated within this object.
            The string format depends on transport type and is described under
            LBMTransportSourceInfo.
            </remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMTransportSourceInfo"/>
            <returns>Source of transport as a string</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.source(System.Int32)">
            <summary>
            Source of transport as a string
            </summary>
            <remarks>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            The string format depends on transport type and is described under
            LBMTransportSourceInfo.
            </remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMTransportSourceInfo"/>
            <param name="n">Statistics set index</param>
            <returns>Source of transport as a string</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.numberOfClients">
            <summary>
            Number of receiver clients currently connected over this transport (TCP only).
            </summary>
            <remarks>
            This method returns a value from the first
            set of statistics encapsulated within this object
            </remarks>
            <returns>Number of receiver clients currently connected over this
            transport.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.numberOfClients(System.Int32)">
            <summary>
            Number of receiver clients currently connected over this transport (TCP only).
            </summary>
            <remarks>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of receiver clients currently connected over this
            transport.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.bytesBuffered">
            <summary>
            Number of bytes currently in UM's TCP buffer (TCP only)
            </summary>
            <remarks>
            This count is affected by the number of receivers,and configuration options
            transport_tcp_multiple_receiver_behavior and transport_session_maximum_buffer.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of bytes currently in UM's TCP buffer, i.e., a snapshot.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.bytesBuffered(System.Int32)">
            <summary>
            Number of bytes currently in UM's TCP buffer (TCP only)
            </summary>
            <remarks>
            This count is affected by the number of receivers,and configuration options
            transport_tcp_multiple_receiver_behavior and transport_session_maximum_buffer.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of bytes currently in UM's TCP buffer, i.e., a snapshot.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.messagesSent">
            <summary>
            Number of datagrams sent (LBT-RM only).
            </summary>
            <remarks>
            Depending on batching settings, a single datagram may contain one or
            more messages, or a fragment of a larger message. With LBT-RM, larger messages
            are split into fragment sizes limited by configuration option
            transport_lbtrm_datagram_max_size (default 8KB).
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of datagrams sent.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.messagesSent(System.Int32)">
            <summary>
            Number of datagrams sent (LBT-RM only).
            </summary>
            <remarks>
            Depending on batching settings, a single datagram may contain one or
            more messages, or a fragment of a larger message. With LBT-RM, larger messages
            are split into fragment sizes limited by configuration option
            transport_lbtrm_datagram_max_size (default 8KB).
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams sent.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.bytesSent">
            <summary>
            Number of datagram bytes sent (LBT-RM only).
            </summary>
            <remarks>
            Includes the total length of all LBT-RM packets, 
            including UM header information. 
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of datagram bytes sent, i.e., the total of lengths of all
            packets including UM header information.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.bytesSent(System.Int32)">
            <summary>
            Number of datagram bytes sent (LBT-RM only).
            </summary>
            <remarks>
            Includes the total length of all LBT-RM packets, 
            including UM header information.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagram bytes sent, i.e., the total of lengths of all
            packets including UM header information.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.transmissionWindowMessages">
            <summary>
            Number of datagrams in the transmission window (LBT-RM only).
            </summary>
            <remarks>
            Each source transport session maintains a transmission window buffer (the
            size of which is set by transport_lbtrm_transmission_window_size, default
            24MB). When the source transport receives a NAK, the corresponding message for
            retransmission must be found in this transmission window.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of datagrams in the transmission window.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.transmissionWindowMessages(System.Int32)">
            <summary>
            Number of datagrams in the transmission window (LBT-RM only).
            </summary>
            <remarks>
            Each source transport session maintains a transmission window buffer (the
            size of which is set by transport_lbtrm_transmission_window_size, default
            24MB). When the source transport receives a NAK, the corresponding message for
            retransmission must be found in this transmission window.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams in the transmission window.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.transmissionWindowBytes">
            <summary>
            Number of bytes currently in the transmission window (LBT-RM only)
            </summary>
            <remarks>
            Number of bytes currently in the transmission window. 
            Typically, this count approaches its window size or exceeds it by a small
            amount.
            See transmissionWindowMessages for a description of the 
            transmission window. 
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of bytes currently in the transmission window</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.transmissionWindowBytes(System.Int32)">
            <summary>
            Number of bytes currently in the transmission window (LBT-RM only)
            </summary>
            <remarks>
            Number of bytes currently in the transmission window. 
            Typically, this count approaches its window size or exceeds it by a small
            amount.
            See transmissionWindowMessages for a description of the 
            transmission window. 
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of bytes currently in the transmission window</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.nakPacketsReceived">
            <summary>
            Number of NAK packets received by this source transport (LBT-RM only).
            </summary>
            <remarks>
            UM batches NAKs into NAK packets to save network bandwidth. This should
            always be less than or equal to naksReceived (below).
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of NAK packets received by this source transport.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.nakPacketsReceived(System.Int32)">
            <summary>
            Number of NAK packets received by this source transport (LBT-RM only).
            </summary>
            <remarks>
            UM batches NAKs into NAK packets to save network bandwidth. This should
            always be less than or equal to naksReceived (below).
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of NAK packets received by this source transport.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.naksReceived">
            <summary>
            Number of individual NAKs received by the source transport (LBT-RM only).
            </summary>
            <remarks>
            When a source transport receives a NAK from a receiver transport, it may
            respond by re-transmitting the requested LBT-RM datagram, or it may send an
            NCF. The NAKing receiver transport responds to the NCF by waiting (timeout
            set by transport_lbtrm_nak_suppress_interval, default 1000 ms), then
            re-sending the NAK.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of individual NAKs received by the source transport.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.naksReceived(System.Int32)">
            <summary>
            Number of individual NAKs received by the source transport (LBT-RM only).
            </summary>
            <remarks>
            When a source transport receives a NAK from a receiver transport, it may
            respond by re-transmitting the requested LBT-RM datagram, or it may send an
            NCF. The NAKing receiver transport responds to the NCF by waiting (timeout
            set by transport_lbtrm_nak_suppress_interval, default 1000 ms), then
            re-sending the NAK.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of individual NAKs received by the source transport.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.naksIgnored">
            <summary>
            Number of NAKs this source transport ignored and sent an NCF with reason
            code "ignored" (LBT-RM only).
            </summary>
            <remarks>
            A source transport ignores a NAK for a datagram it has already recently
            retransmitted. How "recently" is determined by the configuration option source
            transport_lbtrm_ignore_interval (default 500ms). If this count is high, a
            receiver transport may be having trouble receiving retransmissions, or the
            ignore interval may be set too long.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of NAKs this source transport ignored and sent an NCF with
            reason code set to "ignored".</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.naksIgnored(System.Int32)">
            <summary>
            Number of NAKs this source transport ignored and sent an NCF with reason
            code "ignored" (LBT-RM only).
            </summary>
            <remarks>
            A source transport ignores a NAK for a datagram it has already recently
            retransmitted. How "recently" is determined by the configuration option source
            transport_lbtrm_ignore_interval (default 500ms). If this count is high, a
            receiver transport may be having trouble receiving retransmissions, or the
            ignore interval may be set too long.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of NAKs this source transport ignored and sent an NCF with
            reason code set to "ignored".</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.naksShed">
            <summary>
            Number of NAKs this source transport has shed and sent an NCF with reason
            code "shed" (LBT-RM only).
            </summary>
            <remarks>
            When a source transport's retransmit rate limiter and retransmit queue are
            both at maximum, it responds to a NAK by sending an "NCF shed", and does not
            retransmit. The receiver transport should wait, then send another NAK. If this
            count is high, one or more crybaby receiver transports may be clogging the
            source transport's retransmit queue.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of NAKs this source transport has shed and sent an NCF with
            the reason code set to "shed".</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.naksShed(System.Int32)">
            <summary>
            Number of NAKs this source transport has shed and sent an NCF with reason
            code "shed" (LBT-RM only).
            </summary>
            <remarks>
            When a source transport's retransmit rate limiter and retransmit queue are
            both at maximum, it responds to a NAK by sending an "NCF shed", and does not
            retransmit. The receiver transport should wait, then send another NAK. If this
            count is high, one or more crybaby receiver transports may be clogging the
            source transport's retransmit queue.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of NAKs this source transport has shed and sent an NCF with
            the reason code set to "shed".</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.naksIgnoredRetransmitDelay">
            <summary>
            Number of NAKs this source transport has not processed because it met its 
            retransmission rate limit (LBT-RM only).
            </summary>
            <remarks>
            This rate limit is set by configuration option
            transport_lbtrm_retransmit_rate_limit (default 5Mbps).
            For each of these NAKs, the source transport immediately sends an NFC
            rx_delay, then queues the retransmission for a later send within the rate
            limit. If this count is high, one or more crybaby receiver transports may be
            clogging the source transport's retransmit queue.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of NAKs this source did not process because doing so would
            exceed its retransmit rate limit.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.naksIgnoredRetransmitDelay(System.Int32)">
            <summary>
            Number of NAKs this source transport has not processed because it met its 
            retransmission rate limit (LBT-RM only).
            </summary>
            <remarks>
            This rate limit is controlled by the transport's retransmit_rate_limit, 
            default 5 Mbps. The source queues the retransmission and sends an 
            NCF with the reason code set to "rx_delay". If naksIgnoredRetransmitDelay 
            is high, one or more crybaby receivers may be clogging the source's 
            retransmission queue.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of NAKs this source did not process because doing so would
            exceed its retransmit rate limit.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.retransmissionsSent">
            <summary>
            Number of datagrams retransmitted by this source transport (LBT-RM only).
            </summary>
            <remarks>
            This count is incremented under the same circumstances as
            retransmissionBytesSent, below.
            In a normal, light-loss scenario, most NAKs received induce a retransmission.
            When losses become heavy and/or many receiver transports begin losing the
            same datagrams, NCF-related no-retransmit counts (naksIgnored, naksShed and
            naksIgnoredRetransmitDelay) may begin to inflate, and retransmissions
            retransmissionsSent) may become significantly lower than NAKS
            received (naksReceived).
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of datagrams retransmitted by this source transport.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.retransmissionsSent(System.Int32)">
            <summary>
            Number of datagrams retransmitted by this source (LBT-RM only).
            </summary>
            <remarks>
            This count is incremented under the same circumstances as
            retransmissionBytesSent, below.
            In a normal, light-loss scenario, most NAKs received induce a retransmission.
            When losses become heavy and/or many receiver transports begin losing the
            same datagrams, NCF-related no-retransmit counts (naksIgnored, naksShed and
            naksIgnoredRetransmitDelay) may begin to inflate, and retransmissions
            retransmissionsSent) may become significantly lower than NAKS
            received (naksReceived).
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams retransmitted by this source transport.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.messagesQueued">
            <summary>
            Number of datagrams currently queued by the rate limiter (LBT-RM only).
            </summary>
            <remarks>
            When a source transport attempts to send messages (any type) faster than its
            data rate limiter allows (set by configuration option
            transport_lbtrm_data_rate_limit, default 10Mbps), the data rate limiter queues
            the messages until they can be sent within the data rate limit.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of datagrams currently queued by the rate limiter.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.messagesQueued(System.Int32)">
            <summary>
            Number of datagrams currently queued by the rate limiter (LBT-RM only).
            </summary>
            <remarks>
            When a source transport attempts to send messages (any type) faster than its
            data rate limiter allows (set by configuration option
            transport_lbtrm_data_rate_limit, default 10Mbps), the data rate limiter queues
            the messages until they can be sent within the data rate limit.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams currently queued by the rate limiter.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.retransmissionsQueued">
            <summary>
            Number of retransmission datagrams currently queued by the retransmit
            rate limiter (LBT-RM only).
            </summary>
            <remarks>
            When a source transport attempts to send retransmissions faster that its
            retransmit rate limiter allows (set by configuration option
            transport_lbtrm_retransmit_rate_limit, default 5Mbps), the retransmit rate
            limiter queues retransmissions until they can be sent within the rate limit.
            naksIgnoredRetransmitDelay (above) will generally also rise if this count is high.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of retransmission datagrams currently queued by the
            retransmit rate limiter.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.retransmissionsQueued(System.Int32)">
            <summary>
            Number of retransmission datagrams currently queued by the retransmit
            rate limiter (LBT-RM only).
            </summary>
            <remarks>
            When a source transport attempts to send retransmissions faster that its
            retransmit rate limiter allows (set by configuration option
            transport_lbtrm_retransmit_rate_limit, default 5Mbps), the retransmit rate
            limiter queues retransmissions until they can be sent within the rate limit.
            naksIgnoredRetransmitDelay (above) will generally also rise if this count is high.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of retransmission datagrams currently queued by the
            retransmit rate limiter.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.retransmissionBytesSent">
            <summary>
            Total number of bytes retransmitted by this source transport (LBT-RM only). 
            </summary>
            <remarks>
            This count is triggered under the same circumstances as retransmissionsSent, above.
            In a normal, light-loss scenario, most NAKs received induce a retransmission.
            When losses become heavy and/or many receiver transports begin losing the
            same datagrams, NCF-related no-retransmit counts (naksIgnored, naksShed and
            naksIgnoredRetransmitDelay) may begin to inflate, and retransmissions
            retransmissionsSent) may become significantly lower than NAKs
            received (naksReceived).
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns> Total number of bytes retransmitted by this source transport.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageSourceStatistics.retransmissionBytesSent(System.Int32)">
            <summary>
            Total number of bytes retransmitted by this source transport (LBT-RM only). 
            </summary>
            <remarks>
            This count is triggered under the same circumstances as retransmissionsSent, above.
            In a normal, light-loss scenario, most NAKs received induce a retransmission.
            When losses become heavy and/or many receiver transports begin losing the
            same datagrams, NCF-related no-retransmit counts (naksIgnored, naksShed and
            naksIgnoredRetransmitDelay) may begin to inflate, and retransmissions
            retransmissionsSent) may become significantly lower than NAKs
            received (naksReceived).
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns> Total number of bytes retransmitted by this source transport.
            </returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics">
            <summary>
            UM Receiver Transport Statistics
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.#ctor">
            <summary>
            Instantiate an empty object containing no statistics.
            </summary>
            <remarks>
            <seealso cref="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.refresh(com.latencybusters.lbm.LBMContext,System.Int32)"/>
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.#ctor(com.latencybusters.lbm.LBMContext,System.Int32)">
            <summary>
            Instantiate object containing the aggregate set of statistics
            for a particular context
            </summary>
            <remarks>
            This constructor will throw LBMEInvalException if maxStats is
            less than the the available number of transport statistical
            sets.
            <seealso cref="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.refresh(com.latencybusters.lbm.LBMContext,System.Int32)"/>
            </remarks>
            <param name="lbmctx">LBMContext object</param>
            <param name="maxStats">Maximum number of sources</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.Dispose">
            <summary>
            Free memory associated with this set of statistics.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.dispose">
            <summary>
            Free memory associated with this set of statistics (same as Dispose()). 
            <seealso cref="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.Dispose"/>
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.refresh(com.latencybusters.lbm.LBMContext,System.Int32)">
            <remarks>
            This method will throw LBMEInvalException if maxStats is
            less than the the available number of transport statistical
            sets.
            </remarks>
            <param name="lbmctx">LBMContext object</param>
            <param name="maxStats">Maximum number of sources</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.size">
            <summary>
            Number of transport statistical sets encapsulated within this object
            </summary>
            <returns>Statistical set size</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.type">
            <summary>
            Transport type (TCP, LBT-RM, etc.)
            </summary>
            <remarks>
            This method returns a value from the first
            set of statistics encapsulated within this object.
            <seealso cref="T:com.latencybusters.lbm.LBM"/>
            </remarks>
            <returns>Transport type</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.type(System.Int32)">
            <summary>
            Transport type (TCP, LBT-RM, etc.)
            </summary>
            <remarks>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            <seealso cref="T:com.latencybusters.lbm.LBM"/>
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Transport type</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.typeName">
            <summary>
            Transport type name (TCP, LBT-RM, etc.).
            </summary>
            <remarks>
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Transport type name</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.typeName(System.Int32)">
            <summary>
            Transport type name (TCP, LBT-RM, etc.).
            </summary>
            <remarks>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Transport type name</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.source">
            <summary>
            Source of transport as a string
            </summary>
            <remarks>
            This method returns a value from the first
            set of statistics encapsulated within this object.
            The string format depends on transport type and is described under
            LBMTransportSourceInfo.
            </remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMTransportSourceInfo"/>
            <returns>Source of transport as a string</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.source(System.Int32)">
            <summary>
            Source of transport as a string
            </summary>
            <remarks>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            The string format depends on transport type and is described under
            LBMTransportSourceInfo.
            </remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMTransportSourceInfo"/>
            <param name="n">Statistics set index</param>
            <returns>Source of transport as a string</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.bytesReceived">
            <summary>
            Number of datagram bytes received (TCP, LBT-RM)
            </summary>
            <remarks>
            The total of
            lengths of all transport packets, including UM header information.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of bytes received. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.bytesReceived(System.Int32)">
            <summary>
            Number of datagram bytes received (TCP, LBT-RM)
            </summary>
            <remarks>
            The total of
            lengths of all transport packets, including UM header information.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of bytes received.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.messagesReceived">
            <summary>
            Number of datagrams received (LBT-RM only)
            </summary>
            <remarks>
            Depending on batching settings, a single LBT-RM datagram may contain one or
            more messages, or a fragment of a larger message. With LBT-RM, larger messages
            are split into fragment sizes limited by configuration option
            transport_lbtrm_datagram_max_size (default 8KB).
            This method returns a value from the first
            set of statistics encapsulated within this object.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            </remarks>
            <returns>Number of datagrams received. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.messagesReceived(System.Int32)">
            <summary>
            Number of datagrams received (LBT-RM only)
            </summary>
            <remarks>
            Depending on batching settings, a single LBT-RM datagram may contain one or
            more messages, or a fragment of a larger message. With LBT-RM, larger messages
            are split into fragment sizes limited by configuration option
            transport_lbtrm_datagram_max_size (default 8KB).
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams received.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.nakPacketsSent">
            <summary>
            Number of NAK packets sent by the receiver transport (LBT-RM only)
            </summary>
            <remarks>
            UM batches NAKs into NAK packets to save network bandwidth. This should
            always be less than or equal to the number of individual NAKs sent (naksSent,
            below).
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of NAK packets sent. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.nakPacketsSent(System.Int32)">
            <summary>
            Number of NAK packets sent by the receiver transport (LBT-RM only)
            </summary>
            <remarks>
            UM batches NAKs into NAK packets to save network bandwidth. This should
            always be less than or equal to the number of individual NAKs sent (naksSent,
            below).
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of NAK packets sent. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.naksSent">
            <summary>
            Number of individual NAKs sent by the receiver transport (LBT-RM only)
            </summary>
            <remarks>
            This may differ from the tally of lost datagrams (below) due to reasons such as
            <list type="bullet">
            <item>
            Other receiver transports may have already sent a NAK for the same lost
            datagram, resulting in a retransmitted lost datagram (or an NCF) to arrive at
            this receiver transport before it has a chance to issue a NAK, or
            </item>
            <item>
            During periods of heavy loss, receiver transports may be forced to issue
            multiple NAKs per lost datagram (controlled by configuration options
            transport_lbtrm_nak_generation_interval and
            transport_lbtrm_nak_backoff_interval) until either the retransmission is
            received or the datagram is declared unrecovered (which may ultimately lead to
            UM delivering an LBM_MSG_UNRECOVERABLE_LOSS notification to the receiver
            application).
            </item>
            </list>
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>. Number of individual NAKs sent by the receiver. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.naksSent(System.Int32)">
            <summary>
            Number of individual NAKs sent by the receiver transport (LBT-RM only)
            </summary>
            <remarks>
            This may differ from the tally of lost datagrams (below) due to reasons such as
            <list type="bullet">
            <item>
            Other receiver transports may have already sent a NAK for the same lost
            datagram, resulting in a retransmitted lost datagram (or an NCF) to arrive at
            this receiver transport before it has a chance to issue a NAK, or
            </item>
            <item>
            During periods of heavy loss, receiver transports may be forced to issue
            multiple NAKs per lost datagram (controlled by configuration options
            transport_lbtrm_nak_generation_interval and
            transport_lbtrm_nak_backoff_interval) until either the retransmission is
            received or the datagram is declared unrecovered (which may ultimately lead to
            UM delivering an LBM_MSG_UNRECOVERABLE_LOSS notification to the receiver
            application).
            </item>
            </list>
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of individual NAKs sent by the receiver. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.lost">
            <summary>
            Number of datagrams detected as lost (LBT-RM only)
            </summary>
            <remarks>
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of datagrams that have been detected as lost.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.lost(System.Int32)">
            <summary>
            Number of datagrams detected as lost (LBT-RM only)
            </summary>
            <remarks>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams that have been detected as lost.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.ncfsIgnored">
            <summary>
            Number of NCFs received from a source transport with reason code "ignored".
            (LBT-RM only)
            </summary>
            <remarks>
            If a source transport receives a NAK for a datagram that it has recently
            retransmitted, it sends an "NCF ignored" and does not retransmit. How
            "recently" is determined by the configuration option source
            transport_lbtrm_ignore_interval (default 500ms). If this count is high, a
            receiver transport may be having trouble receiving retransmissions, or the
            ignore interval may be set too long.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of NCFs received from a source transport with the reason 
            code set to "ignored". </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.ncfsIgnored(System.Int32)">
            <summary>
            Number of NCFs received from a source transport with reason code "ignored".
            (LBT-RM only)
            </summary>
            <remarks>
            If a source transport receives a NAK for a datagram that it has recently
            retransmitted, it sends an "NCF ignored" and does not retransmit. How
            "recently" is determined by the configuration option source
            transport_lbtrm_ignore_interval (default 500ms). If this count is high, a
            receiver transport may be having trouble receiving retransmissions, or the
            ignore interval may be set too long.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of NCFs received from a source transport with the reason 
            code set to "ignored". </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.ncfsShed">
            <summary>
            Number of NCFs received with reason code "shed" (LBT-RM only)
            </summary>
            <remarks>
            When a source transport's retransmit queue and rate limiter are both at
            maximum, it responds to a NAK by sending an "NCF shed", and does not
            retransmit. The receiver transport should wait, then send another NAK. If this
            count is high, one or more crybaby receiver transports may be clogging the
            source transport's retransmit queue.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of NCFs that have been received with the reason 
            code set to "shed". </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.ncfsShed(System.Int32)">
            <summary>
            Number of NCFs received with reason code "shed" (LBT-RM only)
            </summary>
            <remarks>
            When a source transport's retransmit queue and rate limiter are both at
            maximum, it responds to a NAK by sending an "NCF shed", and does not
            retransmit. The receiver transport should wait, then send another NAK. If this
            count is high, one or more crybaby receiver transports may be clogging the
            source transport's retransmit queue.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of NCFs that have been received with the reason 
            code set to "shed". </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.ncfsRetransmissionDelay">
            <summary>
            Number of NCFs received with reason code "rx_delay" (LBT-RM only)
            </summary>
            <remarks>
            When a source transport's retransmit rate limiter prevents it from
            immediately retransmitting any more lost datagrams, it responds to a NAK by
            sending an "NCF rx_delay", then queues the retransmission for a later send.
            The receiver transport should wait for the retransmission and not immediately
            send another NAK. If this count is high, one or more crybaby receiver
            transports may be clogging the source transport's retransmit queue.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of NCFs that have been received with the reason 
            code set to "rx_delay". </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.ncfsRetransmissionDelay(System.Int32)">
            <summary>
            Number of NCFs received with reason code "rx_delay" (LBT-RM only)
            </summary>
            <remarks>
            When a source transport's retransmit rate limiter prevents it from
            immediately retransmitting any more lost datagrams, it responds to a NAK by
            sending an "NCF rx_delay", then queues the retransmission for a later send.
            The receiver transport should wait for the retransmission and not immediately
            send another NAK. If this count is high, one or more crybaby receiver
            transports may be clogging the source transport's retransmit queue.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of NCFs that have been received with the reason 
            code set to "rx_delay". </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.ncfsUnknown">
            <summary>
            Number of NCFs received with reason code "unknown" (LBT-RM only)
            </summary>
            <remarks>
            These are NCFs with a reason code this receiver transport does not
            recognize. After a delay (set by configuration option
            transport_lbtrm_nak_suppress_interval (default 1000ms), it resends the NAK.
            This counter should never be greater than 0 unless applications linked with
            different versions of Ultra Messaging software coexist on the same network.
            This method returns a value from the first
            set of statistics encapsulated within this object
            </remarks>
            <returns>Number of NCFs that have been received with the reason 
            code set to "unknown". </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.ncfsUnknown(System.Int32)">
            <summary>
            Number of NCFs received with reason code "unknown" (LBT-RM only)
            </summary>
            <remarks>
            These are NCFs with a reason code this receiver transport does not
            recognize. After a delay (set by configuration option
            transport_lbtrm_nak_suppress_interval (default 1000ms), it resends the NAK.
            This counter should never be greater than 0 unless applications linked with
            different versions of Ultra Messaging software coexist on the same network.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of NCFs that have been received with the reason 
            code set to "unknown". </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.minimumRecoveryTime">
            <summary>
            Minimum time (in milliseconds) in which loss recovery 
            was accomplished (LBT-RM only)
            </summary>
            <remarks>
            If this time is greater than configuration option
            transport_lbtrm_nak_backoff_interval, it may be taking multiple NAKs to
            initiate retransmissions, indicating a lossy network.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>
            Minimum time (in milliseconds), i.e., the shortest time recorded so far, for
            a lost message to be recovered.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.minimumRecoveryTime(System.Int32)">
            <summary>
            Minimum time (in milliseconds) in which loss recovery 
            was accomplished (LBT-RM only)
            </summary>
            <remarks>
            If this time is greater than configuration option
            transport_lbtrm_nak_backoff_interval, it may be taking multiple NAKs to
            initiate retransmissions, indicating a lossy network.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>
            Minimum time (in milliseconds), i.e., the shortest time recorded so far, for
            a lost message to be recovered.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.meanRecoveryTime">
            <summary>
            Mean time (in milliseconds) in which loss recovery was 
            accomplished (LBT-RM only)
            </summary>
            <remarks>
            This is an exponentially weighted moving average (weighted to more recent)
            for accumulated measured recovery times. Ideally this field should be as close
            to your minimum recovery time (nak_stm_min, above) as possible. High mean
            recovery times indicate a lossy network.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Mean time (in milliseconds) in which loss recovery was 
            accomplished. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.meanRecoveryTime(System.Int32)">
            <summary>
            Mean time (in milliseconds) in which loss recovery was 
            accomplished (LBT-RM only)
            </summary>
            <remarks>
            This is an exponentially weighted moving average (weighted to more recent)
            for accumulated measured recovery times. Ideally this field should be as close
            to your minimum recovery time (nak_stm_min, above) as possible. High mean
            recovery times indicate a lossy network.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Mean time (in milliseconds) in which loss recovery was 
            accomplished.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.maximumRecoveryTime">
            <summary>
            Maximum time (in milliseconds) in which loss recovery 
            was accomplished (LBT-RM only)
            </summary>
            <remarks>
            If this time is near or equal to the configuration option
            transport_lbtrm_nak_generation_interval setting, you have likely experienced
            some level of unrecoverable loss.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>
            Maximum time (in milliseconds), i.e., the longest time recorded so far, for a
            lost message to be recovered.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.maximumRecoveryTime(System.Int32)">
            <summary>
            Maximum time (in milliseconds) in which loss recovery 
            was accomplished (LBT-RM only)
            </summary>
            <remarks>
            If this time is near or equal to the configuration option
            transport_lbtrm_nak_generation_interval setting, you have likely experienced
            some level of unrecoverable loss.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>
            Maximum time (in milliseconds), i.e., the longest time recorded so far, for a
            lost message to be recovered.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.minimumNakTransmissions">
            <summary>
            Minimum number of times per lost message that a receiver transport
            transmitted a NAK. (LBT-RM only)
            </summary>
            <remarks>
            A value greater than 1 indicates a chronically lossy network.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>
            Minimum number of times per lost message that a receiver transport
            transmitted a NAK, i.e., the lowest value collected so far.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.minimumNakTransmissions(System.Int32)">
            <summary>
            Minimum number of times per lost message that a receiver transport
            transmitted a NAK. (LBT-RM only)
            </summary>
            <remarks>
            A value greater than 1 indicates a chronically lossy network.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>
            Minimum number of times per lost message that a receiver transport
            transmitted a NAK, i.e., the lowest value collected so far.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.meanNakTransmissions">
            <summary>
            Mean number of times per lost message that a receiver transport transmitted
            a NAK. (LBT-RM only)
            </summary>
            <remarks>
            Ideally this should be at or near 1. A higher value indicates a lossy
            network. This is an exponentially weighted moving average (weighted to more
            recent) for accumulated NAKs per lost message.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Mean number of times per lost message that a receiver transport
            transmitted a NAK.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.meanNakTransmissions(System.Int32)">
            <summary>
            Mean number of times per lost message that a receiver transport transmitted
            a NAK. (LBT-RM only)
            </summary>
            <remarks>
            Ideally this should be at or near 1. A higher value indicates a lossy
            network. This is an exponentially weighted moving average (weighted to more
            recent) for accumulated NAKs per lost message.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Mean number of times per lost message that a receiver transport
            transmitted a NAK.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.maximumNakTransmissions">
            <summary>
            Maximum number of times per lost message that a receiver transport
            transmitted a NAK. (LBT-RM only)
            </summary>
            <remarks>
            A value higher than 1 suggests that there may have been some unrecoverable
            loss on the network during the sample period. A significantly high value
            compared to the mean number) implies an isolated incident.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>
            Maximum number of times per lost message that a receiver transport
            transmitted a NAK, i.e., the highest value collected so far.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.maximumNakTransmissions(System.Int32)">
            <summary>
            Maximum number of times per lost message that a receiver transport
            transmitted a NAK. (LBT-RM only)
            </summary>
            <remarks>
            A value higher than 1 suggests that there may have been some unrecoverable
            loss on the network during the sample period. A significantly high value
            compared to the mean number) implies an isolated incident.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>
            Maximum number of times per lost message that a receiver transport
            transmitted a NAK, i.e., the highest value collected so far.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.duplicateMessages">
            <summary>
            Number of duplicate datagrams received (LBT-RM only)
            </summary>
            <remarks>
            A large number can indicate a lossy network, primarily due to other receiver
            transports requesting retransmissions that this receiver transport has already
            successfully received. Such duplicates require extra effort for filtering, and
            this should be investigated.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of duplicate datagrams received. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.duplicateMessages(System.Int32)">
            <summary>
            Number of duplicate datagrams received (LBT-RM only)
            </summary>
            <remarks>
            A large number can indicate a lossy network, primarily due to other receiver
            transports requesting retransmissions that this receiver transport has already
            successfully received. Such duplicates require extra effort for filtering, and
            this should be investigated.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of duplicate datagrams received. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.unrecoveredMessagesWindowAdvance">
            <summary>
            Number of datagrams unrecovered due to transmission window advance (LBT-RM only)
            </summary>
            <remarks>
            This means that the message was no longer in the source-side transmission
            window and therefore not retransmitted. The window size is set by transport
            configuration option lbtrm_transmission_window_size (default 24MB).
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>
            Number of datagrams unrecovered (LBM_MSG_UNRECOVERABLE_LOSS delivered to
            receiver application) due to transmission window advance.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.unrecoveredMessagesWindowAdvance(System.Int32)">
            <summary>
            Number of datagrams unrecovered due to transmission window advance (LBT-RM only)
            </summary>
            <remarks>
            This means that the message was no longer in the source-side transmission
            window and therefore not retransmitted. The window size is set by transport
            configuration option lbtrm_transmission_window_size (default 24MB).
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>
            Number of datagrams unrecovered (LBM_MSG_UNRECOVERABLE_LOSS delivered to
            receiver application) due to transmission window advance.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.unrecoveredMessagesNakGenerationTimeout">
            <summary>
            Number of LBT-RM datagrams unrecovered due to a retransmission not received
            within the NAK generation interval (LBT-RM only)
            </summary>
            <remarks>
            This is set by configuration option transport_lbtrm_nak_generation_interval;
            default 10,000ms. Note: Receivers for these messages' topics will also report
            related messages as unrecoverable, with LBM_MSG_UNRECOVERABLE_LOSS for an
            individual message and LBM_MSG_UNRECOVERABLE_LOSS_BURST for a burst loss
            event. However, it is possible for these application-level message
            declarations to occur even without increments to this counter, as the
            transport is unaware of the topic content of messages and may still be trying
            to deliver related lost packets.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>
            Number of LBT-RM datagrams unrecovered due to a retransmission not received
            within the NAK generation interval.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.unrecoveredMessagesNakGenerationTimeout(System.Int32)">
            <summary>
            Number of LBT-RM datagrams unrecovered due to a retransmission not received
            within the NAK generation interval (LBT-RM only)
            </summary>
            <remarks>
            This is set by configuration option transport_lbtrm_nak_generation_interval;
            default 10,000ms. Note: Receivers for these messages' topics will also report
            related messages as unrecoverable, with LBM_MSG_UNRECOVERABLE_LOSS for an
            individual message and LBM_MSG_UNRECOVERABLE_LOSS_BURST for a burst loss
            event. However, it is possible for these application-level message
            declarations to occur even without increments to this counter, as the
            transport is unaware of the topic content of messages and may still be trying
            to deliver related lost packets.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>
            Number of LBT-RM datagrams unrecovered due to a retransmission not received
            within the NAK generation interval.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.lbmMessagesReceived">
            <summary>
            Number of messages or message fragments received over a transport.
            (TCP, LBM-RM)
            </summary>
            <remarks>
            A single datagram may contain one or more messages or a fragment of a larger
            message. For fragmented messages larger than the transport's maximum size
            configuration option, this count reflects the number of datagrams used to
            constitute those messages. Thus, this number is equal to or greater than the
            datagram counter (messagesReceived, above). This number also includes
            messages received for which there was no interested receiver,
            tallied in the noTopicMessagesReceived counter (below).
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>
            Number of messages or message fragments received over a transport.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.lbmMessagesReceived(System.Int32)">
            <summary>
            Number of messages or message fragments received over a transport.
            (TCP, LBM-RM)
            </summary>
            <remarks>
            A single datagram may contain one or more messages or a fragment of a larger
            message. For fragmented messages larger than the transport's maximum size
            configuration option, this count reflects the number of datagrams used to
            constitute those messages. Thus, this number is equal to or greater than the
            datagram counter (messagesReceived, above). This number also includes
            messages received for which there was no interested receiver,
            tallied in the noTopicMessagesReceived counter (below).
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>
            Number of messages or message fragments received over a transport.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.lbmRequestsReceived">
            <summary>
            Number of UM request messages received (message type LBM_MSG_REQUEST)
            (TCP, LBT-RM)
            </summary>
            <remarks>
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>
            Number of UM request messages received (message type LBM_MSG_REQUEST)
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.lbmRequestsReceived(System.Int32)">
            <summary>
            Number of UM request messages received (message type LBM_MSG_REQUEST)
            (TCP, LBT-RM)
            </summary>
            <remarks>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>
            Number of UM request messages received (message type LBM_MSG_REQUEST)
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.noTopicMessagesReceived">
            <summary>
            Number of messages received that were not for a 
            topic of interest to the receiver (TCP, LBT-RM)
            </summary>
            <remarks>
            A high value (relative to, or approaching lbmMessagesReceived above) indicates
            more CPU time required to filter out uninteresting topics, in which case,
            consider reconfiguring sources to filter more aggressively at the transport
            layer.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>
            Number of messages received that were not for a topic of interest to the
            receiver.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.noTopicMessagesReceived(System.Int32)">
            <summary>
            Number of messages received that were not for a 
            topic of interest to the receiver (TCP, LBT-RM)
            </summary>
            <remarks>
            A high value (relative to, or approaching lbmMessagesReceived above) indicates
            more CPU time required to filter out uninteresting topics, in which case,
            consider reconfiguring sources to filter more aggressively at the transport
            layer.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>
            Number of messages received that were not for a topic of interest to the
            receiver.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.datagramsDroppedIncorrectSize">
            <summary>
            Number of datagrams discarded due to size.
            </summary>
            <remarks>
            This method returns a value from the first
            set of statistics encapsulated within this object
            </remarks>
            <returns>
            Number of datagrams discarded due to being smaller than the size designated
            in the datagram's size field.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.datagramsDroppedIncorrectSize(System.Int32)">
            <summary>
            Number of datagrams discarded due to size.
            </summary>
            <remarks>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>
            Number of datagrams discarded due to being smaller than the size designated
            in the datagram's size field.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.datagramsDroppedType">
            <summary>
            Number of datagrams discarded due to bad packet type.
            </summary>
            <remarks>
            The datagram's type field must match the expectations of the receiver
            transport.
            This method returns a value from the first
            set of statistics encapsulated within this object
            </remarks>
            <returns>Number of datagrams discarded due to bad packet type.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.datagramsDroppedType(System.Int32)">
            <summary>
            Number of datagrams discarded due to bad packet type.
            </summary>
            <remarks>
            The datagram's type field must match the expectations of the receiver
            transport.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams discarded due to bad packet type.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.datagramsDroppedVersion">
            <summary>
            Number of datagrams discarded due to version mismatch.
            </summary>
            <remarks>
            The datagram's version field must match the expectations of the receiver
            transport.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of datagrams discarded due to version mismatch.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.datagramsDroppedVersion(System.Int32)">
            <summary>
            Number of datagrams discarded due to version mismatch.
            </summary>
            <remarks>
            The datagram's version field must match the expectations of the receiver
            transport.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams discarded due to version mismatch.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.datagramsDroppedHeader">
            <summary>
            Number of datagrams discarded due to bad header type.
            </summary>
            <remarks>
            These datagrams appeared to be intact, but with an unrecognizable header
            format.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of datagrams discarded due to bad header type.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.datagramsDroppedHeader(System.Int32)">
            <summary>
            Number of datagrams discarded due to bad header type.
            </summary>
            <remarks>
            These datagrams appeared to be intact, but with an unrecognizable header
            format.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams discarded due to bad header type.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.datagramsDroppedSID">
            <summary>
            Number of datagrams discarded due to session ID mismatch.
            </summary>
            <remarks>
            These datagrams appeared to be correctly formed, but with an
            unmatched/unrecognized session ID field.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of datagrams discarded due to session ID mismatch.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.datagramsDroppedSID(System.Int32)">
            <summary>
            Number of datagrams discarded due to session ID mismatch.
            </summary>
            <remarks>
            These datagrams appeared to be correctly formed, but with an
            unmatched/unrecognized session ID field.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams discarded due to session ID mismatch.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.datagramsDroppedOther">
            <summary>
            Number of datagrams discarded due to other reasons.
            </summary>
            <remarks>
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>
            Number of unrecognizable datagrams discarded due to reasons other than those
            determined by the above counts. They could be garbled, or possibly be from
            foreign or incompatible software at the other end.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.datagramsDroppedOther(System.Int32)">
            <summary>
            Number of datagrams discarded due to other reasons.
            </summary>
            <remarks>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>
            Number of unrecognizable datagrams discarded due to reasons other than those
            determined by the above counts. They could be garbled, or possibly be from
            foreign or incompatible software at the other end.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.outOfOrder">
            <summary>
            Number of out-of-order datagrams received.
            </summary>
            <remarks>
            A datagram is counted as out of order if it fills a previously detected
            sequence gap, but is not a retransmission. Note that if the duplicates counter
            duplicate_data, above) increases along with this statistic, this implies the
            arrivals of retransmitted datagrams before their originals.
            This method returns a value from the first
            set of statistics encapsulated within this object.
            </remarks>
            <returns>Number of datagrams received out of order.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics.outOfOrder(System.Int32)">
            <summary>
            Number of out-of-order datagrams received.
            </summary>
            <remarks>
            A datagram is counted as out of order if it fills a previously detected
            sequence gap, but is not a retransmission. Note that if the duplicates counter
            duplicate_data, above) increases along with this statistic, this implies the
            arrivals of retransmitted datagrams before their originals.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams received out of order.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMMessageChannelInfo">
            <summary>
            Encapsulates information about channel data send with a message
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageChannelInfo.channelFlags">
            <summary>
            LBM channel flags.
            </summary>
            <seealso cfef="LBM.MSG_FLAG_NUMBERED_CHANNEL" />
            <returns> LBM channel flags. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageChannelInfo.channelNumber">
            <summary> 
            Channel number on which the current message has been delivered.
            </summary>
        </member>
        <member name="T:com.latencybusters.lbm.LBMMessage">
            <summary>
            <para>
            Encapsulates all LBM messages.
            </para>
            <para>
            Call dispose() to utilize Zero Object Delivery (ZOD), or promote() to retain message object after callback.
            You must call either one or the other.
            </para>
            <para>
            When using ZOD (Zero Object Delivery), access message data via dataPointer() and length().
            (For more information on ZOD, see <A href="../Design/lbm-objects.html#ZOD-RECEIVER">Zero Object Delivery (ZOD)</A>
            and <A href="../JavaAPI/html/index.html">Java API Overview</A>.)
            </para>
            <para>
            For object-based delivery (non-ZOD), access message data with data(), which creates a byte array object that
            contains the message data.
            </para>
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.resetData">
            <summary>
            Reset cached data fields.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.Finalize">
            <summary>
            LBMMessage finalization
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.dataPointer">
            <summary>
            Pointer to the beginning of the unmanaged data buffer for this message. For ZOD, use in conjunction with
            length() to determine how many bytes in the buffer are actually valid.
            </summary>
            <returns>Pointer to the beginning of the unmanaged data buffer for this message.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.dataPointerSafe">
            <summary>
            Return an IntPtr to the beginning of the unmanaged data buffer for this message. For ZOD, use in conjunction with
            length() to determine how many bytes in the buffer are actually valid.
            </summary>
            <returns>Pointer to the beginning of the unmanaged data buffer for this message.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.data">
            <summary>
            Message data.  Calling this method causes the data to be copied to a
            new byte array.  For better performance, use the dataPointer() method
            to access the data directly.
            </summary>
            <returns>byte array containing message data</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.smxReceiverPromote">
            <summary>
            Creates a pinned copy of _lbmmsg and detach from the current _lbmmsg.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.dataString">
            <summary>
            Message string data. Calling this method causes the data to be copied to a
            new byte array.  For better performance, use the dataPointer() method
            to access the data directly.
            </summary>
            <returns>Message data converted to a string</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.length">
            <summary>
            Message data length. For ZOD, use this in conjunction with dataPointer().
            </summary>
            <returns>LBM message length</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.type">
            <summary>
            LBM message type
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBM"/>
            </remarks>
            <returns>LBM message type</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.sequenceNumber">
            <summary>
            LBM message (or message fragment) sequence number
            </summary>
            <remarks>
            The sequence number of an LBM message is 32 bits. This field is a C#-style long 
            int (64 bits). Therefore, LBM only recognizes the lower 32 bits of this field.
            When using hot-failover, this will be the hot failover sequence number when using 32 bit
            and be zero when using 64 bit. To get the original sequence number when using hot-failover,
            use the osqn() method.
            </remarks>
            <seealso cref="M:com.latencybusters.lbm.LBMMessage.osqn"/>
            <returns>LBM message (or message fragment) sequence number</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.hfSequenceNumber64">
            <summary>
            Get the 64 bit hot failover sequence number.
            </summary>
            <returns>64 bit hot failover sequence number</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.hfSequenceNumber32">
            <summary>
            Get the 32 bit hot failover sequence number. 
            </summary>
            <returns>32 bit hot failover sequence number</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.source">
            <summary>
            Message source
            </summary>
            <returns>Message source string</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.sourceAsCharArray">
            <summary>
            Message source
            </summary>
            <returns>Message source char []</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.flags">
            <summary>
            LBM message flags
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBM"/>
            </remarks>
            <returns>LBM message flags</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.topicName">
            <summary>
            Topic on which the current message has been delivered.
            </summary>
            <returns>Topic name string</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.topicNameAsCharArray">
            <summary>
            Topic on which the current message has been delivered.
            </summary>
            <returns>Topic name char []</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.channelInfo">
            <summary>
            Holds information about any channel information included with the message.
            </summary>
            <returns>Channel info object or null if no channel information is present.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.firstFragmentSequenceNumber">
            <summary>
            LBM sequence number of the first fragment of the current message
            </summary>
            <returns>Sequence number of the first message fragment</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.fragmentOffset">
            <summary>
            Byte offset of the current fragment within the associated message
            </summary>
            <returns>Byte offset of the current fragment</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.totalMessageLength">
            <summary>
            Total message size.
            </summary>
            <remarks>
              This value may be larger than the length of the
              data byte array, if the current object represents a message fragment.
            </remarks>
            <returns>Total size (in bytes) of the current message</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.isFragment">
            <summary>
            Returns true if the current object is actually a message fragment
            </summary>
            <returns>true if the current object is a message fragment; otherwise, false.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.deregistrationSuccessInfo">
            <summary>
            Get an extended deregistration success info object from the message (only for
            LBM.MSG_UME_DEREGISTRATION_SUCCESS_EX messages).
            </summary>
            <returns>UMEDeregistrationSuccessInfo object holding extended deregistration success info.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.deregistrationCompleteInfo">
            <summary>
            Get an extended deregistration complete info object from the message
            (only for LBM.MSG_UME_DEREGISTRATION_COMPLETE_EX messages).
            </summary>
            <returns>UMEDeregistrationCompleteInfo object holding extended deregistration complete info.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.registrationSuccessInfo">
            <summary>
            Get an extended registration success info object from the message (only for
            LBM.MSG_UME_REGISTRATION_SUCCESS_EX messages).
            </summary>
            <returns>UMERegistrationSuccessInfo object holding extended registration success info.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.registrationCompleteInfo">
            <summary>
            Get an extended registration complete info object from the message
            (only for LBM.MSG_UME_REGISTRATION_COMPLETE_EX messages).
            </summary>
            <returns>UMERegistrationCompleteInfo object holding extended registration complete info.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.queueRegistrationCompleteInfo">
            <summary>
            Get an extended queue registration complete info object from the message
            (only for LBM.MSG_UMQ_REGISTRATION_COMPLETE_EX messages).
            </summary>
            <returns>UMQRegistrationCompleteInfo object holding extended queue registration complete info.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.queueDeregistrationCompleteInfo">
            <summary>
            Get an extended queue deregistration complete info object from the message
            (only for LBM.MSG_UMQ_DEREGISTRATION_COMPLETE_EX messages).
            </summary>
            <returns>UMQDeregistrationCompleteInfo object holding extended queue deregistration complete info.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.queueMessageId">
            <summary>
            The message ID assigned by the queue (UMQ only)
            </summary>
            <returns>The message ID assigned by the queue</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.queueIndexInfo">
            <summary>Retrieve index information from the message.</summary>
            <returns>UMQIndexInfo object holding queue index information.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.queueIndexAssignedInfo">
            <summary>Get a queue index assigned info object from the message
            only for LBM.MSG_UMQ_INDEX_ASSIGNED_EX messages).</summary>
            <returns>UMQIndexAssignedInfo object holding extended index assignment info.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.queueIndexReleasedInfo">
            <summary>Get a queue index released info object from the message
            only for LBM.MSG_UMQ_INDEX_RELEASED_EX messages).</summary>
            <returns>UMQIndexReleasedInfo object holding extended index release info.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.queueIndexAssignmentEligibilityStartCompleteInfo">
            <summary>Get a queue index assignment eligibility start complete info object from the message
            (only for LBM.MSG_UMQ_INDEX_ASSIGNMENT_ELIGIBILITY_START_COMPLETE_EX messages).</summary>
            <returns>UMQIndexAssignmentEligibilityStartCompleteInfo object holding extended index assignment eligibility start complete info.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.queueIndexAssignmentEligibilityStopCompleteInfo">
            <summary>Get a queue index assignment eligibility stop complete info object from the message
            (only for LBM.MSG_UMQ_INDEX_ASSIGNMENT_ELIGIBILITY_STOP_COMPLETE_EX messages).</summary>
            <returns>UMQIndexAssignmentEligibilityStopCompleteInfo object holding extended index assignment eligibility stop complete info.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.timestampSeconds">
            <summary>
            Seconds portion of the timestamp indicating when the message was received. 
            </summary>
            <returns>Number of whole seconds since Midnight, January 1st 1970 UTC.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.timestampMicroseconds">
            <summary>
            Microsecondseconds portion of the timestamp indicating when the message was received. 
            </summary>
            <returns>
            Number of fractional seconds since Midnight, January 1st 1970 UTC, 
            represented as an integer number of microseconds.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.properties">
            <summary>
            Retrieve the properties associated with this message.
            </summary>
            <returns>An LBMMessageProperties object containing all properties associated with this message.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.respond(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Send a response for this request message.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.<br/>
            <b>Warning</b>: You may be required to use GC.KeepAlive on the LBMMessage object after calling respond() in order to prevent premature garbage collection during execution of the respond() function call. Premature garbage collection can occur if there are no references made to the LBMMessage object following the respond() call.<br/>
            Possible OR'd set of flag value include:
            <see cref="F:com.latencybusters.lbm.LBM.SRC_NONBLOCK"/> and <see cref="F:com.latencybusters.lbm.LBM.SRC_BLOCK"/>.
            </remarks>
            <param name="data">Data to send in this response</param>
            <param name="dataLength">Number of bytes of data to send in this response</param>
            <param name="flags">Flags indicating various conditions</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.sendExplicitAck">
            <summary>
            Send an explicit ACK for this message (UME only).
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.canSendExplicitAck">
            <summary>
            Determine whether an explicit ACK can be used on this  message (UME).
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.reassign(System.Int32)">
            <summary>
            Do not acknowledge the given message and instead request that the message be reassigned.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="flags">Flags indicating various conditions. ORed set of values include:
            <see cref="F:com.latencybusters.lbm.LBM.MSG_UMQ_REASSIGN_FLAG_DISCARD"/>
            </param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.sourceRegistrationId">
            <summary>
            The registration ID for the source (UME only).
            </summary>
            <returns>The source registration ID</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.receiverRegistrationId">
            <summary>
            The registration ID for the receiver (UME only).
            </summary>
            <returns>The receiver registration ID</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.isFromGateway">
            <summary>
            Whether or not the message arrived via a gateway.
            </summary>
            <returns>boolean indicating if it arrived via a gateway.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.originalSequenceNumber">
            <summary>
            Original sequence number (if the message arrived via a gateway).
            </summary>
            <returns>Original sequence number.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.originalSource">
            <summary>
            Original message source (if the message arrived via a gateway).
            </summary>
            <returns>Original message source.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.originalSourceAsCharArray">
            <summary>
            Original message source (if the message arrived via a gateway)
            as character array
            </summary>
            <returns>Original message source as character array.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.sourceClientObject">
            <summary>
            Get the source client object for this message's source, as set by an LBMSourceCreationCallback callback delegate.
            </summary>
            <returns>Source client object.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.osqn">
            <summary>
            Get the original message sequence number set by the UM library. 
            </summary>
            <returns>Message original sequence number</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.extractUMEAck">
            <summary>
            Retrieves the ack structure from a UME message.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Message already acked, disposed, or not a UME message </exception>
            <returns>UMEMessageAck object that can be used to send explicit acks</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.Dispose">
            <summary>
            Dispose of this message immediately
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.dispose">
            <summary>
            Dispose of this message immediately (same as Dispose())
            <seealso cref="M:com.latencybusters.lbm.LBMMessage.Dispose"/>
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessage.promote">
            <summary>
            Use to continue processing the message on another thread, or after the callback returns. (Note: If the
            application does not call promote or dispose, UM promotes the object by default. However, for valid
            coding, you must call one or the other.)
            </summary>
            <returns>
            The promoted message.  This is not guaranteed to be the same message that the method
            was called on.
            </returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMMonitor">
            <summary>
            LBM Monitor class
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBMMonitor.FORMAT_CSV">
            <summary>
            Format type: Comma-separated values 
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBMMonitor.TRANSPORT_LBM">
            <summary>
            Transport type: LBM 
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBMMonitor.TRANSPORT_UDP">
            <summary>
            Transport type: UDP 
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBMMonitor.TRANSPORT_LBMSNMP">
            <summary>
            Transport type: LBMSNMP 
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBMMonitor.EINVAL">
            <summary>
            LBM Monitor error: An invalid argument was passed. 
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBMMonitor.ENOMEM">
            <summary>
            LBM Monitor error: Out of memory. 
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBMMonitor.EMODFAIL">
            <summary>
            LBM Monitor error: A call to a module function failed. 
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBMMonitor.ELBMFAIL">
            <summary>
            LBM Monitor error: A call to an LBM function failed. 
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBMMonitor.EAGAIN">
            <summary>
            LBM Monitor error: Insufficient resources. 
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBMMonitor.EALREADY">
            <summary>
            LBM Monitor error: Resource already registered. 
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBMMonitor.ATTR_SOURCE_NORMAL">
            <summary>
            Source/receiver statistics are from a normal transport session.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBMMonitor.ATTR_SOURCE_IM">
            <summary>
            Source/receiver statistics are from an immediate transport session.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitor.errorNumber">
            <summary>
            Returns last LBM Monitor error number
            </summary>
            <returns>LBM Monitor error number</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitor.errorMessage">
            <summary>
            Returns last LBM Monitor error message
            </summary>
            <returns>LBM Monitor error message</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMMonitorEAgainException">
            <summary>
            LBM Monitor insufficient resources exception class
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorEAgainException.#ctor(System.String)">
            <summary>
            Instantiate LBMMonitorEAgainException class
            </summary>
            <param name="errorMessage">Exception error message</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMMonitorEAlreadyException">
            <summary>
            LBM Monitor resource already registered exception class
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorEAlreadyException.#ctor(System.String)">
            <summary>
            Instantiate LBMMonitorEAlreadyException class
            </summary>
            <param name="errorMessage">Exception error message</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMMonitorEInvalException">
            <summary>
            LBM Monitor invalid value exception class
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorEInvalException.#ctor(System.String)">
            <summary>
            Instantiate LBMMonitorEInvalException class
            </summary>
            <param name="errorMessage">Exception error message</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMMonitorELBMFailException">
            <summary>
            LBM Monitor LBM failure exception class
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorELBMFailException.#ctor(System.String)">
            <summary>
            Instantiate LBMMonitorELBMFailException class
            </summary>
            <param name="errorMessage">Exception error message</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMMonitorEModFailException">
            <summary>
            LBM Monitor module function failure exception class
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorEModFailException.#ctor(System.String)">
            <summary>
            Instantiate LBMMonitorEModFailException class
            </summary>
            <param name="errorMessage">Exception error message</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMMonitorENoMemException">
            <summary>
            LBM Monitor out-of-memory exception class
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorENoMemException.#ctor(System.String)">
            <summary>
            Instantiate LBMMonitorENoMemException class
            </summary>
            <param name="errorMessage">Exception error message</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMMonitorReceiverStatisticsCallback">
            <summary>
            Received receiver statistics callback delegate
            </summary>
            <param name="lbmrcvstats">LBMReceiverStatistics object encapsulating
            the received receiver statistics</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMMonitorSourceStatisticsCallback">
            <summary>
            Received source statistics callback delegate
            </summary>
            <param name="lbmsrcstats">LBMSourceStatistics object encapsulating
            the received source statistics</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMMonitorEventQueueStatisticsCallback">
            <summary>
            Received event queue statistics callback delegate
            </summary>
            <param name="lbmevqstats">LBMEventQueueStatistics object encapsulating
            the received event queue statistics</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMMonitorContextStatisticsCallback">
            <summary>
            Received context statistics callback delegate
            </summary>
            <param name="lbmctxstats">LBMContextStatistics object encapsulating
            the received context statistics</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMMonitorImmediateMessageSourceStatisticsCallback">
            <summary>
            Received immediate message source statistics callback delegate.
            </summary>
            <param name="lbmimsrcstats">LBMImmediateMessageSourceStatistics object
            encapsulating the received immediate message source statistics.</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMMonitorImmediateMessageReceiverStatisticsCallback">
            <summary>
            Received immediate message receiver statistics callback delegate.
            </summary>
            <param name="lbmimrcvstats">LBMImmediateMessageReceiverStatistics object
            encapsulating the received immediate message receiver statistics.</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMMonitorReceiver">
            <summary>
            LBM Monitor Receiver class.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorReceiver.#ctor(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Create an LBM Monitoring Receiver Controller.
            This creates an instance of an LBM Monitoring Receive
            Controller.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Unsupported format type</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Unsupported transport type</exception>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="formatter">Format module type</param>
            <param name="formatOpts">A block of data which is passed to
            the format module's initialization function. This may be
            used to pass configuration options to the format module.
            </param>
            <param name="transport">Transport module type</param>
            <param name="transportOpts">A block of data which is passed
            to the transport module's initialization function. This may
            be used to pass configuration options to the transport
            module.
            </param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorReceiver.#ctor(System.Int32,System.String,System.Int32,System.String,com.latencybusters.lbm.LBMObjectRecyclerBase,System.Object)">
            <summary>
            Create an LBM Monitoring Receiver Controller.
            This creates an instance of an LBM Monitoring Receive
            Controller.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Unsupported format type</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Unsupported transport type</exception>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="formatter">Format module type</param>
            <param name="formatOpts">A block of data which is passed to
            the format module's initialization function. This may be
            used to pass configuration options to the format module.
            </param>
            <param name="transport">Transport module type</param>
            <param name="transportOpts">A block of data which is passed
            to the transport module's initialization function. This may
            be used to pass configuration options to the transport
            module.
            </param>
            <param name="recycler">an object recycler to handle recycling stats objects. Only the last callback
            should call the doneWith method to return the stat object back to the recycler.</param>
            <param name="objRecCbArg">a callback object token that will be passed to the recycler (normally null is used)</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorReceiver.Finalize">
            <summary>
            LBMMonitorReceiver finalization
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorReceiver.close">
            <summary>
            Close and dispose of this monitor receiver
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorReceiver.addStatisticsCallback(com.latencybusters.lbm.LBMMonitorSourceStatisticsCallback)">
            <summary>
            Register source statistics callbacks
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorSourceStatisticsCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMMonitorReceiver.removeStatisticsCallback(com.latencybusters.lbm.LBMMonitorSourceStatisticsCallback)"/>
            </remarks>
            <param name="cb">Callback implementing the
            LBMMonitorSourceStatisticsCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorReceiver.addStatisticsCallback(com.latencybusters.lbm.LBMMonitorReceiverStatisticsCallback)">
            <summary>
            Register receiver statistics callbacks
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorReceiverStatisticsCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMMonitorReceiver.removeStatisticsCallback(com.latencybusters.lbm.LBMMonitorReceiverStatisticsCallback)"/>
            </remarks>
            <param name="cb">Callback implementing the
            LBMMonitorReceiverStatisticsCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorReceiver.addStatisticsCallback(com.latencybusters.lbm.LBMMonitorEventQueueStatisticsCallback)">
            <summary>
            Register event queue statistics callbacks
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorEventQueueStatisticsCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMMonitorReceiver.removeStatisticsCallback(com.latencybusters.lbm.LBMMonitorEventQueueStatisticsCallback)"/>
            </remarks>
            <param name="cb">Callback implementing the
            LBMMonitorEventQueueStatisticsCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorReceiver.addStatisticsCallback(com.latencybusters.lbm.LBMMonitorContextStatisticsCallback)">
            <summary>
            Register context statistics callbacks
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorContextStatisticsCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMMonitorReceiver.removeStatisticsCallback(com.latencybusters.lbm.LBMMonitorContextStatisticsCallback)"/>
            </remarks>
            <param name="cb">Callback implementing the
            LBMMonitorContextStatisticsCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorReceiver.addStatisticsCallback(com.latencybusters.lbm.LBMMonitorImmediateMessageSourceStatisticsCallback)">
            <summary>
            Register immediate message source statistics callbacks
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorImmediateMessageSourceStatisticsCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMMonitorReceiver.removeStatisticsCallback(com.latencybusters.lbm.LBMMonitorImmediateMessageSourceStatisticsCallback)"/>
            </remarks>
            <param name="cb">Callback implementing the
            LBMMonitorImmediateMessageSourceStatisticsCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorReceiver.addStatisticsCallback(com.latencybusters.lbm.LBMMonitorImmediateMessageReceiverStatisticsCallback)">
            <summary>
            Register immediate message receiver statistics callbacks
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorImmediateMessageReceiverStatisticsCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMMonitorReceiver.removeStatisticsCallback(com.latencybusters.lbm.LBMMonitorImmediateMessageReceiverStatisticsCallback)"/>
            </remarks>
            <param name="cb">Callback implementing the
            LBMMonitorImmediateMessageReceiverStatisticsCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorReceiver.addStatisticsCallback(com.latencybusters.lbm.LBMMonitorSourceStatisticsCallback,com.latencybusters.lbm.LBMMonitorReceiverStatisticsCallback)">
            <summary>
            Register statistics callbacks
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorSourceStatisticsCallback"/>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorReceiverStatisticsCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMMonitorReceiver.removeStatisticsCallback(com.latencybusters.lbm.LBMMonitorSourceStatisticsCallback,com.latencybusters.lbm.LBMMonitorReceiverStatisticsCallback)"/>
            </remarks>
            <param name="scb">Callback implementing the
            LBMMonitorSourceStatisticsCallback delegate interface</param>
            <param name="rcb">Callback implementing the
            LBMMonitorReceiverStatisticsCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorReceiver.addStatisticsCallback(com.latencybusters.lbm.LBMMonitorSourceStatisticsCallback,com.latencybusters.lbm.LBMMonitorReceiverStatisticsCallback,com.latencybusters.lbm.LBMMonitorEventQueueStatisticsCallback,com.latencybusters.lbm.LBMMonitorContextStatisticsCallback)">
            <summary>
            Register statistics callbacks
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorSourceStatisticsCallback"/>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorReceiverStatisticsCallback"/>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorEventQueueStatisticsCallback"/>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorContextStatisticsCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMMonitorReceiver.removeStatisticsCallback(com.latencybusters.lbm.LBMMonitorSourceStatisticsCallback,com.latencybusters.lbm.LBMMonitorReceiverStatisticsCallback,com.latencybusters.lbm.LBMMonitorEventQueueStatisticsCallback,com.latencybusters.lbm.LBMMonitorContextStatisticsCallback)"/>
            </remarks>
            <param name="scb">Callback implementing the
            LBMMonitorSourceStatisticsCallback delegate interface</param>
            <param name="rcb">Callback implementing the
            LBMMonitorReceiverStatisticsCallback delegate interface</param>
            <param name="evqcb">Callback implementing the
            LBMMonitorEventQueueStatisticsCallback delegate interface</param>
            <param name="ctxcb">Callback implementing the
            LBMMonitorContextStatisticsCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorReceiver.removeStatisticsCallback(com.latencybusters.lbm.LBMMonitorSourceStatisticsCallback)">
            <summary>
            Deregister a previously registered source statistics callback.
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorSourceStatisticsCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMMonitorReceiver.addStatisticsCallback(com.latencybusters.lbm.LBMMonitorSourceStatisticsCallback)"/>
            </remarks>
            <param name="cb">Previously registered callback implementing
            the LBMMonitorSourceStatisticsCallback delegate interface
            </param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorReceiver.removeStatisticsCallback(com.latencybusters.lbm.LBMMonitorReceiverStatisticsCallback)">
            <summary>
            Deregister a previously registered receiver statistics
            callback.
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorReceiverStatisticsCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMMonitorReceiver.addStatisticsCallback(com.latencybusters.lbm.LBMMonitorReceiverStatisticsCallback)"/>
            </remarks>
            <param name="cb">Previously registered callback implementing
            the LBMMonitorReceiverStatisticsCallback delegate interface
            </param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorReceiver.removeStatisticsCallback(com.latencybusters.lbm.LBMMonitorEventQueueStatisticsCallback)">
            <summary>
            Deregister a previously registered event queue statistics
            callback.
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorEventQueueStatisticsCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMMonitorReceiver.addStatisticsCallback(com.latencybusters.lbm.LBMMonitorEventQueueStatisticsCallback)"/>
            </remarks>
            <param name="cb">Previously registered callback implementing
            the LBMMonitorEventQueueStatisticsCallback delegate interface
            </param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorReceiver.removeStatisticsCallback(com.latencybusters.lbm.LBMMonitorContextStatisticsCallback)">
            <summary>
            Deregister a previously registered context statistics
            callback.
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorContextStatisticsCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMMonitorReceiver.addStatisticsCallback(com.latencybusters.lbm.LBMMonitorContextStatisticsCallback)"/>
            </remarks>
            <param name="cb">Previously registered callback implementing
            the LBMMonitorContextStatisticsCallback delegate interface
            </param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorReceiver.removeStatisticsCallback(com.latencybusters.lbm.LBMMonitorImmediateMessageSourceStatisticsCallback)">
            <summary>
            Deregister a previously registered immediate message
            source statistics callback.
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorImmediateMessageSourceStatisticsCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMMonitorReceiver.addStatisticsCallback(com.latencybusters.lbm.LBMMonitorImmediateMessageSourceStatisticsCallback)"/>
            </remarks>
            <param name="cb">Previously registered callback implementing
            the LBMMonitorImmediateMessageSourceStatisticsCallback delegate interface
            </param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorReceiver.removeStatisticsCallback(com.latencybusters.lbm.LBMMonitorImmediateMessageReceiverStatisticsCallback)">
            <summary>
            Deregister a previously registered immediate message
            receiver statistics callback.
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorImmediateMessageReceiverStatisticsCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMMonitorReceiver.addStatisticsCallback(com.latencybusters.lbm.LBMMonitorImmediateMessageReceiverStatisticsCallback)"/>
            </remarks>
            <param name="cb">Previously registered callback implementing
            the LBMMonitorImmediateMessageReceiverStatisticsCallback delegate interface
            </param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorReceiver.removeStatisticsCallback(com.latencybusters.lbm.LBMMonitorSourceStatisticsCallback,com.latencybusters.lbm.LBMMonitorReceiverStatisticsCallback)">
            <summary>
            Deregister previously registered statistics callbacks.
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorSourceStatisticsCallback"/>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorReceiverStatisticsCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMMonitorReceiver.addStatisticsCallback(com.latencybusters.lbm.LBMMonitorSourceStatisticsCallback,com.latencybusters.lbm.LBMMonitorReceiverStatisticsCallback)"/>
            </remarks>
            <param name="scb">Previously registered callback implementing
            the LBMMonitorSourceStatisticsCallback delegate interface
            </param>
            <param name="rcb">Previously registered callback implementing
            the LBMMonitorReceiverStatisticsCallback delegate interface
            </param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorReceiver.removeStatisticsCallback(com.latencybusters.lbm.LBMMonitorSourceStatisticsCallback,com.latencybusters.lbm.LBMMonitorReceiverStatisticsCallback,com.latencybusters.lbm.LBMMonitorEventQueueStatisticsCallback,com.latencybusters.lbm.LBMMonitorContextStatisticsCallback)">
            <summary>
            Deregister previously registered statistics callbacks.
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorSourceStatisticsCallback"/>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorReceiverStatisticsCallback"/>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorEventQueueStatisticsCallback"/>
            <seealso cref="T:com.latencybusters.lbm.LBMMonitorContextStatisticsCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMMonitorReceiver.addStatisticsCallback(com.latencybusters.lbm.LBMMonitorSourceStatisticsCallback,com.latencybusters.lbm.LBMMonitorReceiverStatisticsCallback,com.latencybusters.lbm.LBMMonitorEventQueueStatisticsCallback,com.latencybusters.lbm.LBMMonitorContextStatisticsCallback)"/>
            </remarks>
            <param name="scb">Previously registered callback implementing
            the LBMMonitorSourceStatisticsCallback delegate interface
            </param>
            <param name="rcb">Previously registered callback implementing
            the LBMMonitorReceiverStatisticsCallback delegate interface
            </param>
            <param name="evqcb">Previously registered callback implementing
            the LBMMonitorEventQueueStatisticsCallback delegate interface</param>
            <param name="ctxcb">Previously registered callback implementing
            the LBMMonitorContextStatisticsCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorReceiver.Dispose">
            <summary>
            Same as <see cref="M:com.latencybusters.lbm.LBMMonitorReceiver.close"/>
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks><seealso cref="M:com.latencybusters.lbm.LBMMonitorReceiver.close"/></remarks>
        </member>
        <member name="T:com.latencybusters.lbm.LBMMonitorSource">
            <summary>
            LBM Monitor Source class.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorSource.#ctor(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Create an LBM Monitoring Source Controller.
            This creates an instance of an LBM Monitoring Source
            Controller.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Unsupported format type</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Unsupported transport type</exception>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="formatter">Format module type</param>
            <param name="formatOpts">A block of data which is passed to
            the format module's initialization function. This may be
            used to pass configuration options to the format module.
            </param>
            <param name="transport">Transport module type</param>
            <param name="transportOpts">A block of data which is passed
            to the transport module's initialization function. This may
            be used to pass configuration options to the transport
            module.
            </param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorSource.Finalize">
            <summary>
            LBMMonitorSource finalization
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorSource.close">
            <summary>
            Close and dispose of this monitor source
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorSource.start(com.latencybusters.lbm.LBMContext,System.String,System.Int32)">
            <summary>
            Register a context for monitoring. 
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            Monitoring may be done at regular intervals, specified by
            the secs parameter. As an alternative, passing zero for secs
            will not automatically monitor the context, but instead
            require an explicit call to the sample() method.
            <para>
            If monitoring is to be used as a form of heartbeat, the
            preferred method is to call the sample() method from a
            context thread or event queue timer callback. This ensures
            that the object actually processing the messages is the
            one generating the monitoring statistics, guaranteeing that
            it is truly acting as a heartbeat mechanism.
            </para>
            </remarks>
            <param name="lbmctx">LBMContext to be monitored</param>
            <param name="appSourceId">String containing an
            application-specified source identifier. If null or an
            empty string is passed, the application name will be used.
            </param>
            <param name="secs">Interval (in seconds) at which monitoring
            information will be gathered and sent. If zero, the context
            will not be automatically monitored, but instead will be
            monitored upon a call to the sample() method.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorSource.start(com.latencybusters.lbm.LBMReceiver,System.String,System.Int32)">
            <summary>
            Register a receiver for monitoring. 
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            Monitoring may be done at regular intervals, specified by
            the secs parameter. As an alternative, passing zero for
            secs will not automatically monitor the context, but instead
            require an explicit call to the sample() method.
            <para>
            If monitoring is to be used as a form of heartbeat, the
            preferred method is to call the sample() method from a
            context thread or event queue timer callback. This ensures
            that the object actually processing the messages is the one
            generating the monitoring statistics, guaranteeing that it
            is truly acting as a heartbeat mechanism.
            </para>
            </remarks>
            <param name="lbmrcv">LBMReceiver to be monitored</param>
            <param name="appSourceId">String containing an
            application-specified source identifier. If null or an empty
            string is passed, the application name will be used.</param>
            <param name="secs">Interval (in seconds) at which monitoring
            information will be gathered and sent. If zero, the receiver
            will not be automatically monitored, but instead will be
            monitored upon a call to the sample() method.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorSource.start(com.latencybusters.lbm.LBMHFXReceiver,System.String,System.Int32)">
            <summary>
            Register a HFX receiver for monitoring. 
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            Monitoring may be done at regular intervals, specified by
            the secs parameter. As an alternative, passing zero for
            secs will not automatically monitor the context, but instead
            require an explicit call to the sample() method.
            <para>
            If monitoring is to be used as a form of heartbeat, the
            preferred method is to call the sample() method from a
            context thread or event queue timer callback. This ensures
            that the object actually processing the messages is the one
            generating the monitoring statistics, guaranteeing that it
            is truly acting as a heartbeat mechanism.
            </para>
            </remarks>
            <param name="lbmrcv">LBMHFXReceiver to be monitored</param>
            <param name="appSourceId">String containing an
            application-specified source identifier. If null or an empty
            string is passed, the application name will be used.</param>
            <param name="secs">Interval (in seconds) at which monitoring
            information will be gathered and sent. If zero, the receiver
            will not be automatically monitored, but instead will be
            monitored upon a call to the sample() method.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorSource.start(com.latencybusters.lbm.LBMSource,System.String,System.Int32)">
            <summary>
            Register a source for monitoring. 
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            Monitoring may be done at regular intervals, specified by
            the secs parameter. As an alternative, passing zero for secs
            will not automatically monitor the source, but instead
            require an explicit call to the sample() method.
            <para>
            If monitoring is to be used as a form of heartbeat, the
            preferred method is to call the sample() method from a
            context thread or event queue timer callback. This ensures
            that the object actually processing the messages is the one
            generating the monitoring statistics, guaranteeing that it
            is truly acting as a heartbeat mechanism.
            </para>
            </remarks>
            <param name="lbmsrc">LBMSource to be monitored</param>
            <param name="appSourceId">String containing an
            application-specified source identifier. If null or an empty
            string is passed, the application name will be used.</param>
            <param name="secs">Interval (in seconds) at which monitoring
            information will be gathered and sent. If zero, the source
            will not be automatically monitored, but instead will be
            monitored upon a call to the sample() method.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorSource.start(com.latencybusters.lbm.LBMEventQueue,System.String,System.Int32)">
            <summary>
            Register an event queue for monitoring. 
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            Monitoring may be done at regular intervals, specified by
            the secs parameter. As an alternative, passing zero for secs
            will not automatically monitor the event queue, but instead
            require an explicit call to the sample() method.
            <para>
            If monitoring is to be used as a form of heartbeat, the
            preferred method is to call the sample() method from a
            context thread or event queue timer callback. This ensures
            that the object actually processing the messages is the one
            generating the monitoring statistics, guaranteeing that it
            is truly acting as a heartbeat mechanism.
            </para>
            </remarks>
            <param name="lbmevq">LBMEventQueue to be monitored</param>
            <param name="appSourceId">String containing an
            application-specified source identifier. If null or an empty
            string is passed, the application name will be used.</param>
            <param name="secs">Interval (in seconds) at which monitoring
            information will be gathered and sent. If zero, the event queue
            will not be automatically monitored, but instead will be
            monitored upon a call to the sample() method.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorSource.stop(com.latencybusters.lbm.LBMContext)">
            <summary>
            Terminate monitoring for a context. 
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            Unregister a context to prevent further monitoring of that
            context.
            </remarks>
            <param name="lbmctx">Previously registered LBMContext</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorSource.stop(com.latencybusters.lbm.LBMReceiver)">
            <summary>
            Terminate monitoring for a receiver. 
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            Unregister a receiver to prevent further monitoring of that
            receiver.
            </remarks>
            <param name="lbmrcv">Previously registered LBMReceiver</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorSource.stop(com.latencybusters.lbm.LBMSource)">
            <summary>
            Terminate monitoring for a source. 
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            Unregister a source to prevent further monitoring of that
            source.
            </remarks>
            <param name="lbmsrc">Previously registered LBMSource</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorSource.stop(com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Terminate monitoring for an event queue. 
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            Unregister an event queue to prevent further monitoring of that
            source.
            </remarks>
            <param name="lbmevq">Previously registered LBMEventQueue</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorSource.sample">
            <summary>
            Gather statistics for on-demand objects.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMonitorSource.Dispose">
            <summary>
            Same as <see cref="M:com.latencybusters.lbm.LBMMonitorSource.close"/>
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks><seealso cref="M:com.latencybusters.lbm.LBMMonitorSource.close"/></remarks>
        </member>
        <member name="T:com.latencybusters.lbm.LBMReceiverCallback">
            <summary>
            Received message callback delegate
            </summary>
            <param name="cbArg">Callback object token</param>
            <param name="lbmmsg">LBMMessage object encapsulating the received message</param>
            <returns>all return values are ignored</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMRegistrationIdCallback">
            <summary>
            Receiver registration ID callback delegate (UME only)
            </summary>
            <param name="cbArg">Callback object token</param>
            <param name="source">Name of the source for the ID</param>
            <param name="sourceRegId">Registration ID for the source</param>
            <returns>Registration ID to be used by the receiver</returns>
        </member>
        <member name="T:com.latencybusters.lbm.UMERegistrationIdExCallback">
            <summary>
            Receiver registration ID callback delegate, extended version (UME only)
            </summary>
            <param name="cbArg">Callback object token</param>
            <param name="cbInfo">Registration ID callback info; see <see cref="T:com.latencybusters.lbm.UMERegistrationIdExCallbackInfo"/></param>
            <returns>Registration ID to be used by the receiver.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.UMERecoverySequenceNumberCallback">
            <summary>
            Receiver recovery sequence number callback delegate
            </summary>
            <remarks>Sets the lowest sequence number to be requested during recovery.</remarks>
            <param name="cbArg">Callback object token.</param>
            <param name="cbInfo">Recovery sequence number info.  See <see cref="T:com.latencybusters.lbm.UMERecoverySequenceNumberCallbackInfo"/></param>
            <returns>This callback should always return 0.  The lowest requested sequence number should be set, if desired, by <see cref="M:com.latencybusters.lbm.UMERecoverySequenceNumberCallbackInfo.setLowSequenceNumber(System.UInt32)"/> before returning.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMSourceCreationCallback">
            <summary>
            Application callback for notification of creation of sources for a topic.
            </summary>
            <param name="sourceName">The unique source name string (e.g., "TCP:192.168.0.4:45789").</param>
            <param name="cbArg">Callback object token.</param>
            <returns>User-supplied callback object to pass in to corresponding <see cref="T:com.latencybusters.lbm.LBMSourceDeletionCallback"/> callback.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMReceiverCreationCallback">
            <summary>
            Application callback for notification of creation of a receiver for a topic.
            </summary>
            <param name="receiverName">The unique receiver name string (e.g., "TCP:192.168.0.4:45789").</param>
            <param name="cbArg">Callback object token.</param>
            <returns>User-supplied callback object to pass in to corresponding <see cref="T:com.latencybusters.lbm.LBMSourceDeletionCallback"/> callback.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMSourceDeletionCallback">
            <summary>
            Application callback for notification of deletion of sources for a topic.
            </summary>
            <param name="sourceName">The unique source name string (e.g., "TCP:192.168.0.4:45789").</param>
            <param name="cbArg">Callback object token.</param>
            <param name="sourceCbArg">Callback object token returned by the corresponding <see cref="T:com.latencybusters.lbm.LBMSourceCreationCallback"/>.</param>
            <returns></returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMReceiverAttributes">
            <summary>
            Encapsulates the set of default LBM receiver attributes
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverAttributes.#ctor">
            <summary>
            Instantiate LBMReceiverAttributes class
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverAttributes.#ctor(System.String,System.String)">
            <summary>
            Instantiate an LBMReceiverAttributes class using a context name and topic name from the xml configuration that
            must have been previously loaded.
            </summary>
            <param name="contextName">The context name under which this receiver is to be created</param>
            <param name="topicName">The receiver topic name under which this receiver is to be created</param>
            <exception ref="com.latencybusters.lbm.LBMException">The context name or receiver topic name is not permitted by XML configuration or other unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverAttributes.Finalize">
            <summary>
            LBMReceiverAttributes class finalization
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverAttributes.Dispose">
            <summary>
            Free memory associated with this set of attributes.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverAttributes.dispose">
            <summary>
            Free memory associated with this set of attributes (same as Dispose()). 
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverAttributes.Dispose"/>
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverAttributes.setFromXml(System.String,System.String)">
            <summary>
            Set values in an LBMReceiverAttributes class using a context name and topic name from the xml configuration that
            must have been previously loaded.
            </summary>
            <param name="contextName">The context name under which this receiver is to be created</param>
            <param name="topicName">The receiver topic name under which this receiver is to be created</param>
            <exception ref="com.latencybusters.lbm.LBMException">The context name or receiver topic name is not permitted by XML configuration or other unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverAttributes.dumpAttributeList">
            <summary>
            Dump source configuration options
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <returns>An array of LBMConfigOptions</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverAttributes.getValue(System.String)">
            <summary>
            Returns the current value of an attribute from this set of
            receiver-related attributes
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to retrieve</param>
            <returns>Value corresponding to the specified attribute name</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverAttributes.setValue(System.String,System.String)">
            <summary>
            Set the current value of an attribute in this set of
            receiver-related attributes
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to set</param>
            <param name="attributeValue">New attribute value</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverAttributes.setRegistrationIdCallback(com.latencybusters.lbm.LBMRegistrationIdCallback,System.Object)">
            <summary>
             Register a callback interface (and a callback handle argument) to be
             called to enable a receiver to set the registration ID it uses for a 
             given source (UME only).
            </summary>
            <remarks> This callback is called directly in line and does not use the event queue;
            therefore, the callback function used should not block or it will block the
            context thread processing.
            This API may not be called from a wildcard receiver create callback.
            Doing so will not result in the callbacks being called.
            <seealso cref="T:com.latencybusters.lbm.LBMRegistrationIdCallback"/>
            <seealso cref="T:com.latencybusters.lbm.LBMWildcardReceiverCreateCallback"/>
            </remarks>
            <param name="cb">An object implementing the LBMRegistrationIdCallback delegate interface</param>
            <param name="cbArg">Callback object passed as a token to the callback interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverAttributes.setRegistrationIdCallback(com.latencybusters.lbm.UMERegistrationIdExCallback,System.Object)">
            <summary>
             Register a callback interface (and a callback handle argument) to be
             called to enable a receiver to set the registration ID it uses for a 
             given source (UME only).
            </summary>
            <remarks> This callback is called directly in line and does not use the event queue;
            therefore, the callback function used should not block or it will block the
            context thread processing.
            This API may not be called from a wildcard receiver create callback.
            Doing so will not result in the callbacks being called.
            <seealso cref="T:com.latencybusters.lbm.UMERegistrationIdExCallback"/>
            <seealso cref="T:com.latencybusters.lbm.LBMWildcardReceiverCreateCallback"/>
            </remarks>
            <param name="cb">An object implementing the UMERegistrationIdExCallback delegate interface</param>
            <param name="cbArg">Callback object passed as a token to the callback interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverAttributes.setRecoverySequenceNumberCallback(com.latencybusters.lbm.UMERecoverySequenceNumberCallback,System.Object)">
            <summary>
            Register an extended callback interface (and a callback handle argument) to be
            called to enable a receiver to set the low sequence number it uses for
            recovery events (including late joins and durable subscriptions).
            </summary>
            <remarks>
            This callback is called directly in line and does not use the event queue;
            therefore, the callback function used should not block or it will block the
            context thread processing.
            This API may not be called from a wildcard receiver create callback.
            Doing so will not result in the callbacks being called.
            <seealso cref="T:com.latencybusters.lbm.LBMWildcardReceiverCreateCallback"/>
            </remarks>
            <param name="cb">An object implementing the UMERecoverySequenceNumberCallback delegate interface</param>
            <param name="cbArg">Callback object passed as a token to the callback interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverAttributes.setSourceNotificationCallbacks(com.latencybusters.lbm.LBMSourceCreationCallback,com.latencybusters.lbm.LBMSourceDeletionCallback,System.Object)">
            <summary>
            Set per-topic source creation and deletion notification callback functions.
            </summary>
            <remarks>
            This API may not be called from a wildcard receiver create callback.
            Doing so will not result in the callbacks being called.
            <seealso cref="T:com.latencybusters.lbm.LBMWildcardReceiverCreateCallback"/>
            </remarks>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Both source notification callbacks must be set or cleared at once.</exception>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="creationCb">Source creation callback delegate.</param>
            <param name="deletionCb">Source deletion callback delegate.</param>
            <param name="cbArg">Client-supplied callback object, returned to source creation and deletion callback methods.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverAttributes.setObjectRecycler(com.latencybusters.lbm.LBMObjectRecyclerBase,System.Object)">
            <summary>
            Set the LBM object recycler that can be used by the context to reuse LBMMessage objects as
            well as LBM Context/Receiver/Source Statistics objects.
            </summary>
            <param name="objRec">an LBM object recycler that will be called when objects need to be retrieved</param>
            <param name="objRecCbArg">a callback object token that will be passed in the retrieve method</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverAttributes.enableSingleReceiverCallback(System.Boolean)">
            <summary>
            If set to true, LBMReceivers, LBMHotFailoverReceivers, and 
            LBMWildcardReceivers will only accept a single LBMReceiverCallback.
            The addReceiver and removeReceiver APIs will become defunct and log
            a warning if used. This reduces the amount of syncronization work
            done per message and results in lower latencies. Set to false by 
            default.
            </summary>
            <param name="enabled">Set to true to enable single receiver callback mode. Set to false to disable.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverAttributes.getObjectRecycler">
            <summary>
            Get the LBM object recycler
            </summary>
            <returns>The object recycler if one has been set</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverAttributes.getObjectRecyclerCallbackArg">
            <summary>
            Get the LBM object recycler callback object token
            </summary>
            <returns>The object recycler callback object token that will be passed to retrieve methods</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMReceiverStatistics">
            <summary>
            LBM Receiver Transport Statistics
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor">
            <summary>
            Instantiate an empty object containing no statistics.
            </summary>
            <remarks>
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.refresh(com.latencybusters.lbm.LBMReceiver,System.Int32)"/>
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.Int32)">
            <summary>
            Instantiate object containing the aggregate set of statistics
            for a particular receiver.
            </summary>
            <remarks>
            This constructor will throw LBMEInvalException if maxStats is
            less than the the available number of transport statistical
            sets.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.refresh(com.latencybusters.lbm.LBMReceiver,System.Int32)"/>
            </remarks>
            <param name="lbmrcv">LBMReceiver object</param>
            <param name="maxStats">Maximum number of sources</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMHFXReceiver,System.Int32)">
            <summary>
            Instantiate object containing the aggregate set of statistics
            for a particular receiver.
            </summary>
            <remarks>
            This constructor will throw LBMEInvalException if maxStats is
            less than the the available number of transport statistical
            sets.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.refresh(com.latencybusters.lbm.LBMReceiver,System.Int32)"/>
            </remarks>
            <param name="lbmrcv">LBMHFXReceiver object</param>
            <param name="maxStats">Maximum number of sources</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMContext,System.Int32)">
            <summary>
            Instantiate object containing the aggregate set of statistics
            for a particular context
            </summary>
            <remarks>
            This constructor will throw LBMEInvalException if maxStats is
            less than the the available number of transport statistical
            sets.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.refresh(com.latencybusters.lbm.LBMReceiver,System.Int32)"/>
            </remarks>
            <param name="lbmctx">LBMContext object</param>
            <param name="maxStats">Maximum number of sources</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)">
            <summary>
            Instantiate object containing the current set of statistics
            for a particular receiver and source
            </summary>
            <remarks>
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.refresh(com.latencybusters.lbm.LBMReceiver,System.Int32)"/>
            </remarks>
            <param name="lbmrcv">LBMReceiver object</param>
            <param name="source">Source string (as returned by LBMMesage source())
            that specifies the set of statistics to retrieve</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMHFXReceiver,System.String)">
            <summary>
            Instantiate object containing the current set of statistics
            for a particular receiver and source
            </summary>
            <remarks>
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.refresh(com.latencybusters.lbm.LBMReceiver,System.Int32)"/>
            </remarks>
            <param name="lbmrcv">LBMHFXReceiver object</param>
            <param name="source">Source string (as returned by LBMMesage source())
            that specifies the set of statistics to retrieve</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.Dispose">
            <summary>
            Free memory associated with this set of statistics.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.dispose">
            <summary>
            Free memory associated with this set of statistics (same as Dispose()). 
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.Dispose"/>
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.refresh(com.latencybusters.lbm.LBMReceiver,System.Int32)">
            <summary>
            Refresh the aggregate set of statistics
            for a particular receiver.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            This method will throw LBMEInvalException if maxStats is
            less than the the available number of transport statistical
            sets.
            </remarks>
            <param name="lbmrcv">LBMReceiver object</param>
            <param name="maxStats">Maximum number of sources</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.refresh(com.latencybusters.lbm.LBMHFXReceiver,System.Int32)">
            <summary>
            Refresh the aggregate set of statistics
            for a particular receiver.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            This method will throw LBMEInvalException if maxStats is
            less than the the available number of transport statistical
            sets.
            </remarks>
            <param name="lbmrcv">LBMHFXReceiver object</param>
            <param name="maxStats">Maximum number of sources</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.refresh(com.latencybusters.lbm.LBMContext,System.Int32)">
            <summary>
            Refresh the aggregate set of statistics
            for a particular context
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            This method will throw LBMEInvalException if maxStats is
            less than the the available number of transport statistical
            sets.
            </remarks>
            <param name="lbmctx">LBMContext object</param>
            <param name="maxStats">Maximum number of sources</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.refresh(com.latencybusters.lbm.LBMReceiver,System.String)">
            <summary>
            Refresh the current set of statistics
            for a particular receiver and source
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <exception ref="com.latencybusters.lbm.LBMEOPException">Unknown transport</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Statistics not found</exception>
            <param name="lbmrcv">LBMReceiver object</param>
            <param name="source">Source string (as returned by LBMMesage source())
            that specifies the set of statistics to retrieve</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.refresh(com.latencybusters.lbm.LBMHFXReceiver,System.String)">
            <summary>
            Refresh the current set of statistics
            for a particular receiver and source
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <exception ref="com.latencybusters.lbm.LBMEOPException">Unknown transport</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Statistics not found</exception>
            <param name="lbmrcv">LBMHFXReceiver object</param>
            <param name="source">Source string (as returned by LBMMesage source())
            that specifies the set of statistics to retrieve</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.size">
            <summary>
            Number of transport statistical sets encapsulated within this object
            </summary>
            <returns>Statistical set size</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.type">
            <summary>
            Transport type (TCP, LBT-RM, LBT-RU, etc.)
            </summary>
            <remarks>
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            <seealso cref="T:com.latencybusters.lbm.LBM"/>
            </remarks>
            <returns>Transport type</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.type(System.Int32)">
            <summary>
            Transport type (TCP, LBT-RM, LBT-RU, etc.)
            </summary>
            <remarks>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            <seealso cref="T:com.latencybusters.lbm.LBM"/>
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Transport type</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.typeName">
            <summary>
            Transport type name (TCP, LBT-RM, LBT-RU, etc.).
            </summary>
            <remarks>
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been created
            using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            </remarks>
            <returns>Transport type name</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.typeName(System.Int32)">
            <summary>
            Transport type name (TCP, LBT-RM, LBT-RU, etc.).
            </summary>
            <remarks>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Transport type name</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.source">
            <summary>
            Source of transport as a string
            </summary>
            <remarks>
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            The string format depends on transport type and is described under
            LBMTransportSourceInfo.
            </remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMTransportSourceInfo"/>
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            <returns>Source of transport as a string</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.source(System.Int32)">
            <summary>
            Source of transport as a string
            </summary>
            <remarks>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            The string format depends on transport type and is described under
            LBMTransportSourceInfo.
            </remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMTransportSourceInfo"/>
            <param name="n">Statistics set index</param>
            <returns>Source of transport as a string</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.bytesReceived">
            <summary>
            Number of datagram bytes received (TCP, LBT-RM, LBT-RU, LBT-IPC, LBT-RDMA)
            </summary>
            <remarks>
            The total of
            lengths of all transport packets, including UM header information.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            </remarks>
            <returns>Number of bytes received. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.bytesReceived(System.Int32)">
            <summary>
            Number of datagram bytes received (TCP, LBT-RM, LBT-RU, LBT-IPC, LBT-RDMA)
            </summary>
            <remarks>
            The total of
            lengths of all transport packets, including UM header information.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of bytes received.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.messagesReceived">
            <summary>
            Number of datagrams received (LBT-RM, LBT-RU, LBT-IPC, LBT-RDMA)
            </summary>
            <remarks>
            Depending on batching settings, a single datagram may contain one or
            more messages, or a fragment of a larger message. Larger messages
            are split into fragment sizes limited by the transport's configuration
            option transport_xxxx_datagram_max_size.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            </remarks>
            <returns>Number of datagrams received. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.messagesReceived(System.Int32)">
            <summary>
            Number of datagrams received (LBT-RM, LBT-RU, LBT-IPC, LBT-RDMA)
            </summary>
            <remarks>
            Depending on batching settings, a single datagram may contain one or
            more messages, or a fragment of a larger message. Larger messages
            are split into fragment sizes limited by the transport's configuration
            option transport_xxxx_datagram_max_size.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams received.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.nakPacketsSent">
            <summary>
            Number of NAK packets sent by the receiver transport (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            UM batches NAKs into NAK packets to save network bandwidth. This should
            always be less than or equal to the number of individual NAKs sent (naksSent,
            below).
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            </remarks>
            <returns>Number of NAK packets sent. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.nakPacketsSent(System.Int32)">
            <summary>
            Number of NAK packets sent by the receiver transport (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            UM batches NAKs into NAK packets to save network bandwidth. This should
            always be less than or equal to the number of individual NAKs sent (naksSent,
            below).
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of NAK packets sent. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.naksSent">
            <summary>
            Number of individual NAKs sent by the receiver transport (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            This may differ from the tally of lost datagrams (below) due to reasons such as
            <list type="bullet">
            <item>
            Other receiver transports may have already sent a NAK for the same lost
            datagram, resulting in a retransmitted lost datagram (or an NCF) to arrive at
            this receiver transport before it has a chance to issue a NAK, or
            </item>
            <item>
            During periods of heavy loss, receiver transports may be forced to issue
            multiple NAKs per lost datagram (controlled by the transport's configuration
            options for NAK generation interval and NAK backoff interval)
            until either the retransmission is
            received or the datagram is declared unrecovered (which may ultimately lead to
            UM delivering an LBM_MSG_UNRECOVERABLE_LOSS notification to the receiver
            application).
            </item>
            </list>
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            </remarks>
            <returns>. Number of individual NAKs sent by the receiver transport. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.naksSent(System.Int32)">
            <summary>
            Number of individual NAKs sent by the receiver transport (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            This may differ from the tally of lost datagrams (below) due to reasons such as
            <list type="bullet">
            <item>
            Other receiver transports may have already sent a NAK for the same lost
            datagram, resulting in a retransmitted lost datagram (or an NCF) to arrive at
            this receiver transport before it has a chance to issue a NAK, or
            </item>
            <item>
            During periods of heavy loss, receiver transports may be forced to issue
            multiple NAKs per lost datagram (controlled by the transport's configuration
            options for NAK generation interval and NAK backoff interval)
            until either the retransmission is
            received or the datagram is declared unrecovered (which may ultimately lead to
            UM delivering an LBM_MSG_UNRECOVERABLE_LOSS notification to the receiver
            application).
            </item>
            </list>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of individual NAKs sent by the receiver transport. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.lost">
            <summary>
            Number of datagrams detected as lost (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            </remarks>
            <returns>Number of datagrams that have been detected as lost.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.lost(System.Int32)">
            <summary>
            Number of datagrams detected as lost (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams that have been detected as lost.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.ncfsIgnored">
            <summary>
            Number of NCFs received from a source transport with reason code "ignored"
            (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            If a source transport receives a NAK for a datagram that it has recently
            retransmitted, it sends an "NCF ignored" and does not retransmit. How
            recently" is determined by the configuration option for ignore interval.
            If this count is high, a
            receiver transport may be having trouble receiving retransmissions, or the
            ignore interval may be set too long.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            </remarks>
            <returns>Number of NCFs received from a source with the reason 
            code set to "ignored". </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.ncfsIgnored(System.Int32)">
            <summary>
            Number of NCFs received from a source transport with reason code "ignored"
            (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            If a source transport receives a NAK for a datagram that it has recently
            retransmitted, it sends an "NCF ignored" and does not retransmit. How
            recently" is determined by the configuration option for ignore interval.
            If this count is high, a
            receiver transport may be having trouble receiving retransmissions, or the
            ignore interval may be set too long.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of NCFs received from a source with the reason 
            code set to "ignored". </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.ncfsShed">
            <summary>
            Number of NCFs received with reason set to "shed" (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            When a source transport's retransmit queue and rate limiter are both at
            maximum, it responds to a NAK by sending an "NCF shed", and does not
            retransmit. The receiver transport should wait, then send another NAK. If this
            count is high, one or more crybaby receiver transports may be clogging the
            source transport's retransmit queue.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            </remarks>
            <returns>Number of NCFs that have been received with the reason 
            code set to "shed". </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.ncfsShed(System.Int32)">
            <summary>
            Number of NCFs received with reason set to "shed" (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            When a source transport's retransmit queue and rate limiter are both at
            maximum, it responds to a NAK by sending an "NCF shed", and does not
            retransmit. The receiver transport should wait, then send another NAK. If this
            count is high, one or more crybaby receiver transports may be clogging the
            source transport's retransmit queue.
            retransmission queue. 
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of NCFs that have been received with the reason 
            code set to "shed". </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.ncfsRetransmissionDelay">
            <summary>
            Number of NCFs received with reason code "rx_delay" (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            When a source transport's retransmit rate limiter prevents it from
            immediately retransmitting any more lost datagrams, it responds to a NAK by
            sending an "NCF rx_delay", then queues the retransmission for a later send.
            The receiver transport should wait for the retransmission and not immediately
            send another NAK. If this count is high, one or more crybaby receiver
            transports may be clogging the source transport's retransmit queue.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            </remarks>
            <returns>Number of NCFs that have been received with the reason 
            code set to "rx_delay". </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.ncfsRetransmissionDelay(System.Int32)">
            <summary>
            Number of NCFs received with reason code "rx_delay" (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            When a source transport's retransmit rate limiter prevents it from
            immediately retransmitting any more lost datagrams, it responds to a NAK by
            sending an "NCF rx_delay", then queues the retransmission for a later send.
            The receiver transport should wait for the retransmission and not immediately
            send another NAK. If this count is high, one or more crybaby receiver
            transports may be clogging the source transport's retransmit queue.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of NCFs that have been received with the reason 
            code set to "rx_delay". </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.ncfsUnknown">
            <summary>
            Number of NCFs received with reason code "unknown" (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            These are NCFs with a reason code this receiver transport does not
            recognize. After a delay (set by configuration option for NAK suppress
            interval), it resends the NAK.
            This counter should never be greater than 0 unless applications linked with
            different versions of Ultra Messaging software coexist on the same network.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            </remarks>
            <returns>Number of NCFs that have been received with the reason 
            code set to "unknown". </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.ncfsUnknown(System.Int32)">
            <summary>
            Number of NCFs received with reason code "unknown" (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            These are NCFs with a reason code this receiver transport does not
            recognize. After a delay (set by configuration option for NAK suppress
            interval), it resends the NAK.
            This counter should never be greater than 0 unless applications linked with
            different versions of Ultra Messaging software coexist on the same network.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of NCFs that have been received with the reason 
            code set to "unknown". </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.minimumRecoveryTime">
            <summary>
            Minimum time (in milliseconds) in which loss recovery 
            was accomplished (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            If this time is greater than configuration option for NAK backoff interval,
            it may be taking multiple NAKs to
            initiate retransmissions, indicating a lossy network.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            </remarks>
            <returns>
            Minimum time (in milliseconds), i.e., the shortest time recorded so far for
            a lost message to be recovered.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.minimumRecoveryTime(System.Int32)">
            <summary>
            Minimum time (in milliseconds) in which loss recovery 
            was accomplished (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            If this time is greater than configuration option for NAK backoff interval,
            it may be taking multiple NAKs to
            initiate retransmissions, indicating a lossy network.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>
            Minimum time (in milliseconds), i.e., the shortest time recorded so far for
            a lost message to be recovered.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.meanRecoveryTime">
            <summary>
            Mean time (in milliseconds) in which loss recovery was 
            accomplished (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            This is an exponentially weighted moving average (weighted to more recent)
            for accumulated measured recovery times. Ideally this field should be as close
            to your minimum recovery time (nak_stm_min, above) as possible. High mean
            recovery times indicate a lossy network.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            </remarks>
            <returns>Mean time (in milliseconds) in which loss recovery was 
            accomplished. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.meanRecoveryTime(System.Int32)">
            <summary>
            Mean time (in milliseconds) in which loss recovery was 
            accomplished (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            This is an exponentially weighted moving average (weighted to more recent)
            for accumulated measured recovery times. Ideally this field should be as close
            to your minimum recovery time (nak_stm_min, above) as possible. High mean
            recovery times indicate a lossy network.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Mean time (in milliseconds) in which loss recovery was 
            accomplished.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.maximumRecoveryTime">
            <summary>
            Maximum time (in milliseconds) in which loss recovery 
            was accomplished (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            If this time is near or equal to the configuration option setting for NAK
            generation interval, you have likely experienced
            some level of unrecoverable loss.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            </remarks>
            <returns>
            Maximum time (in milliseconds), i.e., the longest time recorded so far for a
            lost message to be recovered.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.maximumRecoveryTime(System.Int32)">
            <summary>
            Maximum time (in milliseconds) in which loss recovery 
            was accomplished (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            If this time is near or equal to the configuration option setting for NAK
            generation interval, you have likely experienced
            some level of unrecoverable loss.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>
            Maximum time (in milliseconds), i.e., the longest time recorded so far for a
            lost message to be recovered.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.minimumNakTransmissions">
            <summary>
            Minimum number of times per lost message that a receiver transport
            transmitted a NAK. (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            A value greater than 1 indicates a chronically lossy network.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            </remarks>
            <returns>
            Minimum number of times per lost message that a receiver transport
            transmitted a NAK, i.e., the lowest value collected so far.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.minimumNakTransmissions(System.Int32)">
            <summary>
            Minimum number of times per lost message that a receiver transport
            transmitted a NAK. (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            A value greater than 1 indicates a chronically lossy network.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>
            Minimum number of times per lost message that a receiver transport
            transmitted a NAK, i.e., the lowest value collected so far.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.meanNakTransmissions">
            <summary>
            Mean number of times per lost message that a receiver transport transmitted
            a NAK. (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            Ideally this should be at or near 1. A higher value indicates a lossy
            network. This is an exponentially weighted moving average (weighted to more
            recent) for accumulated NAKs per lost message.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            </remarks>
            <returns>Mean number of times per lost message that a receiver transport
            transmitted a NAK.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.meanNakTransmissions(System.Int32)">
            <summary>
            Mean number of times per lost message that a receiver transport transmitted
            a NAK. (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            Ideally this should be at or near 1. A higher value indicates a lossy
            network. This is an exponentially weighted moving average (weighted to more
            recent) for accumulated NAKs per lost message.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Mean number of times per lost message that a receiver transport
            transmitted a NAK.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.maximumNakTransmissions">
            <summary>
            Maximum number of times per lost message that a receiver transport
            transmitted a NAK. (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            A value higher than 1 suggests that there may have been some unrecoverable
            loss on the network during the sample period. A significantly high value
            compared to the mean number) implies an isolated incident.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            </remarks>
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            <returns>
            Maximum number of times per lost message that a receiver transport
            transmitted a NAK, i.e., the highest value collected so far.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.maximumNakTransmissions(System.Int32)">
            <summary>
            Maximum number of times per lost message that a receiver transport
            transmitted a NAK. (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            A value higher than 1 suggests that there may have been some unrecoverable
            loss on the network during the sample period. A significantly high value
            compared to the mean number) implies an isolated incident.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>
            Maximum number of times per lost message that a receiver transport
            transmitted a NAK, i.e., the highest value collected so far.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.duplicateMessages">
            <summary>
            Number of duplicate datagrams received (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            A large number can indicate a lossy network, primarily due to other receiver
            transports requesting retransmissions that this receiver transport has already
            successfully received. Such duplicates require extra effort for filtering, and
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            </remarks>
            <returns>Number of duplicate datagrams received. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.duplicateMessages(System.Int32)">
            <summary>
            Number of duplicate datagrams received (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            A large number can indicate a lossy network, primarily due to other receiver
            transports requesting retransmissions that this receiver transport has already
            successfully received. Such duplicates require extra effort for filtering, and
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of duplicate datagrams received. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.unrecoveredMessagesWindowAdvance">
            <summary>
            Number of datagrams unrecovered 
            due to transmission window advance (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            This means that the message was no longer in the source-side transmission
            window and therefore not retransmitted. The window size is set by the transport
            configuration option for transmission window size.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            </remarks>
            <returns>
            Number of datagrams unrecovered (LBM_MSG_UNRECOVERABLE_LOSS delivered to
            receiver application) due to transmission window advance.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.unrecoveredMessagesWindowAdvance(System.Int32)">
            <summary>
            Number of datagrams unrecovered 
            due to transmission window advance (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            This means that the message was no longer in the source-side transmission
            window and therefore not retransmitted. The window size is set by the transport
            configuration option for transmission window size.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>
            Number of datagrams unrecovered (LBM_MSG_UNRECOVERABLE_LOSS delivered to
            receiver application) due to transmission window advance.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.unrecoveredMessagesNakGenerationTimeout">
            <summary>
            Number of messages unrecoverable due to NAK generation expiration (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            This is controlled by the transport's 
            nak_generation_interval, with a default of 10000ms. This field 
            also includes messages declared unrecoverable due to a burst loss 
            event (LBM_MSG_UNRECOVERABLE_LOSS_BURST). 
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            </remarks>
            <returns>Number of datagrams that were unrecovered 
            (LBM_MSG_UNRECOVERABLE_LOSS message was delivered) because a 
            retransmission was not successfully received within the NAK 
            generation interval. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.unrecoveredMessagesNakGenerationTimeout(System.Int32)">
            <summary>
            Number of messages unrecoverable due to NAK generation expiration (LBT-RM, LBT-RU)
            </summary>
            <remarks>
            This is controlled by the transport's 
            nak_generation_interval, with a default of 10000ms. This field 
            also includes messages declared unrecoverable due to a burst loss 
            event (LBM_MSG_UNRECOVERABLE_LOSS_BURST). 
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams that were unrecovered 
            (LBM_MSG_UNRECOVERABLE_LOSS message was delivered) because a 
            retransmission was not successfully received within the NAK 
            generation interval.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.lbmMessagesReceived">
            <summary>
            Number of messages or message fragments received by the transport (TCP,
            LBM-RM, LBT-RU, LBT-IPC, LBT-RDMA)
            </summary>
            <remarks>
            A single datagram may contain one or more messages or a fragment of a larger
            message. For fragmented messages larger than the transport's configuration option
            transport_xxxxx_datagram_max_size, this count reflects the
            number of datagrams used to constitute those messages. Thus, this number is
            equal to or greater than the datagram counter (messagesReceived, above).
            This number
            also includes messages received for which there was no interested receiver,
            which is tallied in the noTopicMessagesReceived counter (below).
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            </remarks>
            <returns>
            Number of messages or message fragments received by the transport.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.lbmMessagesReceived(System.Int32)">
            <summary>
            Number of messages or message fragments received by the transport (TCP,
            LBM-RM, LBT-RU, LBT-IPC, LBT-RDMA)
            </summary>
            <remarks>
            A single datagram may contain one or more messages or a fragment of a larger
            message. For fragmented messages larger than the transport's configuration option
            transport_xxxxx_datagram_max_size, this count reflects the
            number of datagrams used to constitute those messages. Thus, this number is
            equal to or greater than the datagram counter (messagesReceived, above).
            This number
            also includes messages received for which there was no interested receiver,
            which is tallied in the noTopicMessagesReceived counter (below).
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>
            Number of messages or message fragments received by the transport.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.lbmRequestsReceived">
            <summary>
            Number of UM requests received (message type LBM_MSG_REQUEST)
            (TCP, LBM-RM, LBT-RU, LBT-IPC, LBT-RDMA)
            </summary>
            <remarks>
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            </remarks>
            <returns>Number of UM request messages received (message type
            LBM_MSG_REQUEST).</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.lbmRequestsReceived(System.Int32)">
            <summary>
            Number of UM requests received (message type LBM_MSG_REQUEST)
            (TCP, LBM-RM, LBT-RU, LBT-IPC, LBT-RDMA)
            </summary>
            <remarks>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of UM request messages received (message type
            LBM_MSG_REQUEST).</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.noTopicMessagesReceived">
            <summary>
            Number of messages received that were not for a 
            a topic of interest to the receiver (TCP, LBM-RM, LBT-RU, LBT-IPC, LBT-RDMA)
            </summary>
            <remarks>
            A high value (relative to, or approaching lbmMessagesReceived above) indicates
            more CPU time required to filter out uninteresting topics, in which case,
            consider reconfiguring sources to filter more aggressively at the transport
            layer.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMReceiverStatistics.#ctor(com.latencybusters.lbm.LBMReceiver,System.String)"/>
            </remarks>
            <returns>Number of application messages received that were not sent 
            on a topic of interest to the receiver. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.noTopicMessagesReceived(System.Int32)">
            <summary>
            Number of messages received that were not for a 
            a topic of interest to the receiver (TCP, LBM-RM, LBT-RU, LBT-IPC, LBT-RDMA)
            </summary>
            <remarks>
            A high value (relative to, or approaching lbmMessagesReceived above) indicates
            more CPU time required to filter out uninteresting topics, in which case,
            consider reconfiguring sources to filter more aggressively at the transport
            layer.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of application messages received that were not sent 
            on a topic of interest to the receiver.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.datagramsDroppedIncorrectSize">
            <summary>
            Number of datagrams discarded due to size.
            </summary>
            <remarks>
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            </remarks>
            <returns>
            Number of datagrams discarded due to being smaller than the size designated
            in the datagram's size field.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.datagramsDroppedIncorrectSize(System.Int32)">
            <summary>
            Number of datagrams discarded due to size.
            </summary>
            <remarks>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>
            Number of datagrams discarded due to being smaller than the size designated
            in the datagram's size field.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.datagramsDroppedType">
            <summary>
            Number of datagrams discarded due to bad packet type.
            </summary>
            <remarks>
            The datagram's type field must match the expectations of the receiver
            transport.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            </remarks>
            <returns>Number of datagrams discarded due to bad packet type.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.datagramsDroppedType(System.Int32)">
            <summary>
            Number of datagrams discarded due to bad packet type.
            </summary>
            <remarks>
            The datagram's type field must match the expectations of the receiver
            transport.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams discarded due to bad packet type.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.datagramsDroppedVersion">
            <summary>
            Number of datagrams discarded due to version mismatch.
            </summary>
            <remarks>
            The datagram's version field must match the expectations of the receiver
            transport.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            </remarks>
            <returns>Number of datagrams discarded due to version mismatch.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.datagramsDroppedVersion(System.Int32)">
            <summary>
            Number of datagrams discarded due to version mismatch.
            </summary>
            <remarks>
            The datagram's version field must match the expectations of the receiver
            transport.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams discarded due to version mismatch.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.datagramsDroppedHeader">
            <summary>
            Number of datagrams discarded due to bad header type.
            </summary>
            <remarks>
            These datagrams appeared to be intact, but with an unrecognizable header
            format.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            </remarks>
            <returns>Number of datagrams discarded due to bad header type.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.datagramsDroppedHeader(System.Int32)">
            <summary>
            Number of datagrams discarded due to bad header type.
            </summary>
            <remarks>
            These datagrams appeared to be intact, but with an unrecognizable header
            format.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams discarded due to bad header type.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.datagramsDroppedSID">
            <summary>
            Number of datagrams discarded due to session ID mismatch.
            </summary>
            <remarks>
            These datagrams appeared to be correctly formed, but with an
            unmatched/unrecognized session ID field.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            </remarks>
            <returns>Number of datagrams discarded due to session ID mismatch.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.datagramsDroppedSID(System.Int32)">
            <summary>
            Number of datagrams discarded due to session ID mismatch.
            </summary>
            <remarks>
            These datagrams appeared to be correctly formed, but with an
            unmatched/unrecognized session ID field.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams discarded due to session ID mismatch.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.datagramsDroppedOther">
            <summary>
            Number of datagrams discarded due to other reasons.
            </summary>
            <remarks>
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            </remarks>
            <returns>
            Number of unrecognizable datagrams discarded due to reasons other than those
            determined by the above counts. They could be garbled, or possibly be from
            foreign or incompatible software at the other end.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.datagramsDroppedOther(System.Int32)">
            <summary>
            Number of datagrams discarded due to other reasons.
            </summary>
            <remarks>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>
            Number of unrecognizable datagrams discarded due to reasons other than those
            determined by the above counts. They could be garbled, or possibly be from
            foreign or incompatible software at the other end.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.outOfOrder">
            <summary>
            Number of out-of-order datagrams received.
            </summary>
            <remarks>
            A datagram is counted as out of order if it fills a previously detected
            sequence gap, but is not a retransmission. Note that if the duplicates counter
            duplicate_data, above) increases along with this statistic, this implies the
            arrivals of retransmitted datagrams before their originals.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            </remarks>
            <returns>Number of datagrams received out of order.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMReceiverStatistics.outOfOrder(System.Int32)">
            <summary>
            Number of out-of-order datagrams received.
            </summary>
            <remarks>
            A datagram is counted as out of order if it fills a previously detected
            sequence gap, but is not a retransmission. Note that if the duplicates counter
            duplicate_data, above) increases along with this statistic, this implies the
            arrivals of retransmitted datagrams before their originals.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams received out of order.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMResponseCallback">
            <summary>
            Request response callback delegate
            </summary>
            <param name="cbArg">Callback object token</param>
            <param name="lbmreq">LBMRequest object corresponding to the original request</param>
            <param name="lbmmsg">LBMMessage object encapsulating the received message response</param>
            <returns>-1 indicates that the response could not be received and should be redelivered.
            (Note: if multiple callbacks are registered, a -1 return from any callback will cause the
            message to be redelivered to all the callbacks.)</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMRequest">
            <summary>
            LBM Request class
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMRequest.#ctor">
            <summary>
            Instantiate an LBM Request object
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMRequest.#ctor(System.Byte[],System.Int32)">
            <summary>
            Instantiate an LBM Request object
            </summary>
            <param name="data">Data to be sent with the request</param>
            <param name="dataLength">Data length</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMRequest.Finalize">
            <summary>
            LBMRequest finalization
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMRequest.close">
            <summary>
            Close and dispose of this request
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.
            </remarks>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMRequest.data">
            <summary>
            Get request data
            </summary>
            <returns>Byte array associated with this request</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMRequest.dataLength">
            <summary>
            Get request data length
            </summary>
            <returns>Length of data array associated with this request</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMRequest.data(System.Byte[],System.Int32)">
            <summary>
            Set request data
            </summary>
            <param name="data">Data byte array</param>
            <param name="dataLength">Length of data byte array</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMRequest.addResponseCallback(com.latencybusters.lbm.LBMResponseCallback)">
            <summary>
            Register a callback to be invoked when a response is received for this request
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMResponseCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMRequest.removeResponseCallback(com.latencybusters.lbm.LBMResponseCallback)"/>
            </remarks>
            <param name="cb">Callback implementing the LBMResponseCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMRequest.addResponseCallback(com.latencybusters.lbm.LBMResponseCallback,System.Object)">
            <summary>
            Register a callback to be invoked when a response is received for this request
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMResponseCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMRequest.removeResponseCallback(com.latencybusters.lbm.LBMResponseCallback)"/>
            </remarks>
            <param name="cb">Callback implementing the LBMResponseCallback delegate interface</param>
            <param name="cbArg">Callback token object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMRequest.removeResponseCallback(com.latencybusters.lbm.LBMResponseCallback)">
            <summary>
            Deregister a request response callback
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMResponseCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMRequest.addResponseCallback(com.latencybusters.lbm.LBMResponseCallback)"/>
            </remarks>
            <param name="cb">Previously registered callback implementing the
            LBMResponseCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMRequest.removeResponseCallback(com.latencybusters.lbm.LBMResponseCallback,System.Object)">
            <summary>
            Deregister a request response callback
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMResponseCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMRequest.addResponseCallback(com.latencybusters.lbm.LBMResponseCallback)"/>
            </remarks>
            <param name="cb">Previously registered callback implementing the
            LBMResponseCallback delegate interface</param>
            <param name="cbArg">Token for previously registered callback</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMRequest.setObjectRecycler(com.latencybusters.lbm.LBMObjectRecyclerBase,System.Object)">
            <summary>
            Set the LBM object recycler that can be used by the context to reuse LBMMessage objects as
            well as LBM Context/Receiver/Source Statistics objects.
            </summary>
            <param name="objRec">an LBM object recycler that will be called when objects need to be retrieved</param>
            <param name="objRecCbArg">a callback object token that will be passed in the retrieve method</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMRequest.Dispose">
            <summary>
            Same as <see cref="M:com.latencybusters.lbm.LBMRequest.close"/>
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks><seealso cref="M:com.latencybusters.lbm.LBMRequest.close"/></remarks>
        </member>
        <member name="T:com.latencybusters.lbm.LBMResolverEventAdvertisement">
             @author vsingh
            
        </member>
        <member name="M:com.latencybusters.lbm.LBMResolverEventAdvertisement.setEventParameters(System.Byte*,System.Byte*,System.Int64,System.Int64,System.Byte*,System.UInt32,System.UInt64,System.Int64,System.Int32,System.Int64,System.Byte,System.Byte*)">
                    Set the private members of the LBMResolverEventAdvertisement objects
                    @param tstring Topic name to send messages to, or null for non-topic
                    @param Pointer Transport string
                    @param tidx Topic index
                    @param doidx Source domain ID
                    @param otidx Pointer to Source OTID
                    @param stype Type of source (ULB, UMQ, UME, ...)
                    @param iflags Infomation about available options
                    @param did Sender's domain ID
                    @param cap_flags Capabilities of the source (UME,UMQ)
                    @param ver UM Version of the source
                    @param source_id_type Type of the source ID
                    @param src_id Pinter to Source ID
                    See next section for possible OR'd set of values.	
                    @return void
        </member>
        <member name="M:com.latencybusters.lbm.LBMResolverEventAdvertisement.getTopicIndex">
                    Returns Topic Index
                    @return topic_index
        </member>
        <member name="M:com.latencybusters.lbm.LBMResolverEventAdvertisement.getDomainID">
                    Returns source_domain_id
                    @return source_domain_id
        </member>
        <member name="M:com.latencybusters.lbm.LBMResolverEventAdvertisement.getOTID">
                    Returns otid
                    @return otid
        </member>
        <member name="M:com.latencybusters.lbm.LBMResolverEventAdvertisement.getSourceType">
                    Returns source_type
                    @return source_type
        </member>
        <member name="M:com.latencybusters.lbm.LBMResolverEventAdvertisement.getTopicString">
                    Returns topic_string
                    @return topic_string
        </member>
        <member name="M:com.latencybusters.lbm.LBMResolverEventAdvertisement.getTransportString">
                    Returns transport_string
                    @return transport_string
        </member>
        <member name="M:com.latencybusters.lbm.LBMResolverEventAdvertisement.getInfoFlags">
                    Returns info_flags
                    @return info_flags
        </member>
        <member name="M:com.latencybusters.lbm.LBMResolverEventAdvertisement.getSenderDomainId">
                    Returns domain_id of sender
                    @return domain_id
        </member>
        <member name="M:com.latencybusters.lbm.LBMResolverEventAdvertisement.getCapabilityFlags">
                    Returns capability_flags
                    @return capability_flags
        </member>
        <member name="M:com.latencybusters.lbm.LBMResolverEventAdvertisement.getVersion">
                    Returns version
                    @return version
        </member>
        <member name="M:com.latencybusters.lbm.LBMResolverEventAdvertisement.getSourceIdType">
                    Returns source_id_type
                    @return source_id_type
        </member>
        <member name="M:com.latencybusters.lbm.LBMResolverEventAdvertisement.getSourceId">
                    Returns source_id
                    @return source_id
        </member>
        <member name="F:com.latencybusters.lbm.LBMResolverEvent._type">
            
        </member>
        <member name="M:com.latencybusters.lbm.LBMResolverEvent.#ctor">
            Constructor 
            
        </member>
        <member name="M:com.latencybusters.lbm.LBMResolverEvent.getAdvertisementEvent">
                    Send returns LBMResolverEventAdvertisement
                    @return an LBMResolverEventAdvertisement object.
        </member>
        <member name="M:com.latencybusters.lbm.LBMResolverEvent.setAdvertisementEvent(com.latencybusters.lbm.LBMResolverEventAdvertisement)">
                    Assigns value to the _advertisementEvent
        </member>
        <member name="M:com.latencybusters.lbm.LBMResolverEvent.getType">
                    Returns the type of the Event  
                    @return _type corresponding to the specified attribute name
        </member>
        <member name="M:com.latencybusters.lbm.LBMResolverEvent.setType(System.Int32)">
                    Populates the Event Type field
        </member>
        <member name="T:com.latencybusters.lbm.LBMSourceEventCallback">
            <summary>
            Source event callback delegate
            </summary>
            <param name="cbArg">Callback object token</param>
            <param name="sourceEvent">LBMSourceEvent object encapsulating source event information</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMSourceChannelInfo">
            <summary>
            LBM Source Channel Info class.
            </summary>
            <remarks>
            Contains information required to send messages with channel information included.
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceChannelInfo.#ctor(com.latencybusters.lbm.LBMSource,System.Int64)">
            <summary> Instantiate an LBM Source Channel Info object associated with a given source.</summary>
            <param name="source">The LBMSource object that will be used to send messages on the channel to be created.</param>
            <param name="channel_number">A channel number in the range 0-4294967295.</param>
            <exception ref="com.latencybusters.lbm.LBMException"></exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceChannelInfo.close">
            <summary> 
            Reclaim resources associated with the underlying LBM data structures 
            once the channel info object will no longer be used.
            </summary>
        </member>
        <member name="T:com.latencybusters.lbm.LBMSourceEvent">
            <summary>
            Encapsulates LBM Source Events.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEvent.type">
            <summary>
            LBM Source Event type.
            </summary>
            <returns>LBM Source Event type</returns>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBM"/>
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEvent.registrationId">
            <summary>
            Registration ID associated with this event.
            </summary>
            <remarks>This value may not be valid for all event types.
            </remarks>
            <returns>Registration ID.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEvent.sequenceNumber">
            <summary>
            Sequence number associated with this event.
            </summary>
            <remarks>This value may not be valid for all event types.
            </remarks>
            <returns>Sequence number.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEvent.dataString">
            <summary>
            String data associated with this event.
            </summary>
            <remarks>This value may not be valid for all event types.
            </remarks>
            <returns>Event string data</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEvent.clientObject">
            <summary>
            Client callback object.
            </summary>
            <remarks>
            This object is specified by the application using another API method.
            <seealso cref="M:com.latencybusters.lbm.LBMSource.send(System.Byte[],System.Int32,System.Int32,System.Object)"/>
            </remarks>
            <returns>Client callback object</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEvent.sourceWakeupInfo">
            <summary>
            Source wakeup info object.
            </summary>
            <remarks>Contains extended information about a source wakeup event.</remarks>
            <returns>Source wakeup info object.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEvent.registrationSuccessInfo">
            <summary>
            Registration success info object.
            </summary>
            <remarks>Contains extended registration information.</remarks>
            <returns>Extended registration success info object.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEvent.registrationCompleteInfo">
            <summary>
            Registration complete info.
            </summary>
            <remarks>
            Contains extended registration complete information.
            </remarks>
            <returns>Registration complete info.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEvent.ackInfo">
            <summary>
            Gets extended ACK info.
            </summary>
            <returns>Ack info.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEvent.sequenceNumberInfo">
            <summary>
            Gets extended sequence number info.
            </summary>
            <returns>Sequence number info.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEvent.messageIdInfo">
            <summary>
            Gets an object describing teh message ID assigned to a message (UMQ only)
            </summary>
            <returns>A UMQSourceEventMessageIdInfo object containing message ID information</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEvent.queueAckInfo">
            <summary>
            Gets an object containing extended information about a stability acknowledgement event. (UMQ only)
            </summary>
            <returns>A UMQSourceEventAckInfo object with additional information about a stability ack event.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEvent.queueRegistrationCompleteInfo">
            <summary>
            Queue registration complete info. (UMQ only)
            </summary>
            <remarks>
            Contains extended queue registration complete information.
            </remarks>
            <returns>A UMQSourceVentRegistrationCompleteInfo object containing registration complete info.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEvent.ulbReceiverInfo">
            <summary>
            Gets an object containing extended information about a ULB receiver event. (UMQ only)
            </summary>
            <returns>A UMQSourceEventULBReceiverInfo object with additional information about a ULB receiver event.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEvent.ulbMessageInfo">
            <summary>
            Gets an object containing extended information about a ULB message event. (UMQ only)
            </summary>
            <returns>A UMQSourceEventULBMessageInfo object with additional information about a ULB message event.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEvent.flightSizeNotification">
            <summary>
            Gets an object containing flight size information.
            </summary>
            <returns>An LBMSourceEventFlightSizeNotification object with information about the current inflight.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEvent.promote">
            <summary>
            This method should be called if the application wishes to continue
            processing the source event on another thread, or after the source event callback returns.
            </summary>
            <returns>the promoted LBMSourceEvent</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEvent.dispose">
            <summary>
            This method should be called before the source event callback returns
            to indicate that the application is finished with the source event allowing it
            to be reused when processing a future source event
            </summary>
        </member>
        <member name="T:com.latencybusters.lbm.LBMMessageReclamationCallback">
            <summary>
            Forced message reclamation callback delegate (UME only).
            </summary>
            <remarks>
            This callback is invoked when retained UME source messages
            are forcibly reclaimed.
            </remarks>
            <param name="cbArg">Callback object token</param>
            <param name="topic">Name of the topic for the reclaimed message</param>
            <param name="seqnum">Sequence number of the message that is reclaimed</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMSourceAttributes">
            <summary>
            Encapsulates the set of default LBM source attributes
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceAttributes.#ctor">
            <summary>
            Instantiate LBMSourceAttributes class
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceAttributes.#ctor(System.String,System.String)">
            <summary>
            Instantiate an LBMSourceAttributes class using a context name and topic name from the xml configuration that
            must have been previously loaded.
            </summary>
            <param name="contextName">The context name under which this source is to be created</param>
            <param name="topicName">The source topic name under which this source is to be created</param>
            <exception ref="com.latencybusters.lbm.LBMException">The context name or source topic name is not permitted by XML configuration or other unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceAttributes.Finalize">
            <summary>
            LBMSourceAttributes class finalization
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceAttributes.Dispose">
            <summary>
            Free memory associated with this set of attributes.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceAttributes.dispose">
            <summary>
            Free memory associated with this set of attributes (same as Dispose()). 
            <seealso cref="M:com.latencybusters.lbm.LBMSourceAttributes.Dispose"/>
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceAttributes.setFromXml(System.String,System.String)">
            <summary>
            Set values in an LBMSourceAttributes class using a context name and topic name from the xml configuration that
            must have been previously loaded.
            </summary>
            <param name="contextName">The context name under which this source is to be created</param>
            <param name="topicName">The source topic name under which this source is to be created</param>
            <exception ref="com.latencybusters.lbm.LBMException">The context name or source topic name is not permitted by XML configuration or other unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceAttributes.dumpAttributeList">
            <summary>
            Dump source configuration options
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <returns>An array of LBMConfigOptions</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceAttributes.getValue(System.String)">
            <summary>
            Returns the current value of an attribute from this set of 
            source-related attributes
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to retrieve</param>
            <returns>Value corresponding to the specified attribute name</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceAttributes.setValue(System.String,System.String)">
            <summary>
            Set the current value of an attribute in this set of
            source-related attributes
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to set</param>
            <param name="attributeValue">New attribute value</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceAttributes.setObjectRecycler(com.latencybusters.lbm.LBMObjectRecyclerBase,System.Object)">
            <summary>
            Set the LBM object recycler that can be used by the context to reuse LBMMessage objects as
            well as LBM Context/Receiver/Source Statistics objects.
            </summary>
            <param name="objRec">an LBM object recycler that will be called when objects need to be retrieved</param>
            <param name="objRecCbArg">a callback object token that will be passed in the retrieve method</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceAttributes.getObjectRecycler">
            <summary>
            Get the LBM object recycler
            </summary>
            <returns>The object recycler if one has been set</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceAttributes.getObjectRecyclerCallbackArg">
            <summary>
            Get the LBM object recycler callback object token
            </summary>
            <returns>The object recycler callback object token that will be passed to retrieve methods</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceAttributes.getStores">
            <summary>
            Gets an array of the UME stores this source has configuration entries for.
            </summary>
            <returns>An array of UMEStoreEntry objects. Each member of the array
            contains information about a different UME store.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceAttributes.getStoreGroups">
            <summary>
            Gets an array of the UME store groups this source has configured.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <returns>An array of UMEStoreGroupEntry objects. Each member of the array
            contains information about a different UME store group.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceAttributes.setMessageReclamationCallback(com.latencybusters.lbm.LBMMessageReclamationCallback,System.Object)">
            <summary>
            Register a callback interface (and a callback handle argument) to be
            called when a message is forcibly reclaimed from the collection of
            retained messages on a UME source (UME only).
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            This callback is called directly in line and does not use the event queue;
            therefore, the callback function used should not block or it will block the
            context thread processing.
            <seealso cref="T:com.latencybusters.lbm.LBMMessageReclamationCallback"/>
            </remarks>
            <param name="cb">An object implementing the LBMMessageReclamationCallback delegate interface</param>
            <param name="cbArg">Callback object passed as a token to the callback interface</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMSourceStatistics">
            <summary>
            LBM Source Transport Statistics
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.#ctor">
            <summary>
            Instantiate an empty object containing no statistics.
            </summary>
            <remarks>
            <seealso cref="M:com.latencybusters.lbm.LBMSourceStatistics.refresh(com.latencybusters.lbm.LBMContext,System.Int32)"/>
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.#ctor(com.latencybusters.lbm.LBMContext,System.Int32)">
            <summary>
            Instantiate object containing the current set of
            source transport statistics for a given LBM source
            </summary>
            <remarks>
            This constructor will throw LBMEInvalException if maxStats is
            less than the the available number of transport statistical
            sets.
            <seealso cref="M:com.latencybusters.lbm.LBMSourceStatistics.refresh(com.latencybusters.lbm.LBMContext,System.Int32)"/>
            </remarks>
            <param name="lbmctx">LBMContext object associated with statistics to be retrieved</param>
            <param name="maxStats">Maximum number of statistical sets to retrieve</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.#ctor(com.latencybusters.lbm.LBMSource)">
            <summary>
            Instantiate object containing the current set of
            source transport statistics for a given LBM source
            </summary>
            <remarks>
            <seealso cref="M:com.latencybusters.lbm.LBMSourceStatistics.refresh(com.latencybusters.lbm.LBMContext,System.Int32)"/>
            </remarks>
            <param name="lbmsrc">LBMSource object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.Dispose">
            <summary>
            Free memory associated with this set of statistics.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.dispose">
            <summary>
            Free memory associated with this set of statistics (same as Dispose()). 
            <seealso cref="M:com.latencybusters.lbm.LBMSourceStatistics.Dispose"/>
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.refresh(com.latencybusters.lbm.LBMContext,System.Int32)">
            <summary>
            Refresh the current set of
            source transport statistics for a given LBM source
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            This method will throw LBMEInvalException if maxStats is
            less than the the available number of transport statistical
            sets.
            </remarks>
            <param name="lbmctx">LBMContext object associated with statistics to be retrieved</param>
            <param name="maxStats">Maximum number of statistical sets to retrieve</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.refresh(com.latencybusters.lbm.LBMSource)">
            <summary>
            Refresh the current set of
            source transport statistics for a given LBM source
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <exception ref="com.latencybusters.lbm.LBMEOPException">Unknown transport</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Statistics not found</exception>
            <param name="lbmsrc">LBMSource object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.size">
            <summary>
            Number of statistical sets encapsulated within this object
            </summary>
            <returns>Statistical set size</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.type">
            <summary>
            Transport type (TCP, LBT-RM, LBT-RU, etc.)
            </summary>
            <remarks>
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMSourceStatistics.#ctor(com.latencybusters.lbm.LBMSource)"/>
            <seealso cref="T:com.latencybusters.lbm.LBM"/>
            </remarks>
            <returns>Transport type</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.type(System.Int32)">
            <summary>
            Transport type (TCP, LBT-RM, LBT-RU, etc.)
            </summary>
            <remarks>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            <seealso cref="T:com.latencybusters.lbm.LBM"/>
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Transport type</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.typeName">
            <summary>
            Transport type name (TCP, LBT-RM, LBT-RU, etc.).
            </summary>
            <remarks>
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been created
            using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMSourceStatistics.#ctor(com.latencybusters.lbm.LBMSource)"/>
            </remarks>
            <returns>Transport type name</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.typeName(System.Int32)">
            <summary>
            Transport type name (TCP, LBT-RM, LBT-RU, etc.).
            </summary>
            <remarks>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Transport type name</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.source">
            <summary>
            Source of transport as a string
            </summary>
            <remarks>
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            The string format depends on transport type and is described under
            LBMTransportSourceInfo.
            <seealso cref="M:com.latencybusters.lbm.LBMSourceStatistics.#ctor(com.latencybusters.lbm.LBMSource)"/>
            </remarks>
            <returns>Source of transport as a string</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.source(System.Int32)">
            <summary>
            Source of transport as a string
            </summary>
            <remarks>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            The string format depends on transport type and is described under
            LBMTransportSourceInfo.
            </remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMTransportSourceInfo"/>
            <param name="n">Statistics set index</param>
            <returns>Source of transport as a string</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.numberOfClients">
            <summary>
            Number of receiver clients currently connected over this transport
            (TCP, LBT-RU, LBT-IPC, LBT-RDMA).
            </summary>
            <remarks>
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMSourceStatistics.#ctor(com.latencybusters.lbm.LBMSource)"/>
            </remarks>
            <returns>Number of receiver clients currently connected over this
            transport.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.numberOfClients(System.Int32)">
            <summary>
            Number of receiver clients currently connected over this transport
            (TCP, LBT-RU, LBT-IPC, LBT-RDMA).
            </summary>
            <remarks>
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of receiver clients currently connected over this
            transport.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.bytesBuffered">
            <summary>
            Number of bytes currently in UM's TCP buffer (TCP only)
            </summary>
            <remarks>
            This count is affected by the number of receivers,and configuration options
            transport_tcp_multiple_receiver_behavior and transport_session_maximum_buffer.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMSourceStatistics.#ctor(com.latencybusters.lbm.LBMSource)"/>
            </remarks>
            <returns>Number of bytes currently in UM's TCP buffer, i.e., a snapshot.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.bytesBuffered(System.Int32)">
            <summary>
            Number of bytes currently in UM's TCP buffer (TCP only)
            </summary>
            <remarks>
            This count is affected by the number of receivers,and configuration options
            transport_tcp_multiple_receiver_behavior and transport_session_maximum_buffer.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of bytes currently in UM's TCP buffer, i.e., a snapshot.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.messagesSent">
            <summary>
            Number of datagrams sent (LBT-RM, LBT-RU, LBT-IPC, LBT-RDMA).
            </summary>
            <remarks>
            Depending on batching settings, a single datagram may contain one or
            more messages, or a fragment of a larger message. Larger messages
            are split into fragment sizes limited by their transport's configuration option
            setting.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMSourceStatistics.#ctor(com.latencybusters.lbm.LBMSource)"/>
            </remarks>
            <returns>Number of datagrams sent.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.messagesSent(System.Int32)">
            <summary>
            Number of datagrams sent (LBT-RM, LBT-RU, LBT-IPC, LBT-RDMA).
            </summary>
            <remarks>
            Depending on batching settings, a single datagram may contain one or
            more messages, or a fragment of a larger message. Larger messages
            are split into fragment sizes limited by their transport's configuration option
            setting.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams sent.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.bytesSent">
            <summary>
            Number of datagram bytes sent (LBT-RM, LBT-RU, LBT-IPC, LBT-RDMA).
            </summary>
            <remarks>
            Includes the total length of all transport packets, 
            including UM header information. 
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMSourceStatistics.#ctor(com.latencybusters.lbm.LBMSource)"/>
            </remarks>
            <returns>Number of datagram bytes sent, i.e., the total of lengths of all
            packets including UM header information.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.bytesSent(System.Int32)">
            <summary>
            Number of datagram bytes sent (LBT-RM, LBT-RU, LBT-IPC, LBT-RDMA).
            </summary>
            <remarks>
            Includes the total length of all transport packets, 
            including UM header information.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagram bytes sent, i.e., the total of lengths of all
            packets including UM header information.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.transmissionWindowMessages">
            <summary>
            Number of datagrams in the transmission window (LBT-RM only).
            </summary>
            <remarks>
            Each source transport session maintains a transmission window buffer (the
            size of which is set by transport_lbtrm_transmission_window_size, default
            24MB). When the source transport receives a NAK, the corresponding message for
            retransmission must be found in this transmission window.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMSourceStatistics.#ctor(com.latencybusters.lbm.LBMSource)"/>
            </remarks>
            <returns>Number of datagrams in the transmission window.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.transmissionWindowMessages(System.Int32)">
            <summary>
            Number of datagrams in the transmission window (LBT-RM only).
            </summary>
            <remarks>
            Each source transport session maintains a transmission window buffer (the
            size of which is set by transport_lbtrm_transmission_window_size, default
            24MB). When the source transport receives a NAK, the corresponding message for
            retransmission must be found in this transmission window.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams in the transmission window.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.transmissionWindowBytes">
            <summary>
            Number of bytes currently in the transmission window (LBT-RM only)
            </summary>
            <remarks>
            Number of bytes currently in the transmission window. 
            Typically, this count approaches its window size or exceeds it by a small
            amount.
            See transmissionWindowMessages for a description of the 
            transmission window. 
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMSourceStatistics.#ctor(com.latencybusters.lbm.LBMSource)"/>
            </remarks>
            <returns>Number of bytes currently in the transmission window</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.transmissionWindowBytes(System.Int32)">
            <summary>
            Number of bytes currently in the transmission window (LBT-RM only)
            </summary>
            <remarks>
            Number of bytes currently in the transmission window. 
            Typically, this count approaches its window size or exceeds it by a small
            amount.
            See transmissionWindowMessages for a description of the 
            transmission window. 
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of bytes currently in the transmission window</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.nakPacketsReceived">
            <summary>
            Number of NAK packets received by this source transport (LBT-RM, LBT-RU).
            </summary>
            <remarks>
            UM batches NAKs into NAK packets to save network bandwidth. This should
            always be less than or equal to naksReceived (below).
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMSourceStatistics.#ctor(com.latencybusters.lbm.LBMSource)"/>
            </remarks>
            <returns>Number of NAK packets received by this source transport.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.nakPacketsReceived(System.Int32)">
            <summary>
            Number of NAK packets received by this source transport (LBT-RM, LBT-RU).
            </summary>
            <remarks>
            UM batches NAKs into NAK packets to save network bandwidth. This should
            always be less than or equal to naksReceived (below).
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of NAK packets received by this source transport.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.naksReceived">
            <summary>
            Number of individual NAKs received by the source transport (LBT-RM, LBT-RU).
            </summary>
            <remarks>
            When a source transport receives a NAK from a receiver transport, it may
            respond by re-transmitting the requested datagram, or it may send an
            NCF. The NAKing receiver transport responds to the NCF by waiting (timeout
            set by the transport's NAK suppress interval option, default 1000 ms), then
            re-sending the NAK.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMSourceStatistics.#ctor(com.latencybusters.lbm.LBMSource)"/>
            </remarks>
            <returns>Number of individual NAKs received by the source transport.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.naksReceived(System.Int32)">
            <summary>
            Number of individual NAKs received by the source transport (LBT-RM, LBT-RU).
            </summary>
            <remarks>
            When a source transport receives a NAK from a receiver transport, it may
            respond by re-transmitting the requested datagram, or it may send an
            NCF. The NAKing receiver transport responds to the NCF by waiting (timeout
            set by the transport's NAK suppress interval option, default 1000 ms), then
            re-sending the NAK.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of individual NAKs received by the source transport.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.naksIgnored">
            <summary>
            Number of NAKs this source transport ignored and sent an NCF with reason
            code "ignored" (LBT-RM, LBT-RU).
            </summary>
            <remarks>
            A source transport ignores a NAK for a datagram it has already recently
            retransmitted. How "recently" is determined by the configuration option source
            transport_lbtrm_ignore_interval (default 500ms). If this count is high, a
            receiver transport may be having trouble receiving retransmissions, or the
            ignore interval may be set too long.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMSourceStatistics.#ctor(com.latencybusters.lbm.LBMSource)"/>
            </remarks>
            <returns>Number of NAKs this source transport ignored and sent an NCF with
            reason code set to "ignored".</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.naksIgnored(System.Int32)">
            <summary>
            Number of NAKs this source transport ignored and sent an NCF with reason
            code "ignored" (LBT-RM, LBT-RU).
            </summary>
            <remarks>
            A source transport ignores a NAK for a datagram it has already recently
            retransmitted. How "recently" is determined by the configuration option source
            transport_lbtrm_ignore_interval (default 500ms). If this count is high, a
            receiver transport may be having trouble receiving retransmissions, or the
            ignore interval may be set too long.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of NAKs this source transport ignored and sent an NCF with
            reason code set to "ignored".</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.naksShed">
            <summary>
            Number of NAKs this source transport has shed and sent an NCF with reason
            code "shed" (LBT-RM, LBT-RU).
            </summary>
            <remarks>
            When a source transport's retransmit rate limiter and retransmit queue are
            both at maximum, it responds to a NAK by sending an "NCF shed", and does not
            retransmit. The receiver transport should wait, then send another NAK. If this
            count is high, one or more crybaby receiver transports may be clogging the
            source transport's retransmit queue.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMSourceStatistics.#ctor(com.latencybusters.lbm.LBMSource)"/>
            </remarks>
            <returns>Number of NAKs this source transport has shed and sent an NCF with
            the reason code set to "shed".</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.naksShed(System.Int32)">
            <summary>
            Number of NAKs this source transport has shed and sent an NCF with reason
            code "shed" (LBT-RM, LBT-RU).
            </summary>
            <remarks>
            When a source transport's retransmit rate limiter and retransmit queue are
            both at maximum, it responds to a NAK by sending an "NCF shed", and does not
            retransmit. The receiver transport should wait, then send another NAK. If this
            count is high, one or more crybaby receiver transports may be clogging the
            source transport's retransmit queue.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of NAKs this source transport has shed and sent an NCF with
            the reason code set to "shed".</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.naksIgnoredRetransmitDelay">
            <summary>
            Number of NAKs this source transport has not processed because it met its 
            retransmission rate limit (LBT-RM, LBT-RU).
            </summary>
            <remarks>
            This rate limit is set by configuration option
            transport_lbtrm_retransmit_rate_limit (default 5Mbps).
            For each of these NAKs, the source transport immediately sends an NFC
            rx_delay, then queues the retransmission for a later send within the rate
            limit. If this count is high, one or more crybaby receiver transports may be
            clogging the source transport's retransmit queue.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMSourceStatistics.#ctor(com.latencybusters.lbm.LBMSource)"/>
            </remarks>
            <returns>Number of NAKs this source did not process because doing so would
            exceed its retransmit rate limit.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.naksIgnoredRetransmitDelay(System.Int32)">
            <summary>
            Number of NAKs this source transport has not processed because it met its 
            retransmission rate limit (LBT-RM, LBT-RU).
            </summary>
            <remarks>
            This rate limit is set by configuration option
            transport_lbtrm_retransmit_rate_limit (default 5Mbps).
            For each of these NAKs, the source transport immediately sends an NFC
            rx_delay, then queues the retransmission for a later send within the rate
            limit. If this count is high, one or more crybaby receiver transports may be
            clogging the source transport's retransmit queue.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of NAKs this source did not process because doing so would
            exceed its retransmit rate limit.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.retransmissionsSent">
            <summary>
            Number of datagrams retransmitted by this source (LBT-RM, LBT-RU).
            </summary>
            <remarks>
            This count is incremented under the same circumstances as
            retransmissionBytesSent, below.
            In a normal, light-loss scenario, most NAKs received induce a retransmission.
            When losses become heavy and/or many receiver transports begin losing the
            same datagrams, NCF-related no-retransmit counts (naksIgnored, naksShed and
            naksIgnoredRetransmitDelay) may begin to inflate, and retransmissions
            retransmissionsSent) may become significantly lower than NAKS
            received (naksReceived).
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMSourceStatistics.#ctor(com.latencybusters.lbm.LBMSource)"/>
            </remarks>
            <returns>Number of datagrams retransmitted by this source.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.retransmissionsSent(System.Int32)">
            <summary>
            Number of datagrams retransmitted by this source (LBT-RM, LBT-RU).
            </summary>
            <remarks>
            This count is incremented under the same circumstances as
            retransmissionBytesSent, below.
            In a normal, light-loss scenario, most NAKs received induce a retransmission.
            When losses become heavy and/or many receiver transports begin losing the
            same datagrams, NCF-related no-retransmit counts (naksIgnored, naksShed and
            naksIgnoredRetransmitDelay) may begin to inflate, and retransmissions
            retransmissionsSent) may become significantly lower than NAKS
            received (naksReceived).
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams retransmitted by this source.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.messagesQueued">
            <summary>
            Number of datagrams currently queued by the rate limiter (LBT-RM only).
            </summary>
            <remarks>
            When a source transport attempts to send messages (any type) faster than its
            data rate limiter allows (set by configuration option
            transport_lbtrm_data_rate_limit, default 10Mbps), the data rate limiter queues
            the messages until they can be sent within the data rate limit.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMSourceStatistics.#ctor(com.latencybusters.lbm.LBMSource)"/>
            </remarks>
            <returns>Number of datagrams currently queued by the rate limiter.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.messagesQueued(System.Int32)">
            <summary>
            Number of datagrams currently queued by the rate limiter (LBT-RM only).
            </summary>
            <remarks>
            When a source transport attempts to send messages (any type) faster than its
            data rate limiter allows (set by configuration option
            transport_lbtrm_data_rate_limit, default 10Mbps), the data rate limiter queues
            the messages until they can be sent within the data rate limit.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of datagrams currently queued by the rate limiter.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.retransmissionsQueued">
            <summary>
            Number of retransmission datagrams currently queued by the retransmit
            rate limiter (LBT-RM only).
            </summary>
            <remarks>
            When a source transport attempts to send retransmissions faster that its
            retransmit rate limiter allows (set by configuration option
            transport_lbtrm_retransmit_rate_limit, default 5Mbps), the retransmit rate
            limiter queues retransmissions until they can be sent within the rate limit.
            naksIgnoredRetransmitDelay (above) will generally also rise if this count is high.
            This method returns a value from the first
            set of statistics encapsulated within this object
            and would normally be used when the object has been
            created using a specific source to instantiate the class.
            <seealso cref="M:com.latencybusters.lbm.LBMSourceStatistics.#ctor(com.latencybusters.lbm.LBMSource)"/>
            </remarks>
            <returns>Number of retransmission datagrams currently queued by the
            retransmit rate limiter.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.retransmissionsQueued(System.Int32)">
            <summary>
            Number of retransmission datagrams currently queued by the retransmit
            rate limiter (LBT-RM only).
            </summary>
            <remarks>
            When a source transport attempts to send retransmissions faster that its
            retransmit rate limiter allows (set by configuration option
            transport_lbtrm_retransmit_rate_limit, default 5Mbps), the retransmit rate
            limiter queues retransmissions until they can be sent within the rate limit.
            naksIgnoredRetransmitDelay (above) will generally also rise if this count is high.
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            </remarks>
            <param name="n">Statistics set index</param>
            <returns>Number of retransmission datagrams currently queued by the
            retransmit rate limiter.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:com.latencybusters.lbm.LBMSourceStatistics.retransmissionBytesSent" -->
        <member name="M:com.latencybusters.lbm.LBMSourceStatistics.retransmissionBytesSent(System.Int32)">
            <summary>
            Number of bytes retransmitted by this source transport (LBT-RU, LBT-RM). 
            </summary>
            <remarks>
            This count is triggered under the same circumstances as retransmissionsSent, above.
            In a normal, light-loss scenario, most NAKs received induce a retransmission.
            When losses become heavy and/or many receiver transports begin losing the
            same datagrams, NCF-related no-retransmit counts (naksIgnored, naksShed and
            naksIgnoredRetransmitDelay) may begin to inflate, and retransmissions
            retransmissionsSent) may become significantly lower than NAKs
            received (naksReceived).
            This method returns a value from the nth set of statistics
            encapsulated within this object.
            <seealso cref="M:com.latencybusters.lbm.LBMSourceStatistics.#ctor(com.latencybusters.lbm.LBMSource)"/>
            </remarks>
            <param name="n">Statistics set index</param>
            <returns> Total number of bytes retransmitted by this source transport.
            </returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMTimerCallback">
            <summary>
            LBM Timer callback delegate
            </summary>
            <param name="cbArg">Callback object token</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMTimer">
            <summary>
            LBM Timer class
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTimer.#ctor(com.latencybusters.lbm.LBMContext,System.Int64)">
            <summary>
            Creates a timer associated with a specific context that expires with
            a specified delay. 
            </summary>
            <remarks>
            A zero duration timer is legal and causes the associated callback 
            to be called as soon as possible on the context thread. 
            </remarks>
            <param name="lbmctx">LBMContext object with which to associate this timer
            (determines which LBM thread will execute the timer function)</param>
            <param name="milliseconds">Number of milliseconds until the timer expires</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTimer.#ctor(com.latencybusters.lbm.LBMContext,System.Int64,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Creates a timer associated with a specific context and event queue
            that expires with a specified delay.
            </summary>
            <remarks>
            A zero duration timer is legal and causes the associated callback 
            to be called as soon as possible on the context thread or to be 
            enqueued as an event on the associated event queue. In this case, 
            the event queue dispatching thread calls the associated callback 
            after all currently pending events have been dispatched.
            </remarks>
            <param name="lbmctx">LBMContext object with which to associate this timer</param>
            <param name="milliseconds">Number of milliseconds until the timer expires</param>
            <param name="lbmevq">Event queue with which to associate this timer
            (the timer events will be posted to this event queue)</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTimer.#ctor(com.latencybusters.lbm.LBMContext,System.Int64,com.latencybusters.lbm.LBMTimerCallback,System.Object)">
            <summary>
            Creates a timer associated with a specific context that expires with
            a specified delay.
            </summary>
            <remarks>
            A zero duration timer is legal and causes the associated callback 
            to be called as soon as possible on the context thread. 
            </remarks>/// <param name="lbmctx">LBMContext object with which to associate this timer
            (determines which LBM thread will execute the timer function)</param>
            <param name="milliseconds">Number of milliseconds until the timer expires</param>
            <param name="cb">Callback implementing the LBMTimerCallback delegate interface</param>
            <param name="cbArg">Callback object passed as token to callback interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTimer.#ctor(com.latencybusters.lbm.LBMContext,System.Int64,com.latencybusters.lbm.LBMTimerCallback,System.Object,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Creates a timer associated with a specific context and event queue
            that expires with a specified delay.
            </summary>
            <remarks>
            A zero duration timer is legal and causes the associated callback 
            to be called as soon as possible on the context thread or to be 
            enqueued as an event on the associated event queue. In this case, 
            the event queue dispatching thread calls the associated callback 
            after all currently pending events have been dispatched.
            </remarks>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="lbmctx">LBMContext object with which to associate this timer
            (determines which LBM thread will execute the timer function)</param>
            <param name="milliseconds">Number of milliseconds until the timer expires</param>
            <param name="cb">Callback implementing the LBMTimerCallback delegate interface</param>
            <param name="cbArg">Callback object passed as token to callback interface</param>
            <param name="lbmevq">Event queue with which to associate this timer</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTimer.Finalize">
            <summary>
            LBMTimer finalization
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTimer.addTimerCallback(com.latencybusters.lbm.LBMTimerCallback)">
            <summary>
            Register a timer callback
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMTimerCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMTimer.removeTimerCallback(com.latencybusters.lbm.LBMTimerCallback)"/>
            </remarks>
            <param name="cb">Callback implementing the LBMTimerCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTimer.addTimerCallback(com.latencybusters.lbm.LBMTimerCallback,System.Object)">
            <summary>
            Register a timer callback (and callback token)
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMTimerCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMTimer.removeTimerCallback(com.latencybusters.lbm.LBMTimerCallback)"/>
            </remarks>
            <param name="cb">Callback implementing the LBMTimerCallback delegate interface</param>
            <param name="cbArg">Callback token object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTimer.removeTimerCallback(com.latencybusters.lbm.LBMTimerCallback)">
            <summary>
            Deregister a timer callback
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMTimerCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMTimer.addTimerCallback(com.latencybusters.lbm.LBMTimerCallback)"/>
            </remarks>
            <param name="cb">Previously registered callback implementing the
            LBMTimerCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTimer.removeTimerCallback(com.latencybusters.lbm.LBMTimerCallback,System.Object)">
            <summary>
            Deregister a timer callback
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMTimerCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMTimer.addTimerCallback(com.latencybusters.lbm.LBMTimerCallback)"/>
            </remarks>
            <param name="cb">Previously registered callback implementing the
            LBMTimerCallback delegate interface</param>		
            <param name="cbArg">Callback token for previously registered callback</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTimer.cancel">
            <summary>
            Cancel timer
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTimer.reschedule(System.Int64)">
            <summary>
            Reschedule this timer to expire in a specified number of milliseconds
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="milliseconds">Number of milliseconds until this timer should expire</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTimer.Dispose">
            <summary>
            Dispose of this timer object
            </summary>
        </member>
        <member name="T:com.latencybusters.lbm.LBMTopic">
            <summary>
            LBM Topic class.
            It is recommended that topic objects be instantiated from the context
            factory methods <see cref="M:com.latencybusters.lbm.LBMContext.allocTopic(System.String)">allocTopic()</see>
            and <see cref="M:com.latencybusters.lbm.LBMContext.lookupTopic(System.String)">lookupTopic()</see> (for
            sources and receivers respectively).
            </summary>
            <remarks>
            <para><b>Warning</b>: It is not safe to instantiate this object from a context thread callback.</para>
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTopic.#ctor(com.latencybusters.lbm.LBMContext,System.String)">
            <summary>
            Turn a Topic string into an LBMTopic object usable by receivers. 
            It is recommended that topic objects be instantiated from the context
            factory methods <see cref="M:com.latencybusters.lbm.LBMContext.allocTopic(System.String)">allocTopic()</see>
            and <see cref="M:com.latencybusters.lbm.LBMContext.lookupTopic(System.String)">lookupTopic()</see> (for
            sources and receivers respectively).
            </summary>
            <remarks>
            <para>Note: This constructor cannot be used to initialize a source topic.</para>
            <para><b>Warning</b>: It is not safe to call this constructor from a context thread callback.</para>
            <seealso cref="T:com.latencybusters.lbm.LBMReceiver"/>
            </remarks>
            <param name="lbmctx">LBMContext object for the topic</param>
            <param name="symbol">Topic string (Topic strings should be limited in length to 246 characters, not including the final null).</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTopic.#ctor(com.latencybusters.lbm.LBMContext,System.String,com.latencybusters.lbm.LBMReceiverAttributes)">
            <summary>
            Turn a Topic string into an LBMTopic object usable by receivers
            It is recommended that topic objects be instantiated from the context
            factory methods <see cref="M:com.latencybusters.lbm.LBMContext.allocTopic(System.String)">allocTopic()</see>
            and <see cref="M:com.latencybusters.lbm.LBMContext.lookupTopic(System.String)">lookupTopic()</see> (for
            sources and receivers respectively).
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMReceiver"/>
            <para><b>Warning</b>: It is not safe to call this constructor from a context thread callback.</para>
            </remarks>
            <param name="lbmctx">LBMContext object for the topic</param>
            <param name="symbol">Topic string (Topic strings should be limited in length to 246 characters, not including the final null).</param>
            <param name="lbmrattr">LBMReceiverAttributes object used to initialize the
            topic object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTopic.#ctor(com.latencybusters.lbm.LBMContext,System.String,com.latencybusters.lbm.LBMSourceAttributes)">
            <summary>
            Turn a Topic string into an LBMTopic object usable by sources
            It is recommended that topic objects be instantiated from the context
            factory methods <see cref="M:com.latencybusters.lbm.LBMContext.allocTopic(System.String)">allocTopic()</see>
            and <see cref="M:com.latencybusters.lbm.LBMContext.lookupTopic(System.String)">lookupTopic()</see> (for
            sources and receivers respectively).
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMSource"/>
            <para><b>Warning</b>: It is not safe to call this constructor from a context thread callback.</para>
            </remarks>
            <param name="lbmctx">LBMContext object for the topic</param>
            <param name="symbol">Topic string (Topic strings should be limited in length to 246 characters, not including the final null).</param>
            <param name="lbmsattr">LBMSourceAttributes object used to initialize the
            topic object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTopic.Finalize">
            <summary>
            LBMTopic class finalization
            </summary>
        </member>
        <member name="T:com.latencybusters.lbm.LBMWildcardPatternCallback">
            <summary>
            LBM wildcard pattern match callback delegate
            </summary>
            <param name="topic">Candidate topic string</param>
            <param name="cbArg">Callback object token</param>
            <returns>0 indicates a match</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMWildcardReceiverCreateCallback">
            <summary>
            LBM wildcard receiver create callback delegate
            </summary>
            <param name="topic">Receiver topic string</param>
            <param name="attr">Receiver attributes</param>
            <param name="cbArg">Callback object token</param>
            <returns>0 indicates a match</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMWildcardReceiverDeleteCallback">
            <summary>
            LBM wildcard receiver delete callback delegate
            </summary>
            <param name="topic">Receiver topic string</param>
            <param name="cbArg">Callback object token</param>
            <returns>Always 0</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMWildcardReceiver">
            <summary>
            LBM Wildcard Receiver class
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to instantiate this class from a context thread
            callback.
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiver.#ctor(com.latencybusters.lbm.LBMContext,System.String,com.latencybusters.lbm.LBMReceiverAttributes,com.latencybusters.lbm.LBMWildcardReceiverAttributes)">
            <summary>
            Instantiate an LBM Wildcard Receiver object that will receive messages
            sent to any topic matching the given pattern
            </summary>
            <remarks>ATTENTION: An application should have at least one receiver callback
            registered per receiver object.  Use of this constructor creates a window
            after receiver creation and before adding a callback in which
            messages may be lost; therefore, its using this constructor is not recommended.
            Use a constructor that specifies at least one initial callback instead.
            <para><b>Warning</b>: It is not safe to call this constructor from a context thread callback.</para>
            </remarks>
            <param name="lbmctx">Context with which to associate the wildcard receiver</param>
            <param name="pattern">Pattern used to match topic strings</param>
            <param name="lbmrcvattr">LBMReceiverAttributes to be associated with this
            wildcard receiver</param>
            <param name="lbmwrcvattr">LBMWildcardReceiverAttributes to be associated with
            this wildcard receiver</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiver.#ctor(com.latencybusters.lbm.LBMContext,System.String,com.latencybusters.lbm.LBMReceiverAttributes,com.latencybusters.lbm.LBMWildcardReceiverAttributes,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Instantiate an LBM Wildcard Receiver object (associated with a specified
            event queue) that will receive messages sent to any topic matching the
            given pattern
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks>ATTENTION: An application should have at least one receiver callback
            registered per receiver object.  Use of this constructor creates a window
            after receiver creation and before adding a callback in which
            messages may be lost; therefore, its using this constructor is not recommended.
            Use a constructor that specifies at least one initial callback instead.
            <para><b>Warning</b>: It is not safe to call this constructor from a context thread callback.</para>
            </remarks>
            <param name="lbmctx">Context with which to associate the wildcard receiver</param>
            <param name="pattern">Pattern used to match topic strings</param>
            <param name="lbmrcvattr">LBMReceiverAttributes to be associated with this
            wildcard receiver</param>
            <param name="lbmwrcvattr">LBMWildcardReceiverAttributes to be associated with
            this wildcard receiver</param>
            <param name="lbmevq">Event queue with which to associate the receiver
            (all receiver events will be posted to this event queue)</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiver.#ctor(com.latencybusters.lbm.LBMContext,System.String,com.latencybusters.lbm.LBMReceiverAttributes,com.latencybusters.lbm.LBMWildcardReceiverAttributes,com.latencybusters.lbm.LBMReceiverCallback,System.Object)">
            <summary>
            Instantiate an LBM Wildcard Receiver object
            that will receive messages sent to any topic matching the
            given pattern, with an initial callback and callback object set.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this constructor from a context thread callback.
            </remarks>
            <param name="lbmctx">Context with which to associate the receiver</param>
            <param name="pattern">Pattern used to match topic strings</param>
            <param name="lbmrcvattr">LBMReceiverAttributes to be associated with this
            wildcard receiver</param>
            <param name="lbmwrcvattr">LBMWildcardReceiverAttributes to be associated with
            this wildcard receiver</param>
            <param name="cb">Callback implementing the LBMReceiverCallback delegate interface</param>
            <param name="cbArg">Callback object passed as token to callback interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiver.#ctor(com.latencybusters.lbm.LBMContext,System.String,com.latencybusters.lbm.LBMReceiverAttributes,com.latencybusters.lbm.LBMWildcardReceiverAttributes,com.latencybusters.lbm.LBMReceiverCallback,System.Object,com.latencybusters.lbm.LBMEventQueue)">
            <summary>
            Instantiate an LBM Wildcard Receiver object (associated with a specified
            event queue) that will receive messages sent to any topic matching the
            given pattern, with an initial callback and callback object set.
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this constructor from a context thread callback.
            </remarks>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="lbmctx">Context with which to associate the receiver</param>
            <param name="pattern">Pattern used to match topic strings</param>
            <param name="lbmrcvattr">LBMReceiverAttributes to be associated with this
            wildcard receiver</param>
            <param name="lbmwrcvattr">LBMWildcardReceiverAttributes to be associated with
            this wildcard receiver</param>
            <param name="cb">Callback implementing the LBMReceiverCallback delegate interface</param>
            <param name="cbArg">Callback object passed as token to callback interface</param>
            <param name="lbmevq">Event queue with which to associate the receiver
            (all receiver events will be posted to this event queue)</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiver.Finalize">
            <summary>
            LBMWildcardReceiver finalization
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiver.dumpAttributeList">
            <summary>
            Dump source configuration options
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <returns>An array of LBMConfigOptions</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiver.getAttributeValue(System.String)">
            <summary>
            Returns the value of a wildcard receiver-related attribute for this wildcard receiver
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to retrieve</param>
            <returns>Value corresponding to the specified attribute name</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiver.setAttributeValue(System.String,System.String)">
            <summary>
            Set the value of a wildcard receiver-related attribute for this wildcard receiver
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to set</param>
            <param name="attributeValue">New attribute value</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiver.receiverCount">
            <summary>
            Returns the number of receiver callbacks registered to this receiver
            </summary>
            <returns>The number of receiver callbacks registered to this receiver</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiver.addReceiver(com.latencybusters.lbm.LBMReceiverCallback)">
            <summary>
            Register a receiver callback
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMReceiverCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMWildcardReceiver.removeReceiver(com.latencybusters.lbm.LBMReceiverCallback)"/>
            </remarks>
            <param name="cb">Callback implementing the LBMReceiverCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiver.addReceiver(com.latencybusters.lbm.LBMReceiverCallback,System.Object)">
            <summary>
            Register a receiver callback (and callback token)
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMReceiverCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMWildcardReceiver.removeReceiver(com.latencybusters.lbm.LBMReceiverCallback)"/>
            </remarks>
             <param name="cb">Callback implementing the LBMReceiverCallback delegate interface</param>
             <param name="cbArg">Callback object token</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiver.removeReceiver(com.latencybusters.lbm.LBMReceiverCallback)">
            <summary>
            Deregister a receiver callback
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMReceiverCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMWildcardReceiver.addReceiver(com.latencybusters.lbm.LBMReceiverCallback)"/>
            </remarks>
            <param name="cb">Previously registered callback implementing the
            LBMReceiverCallback delegate interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiver.removeReceiver(com.latencybusters.lbm.LBMReceiverCallback,System.Object)">
            <summary>
            Deregister a receiver callback (and callback token)
            </summary>
            <remarks>
            <seealso cref="T:com.latencybusters.lbm.LBMReceiverCallback"/>
            <seealso cref="M:com.latencybusters.lbm.LBMWildcardReceiver.addReceiver(com.latencybusters.lbm.LBMReceiverCallback)"/>
            </remarks>
            <param name="cb">Previously registered callback implementing the
            LBMReceiverCallback delegate interface</param>
            <param name="cbArg">Token for previously registered callback</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiver.subscribeChannel(System.Int64,com.latencybusters.lbm.LBMReceiverCallback,System.Object)">
             <summary>
             Subscribe to the given channel, with an optional callback and token object.
             The specified callback will be called to deliver messages sent with the 
             specified channel number.  If null is specified for the callback, messages
             sent with the specified channel number will be delivered to the receiver's
             normal callback.
            
             Only one callback may be registered for a given channel.  If this method is called
             twice with the same channel number, an error will result.
             </summary>
             <param name="channelNumber">A positive integer indicating the channel to subscribe to</param>
             <param name="cb">An option callback to be called for messages on the specified channel</param>
             <param name="cbArg">A token to be passed to the specified callback. If null is specified for the cb argument, this argument will be ignored.</param> 
             <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.  Most likely due to attempting to subscribe to a channel for which a subscription already exists.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiver.unsubscribeChannel(System.Int64)">
            <summary> Discontinue an existing channel subscription. </summary>
            <param name="channelNumber">A positive integer indicating that channel to unsubscribe from</param>
            <exception ref="com.latencybusters.lbm.LBMException">Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.  Most likely due to attempting to unsubscribe from a channel that was not previously subscribed to</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiver.indexStopAssignment(System.String)">
            <summary>Stops this wildcard receiver's eligibility for new index assignments from a queue.</summary>
            <param name="queue">The name of the queue to stop new index assignment from, or null for all queues.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiver.indexStartAssignment(System.String)">
            <summary>Starts this wildcard receiver's eligibility for new index assignments from a queue.</summary>
            <param name="queue">The name of the queue to start new index assignment from, or null for all queues.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiver.indexRelease(System.String,com.latencybusters.lbm.UMQIndexInfo)">
            <summary>Instruct the given UMQ queue(s) to release the given UMQ index that is assigned to the given wildcard receiver.</summary>
            <param name="queue">Name of the queue at which to release the index, or null for all queues.</param>
            <param name="index">The index to release, or null for all indices.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiver.deregister">
            <summary> Deregister from all queues. </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> An error occurred while attempting to deregister </exception> 
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiver.deregister(System.String)">
            <summary> Deregister from a single queue, specified by name. </summary>
            <param name="queue">The queue to deregister from </param>
            <exception ref="com.latencybusters.lbm.LBMException"> An error occurred while attempting to deregister </exception> 
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiver.close">
            <summary>
            Close and dispose of this receiver
            </summary>
            <remarks>
            <b>Warning</b>: It is not safe to call this method from a context thread callback.
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiver.Dispose">
            <summary>
            Same as <see cref="M:com.latencybusters.lbm.LBMWildcardReceiver.close"/>
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <remarks><seealso cref="M:com.latencybusters.lbm.LBMWildcardReceiver.close"/></remarks>
        </member>
        <member name="T:com.latencybusters.lbm.LBMWildcardReceiverAttributes">
            <summary>
            Encapsulates the set of default LBM wildcard receiver attributes
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiverAttributes.#ctor">
            <summary>
            Instantiate LBMWildcardReceiverAttributes class
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiverAttributes.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Instantiate an LBMWildcardReceiverAttributes class using a context name, pattern, and pattern type
            from the xml configuration that must have been previously loaded.
            </summary>
            <param name="contextName">The context name under which this wildcard receiver is to be created.</param>
            <param name="pattern">The pattern string which will be used to create the LBMWildcardReceiver.</param>
            <param name="patternType">The pattern_type which will be used to create the LBMWildcardReceiver. The pattern_type is written into the attributes object.</param>
            <exception ref="com.latencybusters.lbm.LBMException">The context name or pattern and pattern_type combination is not permitted by XML configuration or other unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiverAttributes.Finalize">
            <summary>
            LBMWildcardReceiverAttributes class finalization
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiverAttributes.Dispose">
            <summary>
            Free memory associated with this set of attributes.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiverAttributes.dispose">
            <summary>
            Free memory associated with this set of attributes (same as Dispose()). 
            <seealso cref="M:com.latencybusters.lbm.LBMWildcardReceiverAttributes.Dispose"/>
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiverAttributes.setFromXml(System.String,System.String,System.Int32)">
            <summary>
            Set values in an LBMWildcardReceiverAttributes class using a context name, pattern, and pattern type
            from the xml configuration that must have been previously loaded.
            </summary>
            <param name="contextName">The context name under which this wildcard receiver is to be created.</param>
            <param name="pattern">The pattern string which will be used to create the LBMWildcardReceiver.</param>
            <param name="patternType">The pattern_type which will be used to create the LBMWildcardReceiver. The pattern_type is written into the attributes object.</param>
            <exception ref="com.latencybusters.lbm.LBMException">The context name or pattern and pattern_type combination is not permitted by XML configuration or other unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiverAttributes.dumpAttributeList">
            <summary>
            Dump source configuration options
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <returns>An array of LBMConfigOptions</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiverAttributes.getValue(System.String)">
            <summary>
            Returns the current value of an attribute from this set of 
            wildcard receiver-related attributes
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to retrieve</param>
            <returns>Value corresponding to the specified attribute name</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiverAttributes.setValue(System.String,System.String)">
            <summary>
            Set the current value of an attribute in this set of
            wildcard receiver-related attributes
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Invalid argument or unexpected operational behavior has been encountered by unmanaged LBM C layer function.</exception>
            <param name="attributeName">Name of the attribute to set</param>
            <param name="attributeValue">New attribute value</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiverAttributes.setPatternCallback(com.latencybusters.lbm.LBMWildcardPatternCallback,System.Object)">
            <summary>
            Set the callback interface (and a callback handle argument) to be called
            when a pattern match is desired for a topic discovered for a wildcard
            receiver if the pattern type is set to "appcb"
            </summary>
            <param name="cb">Callback implementing the LBMWildcardPatternCallback delegate interface</param>
            <param name="cbArg">Callback object passed as a token to the callback interface</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiverAttributes.setReceiverCreateCallback(com.latencybusters.lbm.LBMWildcardReceiverCreateCallback,System.Object)">
            <summary>
            Set the callback method (and a callback handle argument) to be called
            when a receiver is created for a topic discovered for a wildcard
            receiver
            </summary>
            <param name="cb">Callback of type LBMWildcardReceiverCreateCallback</param>
            <param name="cbArg">Callback object passed as a token to the callback</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMWildcardReceiverAttributes.setReceiverDeleteCallback(com.latencybusters.lbm.LBMWildcardReceiverDeleteCallback,System.Object)">
            <summary>
            Set the callback method (and a callback handle argument) to be called
            when a receiver created by a wildcard receiver is deleted
            </summary>
            <param name="cb">Callback of type LBMWildcardReceiverDeleteCallback</param>
            <param name="cbArg">Callback object passed as a token to the callback</param>
        </member>
        <member name="T:com.latencybusters.lbm.UMENoRegException">
            <summary>
            UME registration incomplete exception class
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMENoRegException.#ctor(System.String)">
            <summary>
            Instantiate UMENoRegException class
            </summary>
            <param name="errorMessage">Exception error message</param>
        </member>
        <member name="T:com.latencybusters.lbm.UMENoStoreException">
            <summary>
            UME registration incomplete exception class
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMENoStoreException.#ctor(System.String)">
            <summary>
            Instantiate UMENoRegException class
            </summary>
            <param name="errorMessage">Exception error message</param>
        </member>
        <member name="T:com.latencybusters.lbm.UMENoQueueException">
            <summary>
            UME registration incomplete exception class
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMENoQueueException.#ctor(System.String)">
            <summary>
            Instantiate  UMENoQueueException class
            </summary>
            <param name="errorMessage">Exception error message</param>
        </member>
        <member name="T:com.latencybusters.lbm.UMERegistrationSuccessInfo">
            <summary>
            UME Registration Success Info class.
            </summary>
            <remarks>Contains extended information for UME registration success messages,
            like flags indicating any conditions on store registration, source
            and receiver registration IDs, and the store's name and group index.</remarks>
        </member>
        <member name="M:com.latencybusters.lbm.UMERegistrationSuccessInfo.#ctor">
            <summary>
            Creates a UMERegistrationSuccessInfo object and initializes all fields to 0/null.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMERegistrationSuccessInfo.#ctor(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt16,System.String)">
            <summary>
            Creates a UMERegistrationSuccessInfo object and initializes fields to supplied values.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">UME source registration ID was &lt; 0.</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">UME receiver registration ID was &lt; 0.</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">UME sequence number was &lt; 0.</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">UME store index was &lt; 0.</exception>
            <param name="flags">Flags concerning the type of registration.</param>
            <param name="sourceRegId">Source registration ID (must be &gt;= 0).</param>
            <param name="receiverRegId">Receiver registration ID (must be &gt;= 0).</param>
            <param name="sequenceNumber">Starting sequence number.</param>
            <param name="storeIndex">Index of store registered with (must be &gt;= 0).</param>
            <param name="store">Name (IP address) of store registered with.</param>
        </member>
        <member name="M:com.latencybusters.lbm.UMERegistrationSuccessInfo.flags">
            <summary>
            Get registration success flags.
            </summary>
            <returns>Flags.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMERegistrationSuccessInfo.sourceRegistrationId">
            <summary>
            Get source registration ID.
            </summary>
            <returns>Source registration ID.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMERegistrationSuccessInfo.receiverRegistrationId">
            <summary>
            Get receiver registration ID.
            </summary>
            <returns>Receiver registration ID.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMERegistrationSuccessInfo.sequenceNumber">
            <summary>
            Get starting sequence number.
            </summary>
            <returns>Starting sequence number.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMERegistrationSuccessInfo.storeIndex">
            <summary>
            Get index of the store successfully registered with.
            </summary>
            <returns>Index of the store.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMERegistrationSuccessInfo.store">
            <summary>
            Get name (IP address) of the store successfully registered with.
            </summary>
            <returns>Name (IP address) of the store.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.UMERegistrationCompleteInfo">
            <summary>
            UME Registration Complete Info class.
            </summary>
            <remarks>Contains extended information for UME receiver
            registration complete messages.
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.UMERegistrationCompleteInfo.#ctor">
            <summary>
            Creates a UMERegistrationCompleteInfo object and initializes fields to 0.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMERegistrationCompleteInfo.#ctor(System.Int32,System.UInt32)">
            <summary>
            Creates a UMERegistrationCompleteInfo object and initializes fields to the
            supplied values
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">UME registration sequence number was &lt; 0.</exception>
            <param name="flags">Informational flags.</param>
            <param name="sequenceNumber">Starting sequence number (must be &gt;= 0).</param>
        </member>
        <member name="M:com.latencybusters.lbm.UMERegistrationCompleteInfo.flags">
            <summary>
            Get informational flags for this registration complete message.
            </summary>
            <returns>Flags.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMERegistrationCompleteInfo.sequenceNumber">
            <summary>
            Get starting sequence number for this registration complete message.
            </summary>
            <returns>Sequence number.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.UMEDeregistrationSuccessInfo">
            <summary>
            UME Deregistration Success Info class.
            </summary>
            <remarks>Contains extended information for UME deregistration success messages,
            like flags indicating any conditions on store deregistration, source
            and receiver registration IDs, and the store's name and group index.</remarks>
        </member>
        <member name="M:com.latencybusters.lbm.UMEDeregistrationSuccessInfo.#ctor">
            <summary>
            Creates a UMEDeregistrationSuccessInfo object and initializes all fields to 0/null.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMEDeregistrationSuccessInfo.#ctor(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.UInt16,System.String)">
            <summary>
            Creates a UMEDeregistrationSuccessInfo object and initializes fields to supplied values.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">UME source registration ID was &lt; 0.</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">UME receiver registration ID was &lt; 0.</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">UME sequence number was &lt; 0.</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">UME store index was &lt; 0.</exception>
            <param name="flags">Flags concerning the type of deregistration.</param>
            <param name="sourceRegId">Source registration ID (must be &gt;= 0).</param>
            <param name="receiverRegId">Receiver registration ID (must be &gt;= 0).</param>
            <param name="sequenceNumber">Starting sequence number.</param>
            <param name="storeIndex">Index of store registered with (must be &gt;= 0).</param>
            <param name="store">Name (IP address) of store registered with.</param>
        </member>
        <member name="M:com.latencybusters.lbm.UMEDeregistrationSuccessInfo.flags">
            <summary>
            Get deregistration success flags.
            </summary>
            <returns>Flags.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMEDeregistrationSuccessInfo.sourceRegistrationId">
            <summary>
            Get source registration ID.
            </summary>
            <returns>Source registration ID.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMEDeregistrationSuccessInfo.receiverRegistrationId">
            <summary>
            Get receiver registration ID.
            </summary>
            <returns>Receiver registration ID.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMEDeregistrationSuccessInfo.sequenceNumber">
            <summary>
            Get starting sequence number.
            </summary>
            <returns>Starting sequence number.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMEDeregistrationSuccessInfo.storeIndex">
            <summary>
            Get index of the store successfully registered with.
            </summary>
            <returns>Index of the store.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMEDeregistrationSuccessInfo.store">
            <summary>
            Get name (IP address) of the store successfully registered with.
            </summary>
            <returns>Name (IP address) of the store.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.UMEDeregistrationCompleteInfo">
            <summary>
            UME Deregistration Complete Info class.
            </summary>
            <remarks>Contains extended information for UME receiver
            deregistration complete messages.
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.UMEDeregistrationCompleteInfo.#ctor">
            <summary>
            Creates a UMEDeregistrationCompleteInfo object and initializes fields to 0.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMEDeregistrationCompleteInfo.#ctor(System.Int32,System.UInt32)">
            <summary>
            Creates a UMEDeregistrationCompleteInfo object and initializes fields to the
            supplied values
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">UME registration sequence number was &lt; 0.</exception>
            <param name="flags">Informational flags.</param>
            <param name="sequenceNumber">Starting sequence number (must be &gt;= 0).</param>
        </member>
        <member name="M:com.latencybusters.lbm.UMEDeregistrationCompleteInfo.flags">
            <summary>
            Get informational flags for this deregistration complete message.
            </summary>
            <returns>Flags.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMEDeregistrationCompleteInfo.sequenceNumber">
            <summary>
            Get starting sequence number for this deregistration complete message.
            </summary>
            <returns>Sequence number.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.UMERegistrationIdExCallbackInfo">
            <summary>
            UME Registration ID Extended Callback Info class.
            </summary>
            <remarks>Contains information passed to user-supplied UME registration ID
            callbacks.</remarks>
        </member>
        <member name="M:com.latencybusters.lbm.UMERegistrationIdExCallbackInfo.#ctor">
            <summary>
            Creates a UMERegistrationIdExCallbackInfo object and sets all fields to 0/null.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMERegistrationIdExCallbackInfo.#ctor(System.String,System.UInt32,System.String,System.UInt16,System.Int32,System.Object)">
            <summary>
            Creates a UMERegistrationIdExCallbackInfo object and initializes fields to the given values.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Source registration ID must be &gt;= 0.</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Store index must be &gt;= 0.</exception>
            <param name="source">Name (IP address) of the source.</param>
            <param name="sourceRegId">Reg ID of the source.</param>
            <param name="store">Name (IP address) of the store.</param>
            <param name="storeIndex">Index of the store.</param>
            <param name="flags">Informational flags.</param>
            <param name="srcCbArg">Client-supplied source callback object if using the <see cref="T:com.latencybusters.lbm.LBMSourceCreationCallback"/> callback.</param>
        </member>
        <member name="M:com.latencybusters.lbm.UMERegistrationIdExCallbackInfo.sourceRegistrationId">
            <summary>
            Get the source's registration ID.
            </summary>
            <returns>Source registration ID.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMERegistrationIdExCallbackInfo.storeIndex">
            <summary>
            Get the store's index.
            </summary>
            <returns>Store index.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMERegistrationIdExCallbackInfo.store">
            <summary>
            Get the store name (IP address).
            </summary>
            <returns>Store name (IP address).</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMERegistrationIdExCallbackInfo.source">
            <summary>
            Get the source name (IP address).
            </summary>
            <returns>Source name (IP address).</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMERegistrationIdExCallbackInfo.flags">
            <summary>
            Get informational flags.
            </summary>
            <returns>Flags.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMERegistrationIdExCallbackInfo.sourceClientObject">
            <summary>
            Get per-source client object.
            </summary>
            <returns>Per-source client object.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.UMERecoverySequenceNumberCallbackInfo">
            <summary>
            UME Recovery sequence number callback info class.
            </summary>
            <remarks>Contains information for user-supplied recovery sequence
            number callbacks.</remarks>
        </member>
        <member name="M:com.latencybusters.lbm.UMERecoverySequenceNumberCallbackInfo.#ctor">
            <summary>
            Default constructor; initializes all fields to 0.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMERecoverySequenceNumberCallbackInfo.#ctor(System.Int32,System.UInt32,System.UInt32,System.UInt32,System.Object,System.String)">
            <summary>
            Constructor, initializes fields to the given values.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Low sequence number was &lt; 0.</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Low RX req max sequence number was &lt; 0.</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">High sequence number was &lt; 0.</exception>
            <param name="flags">Informational flags.</param>
            <param name="lowSeqNum">Low sequence number (can be changed by the application, must be &gt;= 0).</param>
            <param name="lowRxReqMaxSeqNum">Low retransmission request maximum sequence number (must be &gt;= 0).</param>
            <param name="highSeqNum">High sequence number (must be &gt;= 0).</param>
            <param name="source">Source string (e.g., "TCP:192.168.0.4:45789").</param>
            <param name="sourceCbArg">Client-supplied source callback object if using the <see cref="T:com.latencybusters.lbm.LBMSourceCreationCallback"/> callback.</param>
        </member>
        <member name="M:com.latencybusters.lbm.UMERecoverySequenceNumberCallbackInfo.flags">
            <summary>
            Get recovery sequence number info informational flags.
            </summary>
            <returns>Informational flags.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMERecoverySequenceNumberCallbackInfo.lowSequenceNumber">
            <summary>
            Get low sequence number.
            </summary>
            <returns>Low sequence number.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMERecoverySequenceNumberCallbackInfo.lowRxReqMaxSequenceNumber">
            <summary>
            Get low retransmission request maximum sequence number.
            </summary>
            <returns>Low rxreq max sequence number.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMERecoverySequenceNumberCallbackInfo.highSequenceNumber">
            <summary>
            Get high sequence number.
            </summary>
            <returns>High sequence number.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMERecoverySequenceNumberCallbackInfo.sourceClientObject">
            <summary>
            Get source client object.
            </summary>
            <returns>Source client object.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMERecoverySequenceNumberCallbackInfo.source">
            <summary>
            Get the source string.
            </summary>
            <returns>Source string.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMERecoverySequenceNumberCallbackInfo.setLowSequenceNumber(System.UInt32)">
            <summary>
            Set the desired starting low sequence number for recovery events.
            </summary>
            <remarks>Used in UMERecoverySequenceNumberCallback callbacks.</remarks>
            <param name="lowSeqNum">Desired starting sequence number for recovery (must be >= 0).</param>
        </member>
        <member name="T:com.latencybusters.lbm.UMESourceEventRegistrationSuccessInfo">
            <summary>
            UME Source Event Registration Success Info class.
            </summary>
            <remarks>
            Retrieved with the LBMSourceEvent.registrationSuccessInfo() method.  Contains extended registration success info.
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventRegistrationSuccessInfo.#ctor">
            <summary>
            Creates a UMESourceEventRegistrationSuccessInfo object and initializes all fields to 0/null.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventRegistrationSuccessInfo.#ctor(System.Int32,System.UInt32,System.UInt32,System.UInt16,System.String)">
            <summary>
            Creates a UMESourceEventRegistrationSuccessInfo object and initializes fields to the given values.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">UME source registration ID was &lt; 0.</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">UME sequence number was &lt; 0.</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">UME store index was &lt; 0.</exception>
            <param name="flags">Informational flags concerning the type of store registration.</param>
            <param name="registrationId">The source's registration ID with this store (must be &gt;= 0).</param>
            <param name="sequenceNumber">Starting sequence number.</param>
            <param name="storeIndex">Index of the store (must be &gt;= 0).</param>
            <param name="store">Name of the store.</param>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventRegistrationSuccessInfo.flags">
            <summary>
            Returns store registration type flags.
            </summary>
            <returns>Informational flags about the source's registration.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventRegistrationSuccessInfo.registrationId">
            <summary>
            Returns the source's registration ID.
            </summary>
            <returns>Source's registration ID with this store.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventRegistrationSuccessInfo.sequenceNumber">
            <summary>
            Returns the source's starting sequence number.
            </summary>
            <returns>Source's starting sequence number.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventRegistrationSuccessInfo.storeIndex">
            <summary>
            Returns the index of the store this source successfully registered to.
            </summary>
            <returns>Index of the store.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventRegistrationSuccessInfo.store">
            <summary>
            Returns the name (IP address) of the store registered with.
            </summary>
            <returns>Name of the store.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.UMESourceEventRegistrationCompleteInfo">
            <summary>
            UME Source Event Registration Complete Info class.
            </summary>
            <remarks>
            Contains the starting sequence number for a source returned from a UME store.
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventRegistrationCompleteInfo.#ctor">
            <summary>
            Creates a UMESourceEventRegistrationCompleteInfo object and initializes all fields to 0.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventRegistrationCompleteInfo.#ctor(System.Int32,System.UInt32)">
            <summary>
            Creates a UMESourcEventRegistrationCompleteInfo object and initializes fields to the supplied values.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">UME registration sequence number was &lt; 0.</exception>
            <param name="flags">Informational flags.</param>
            <param name="sequenceNumber">Starting sequence number (must be &gt;= 0).</param>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventRegistrationCompleteInfo.flags">
            <summary>
            Get flags concerning this registration complete message.
            </summary>
            <returns>Flags.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventRegistrationCompleteInfo.sequenceNumber">
            <summary>
            Get the starting sequence number.
            </summary>
            <returns>Sequence number.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.UMESourceEventDeregistrationSuccessInfo">
            <summary>
            UME Source Event Deregistration Success Info class.
            </summary>
            <remarks>
            Retrieved with the LBMSourceEvent.deregistrationSuccessInfo() method.  Contains extended deregistration success info.
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventDeregistrationSuccessInfo.#ctor">
            <summary>
            Creates a UMESourceEventDeregistrationSuccessInfo object and initializes all fields to 0/null.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventDeregistrationSuccessInfo.#ctor(System.Int32,System.UInt32,System.UInt32,System.UInt16,System.String)">
            <summary>
            Creates a UMESourceEventDeregistrationSuccessInfo object and initializes fields to the given values.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">UME source registration ID was &lt; 0.</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">UME sequence number was &lt; 0.</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">UME store index was &lt; 0.</exception>
            <param name="flags">Informational flags concerning the type of store deregistration.</param>
            <param name="registrationId">The source's registration ID with this store (must be &gt;= 0).</param>
            <param name="sequenceNumber">Starting sequence number.</param>
            <param name="storeIndex">Index of the store (must be &gt;= 0).</param>
            <param name="store">Name of the store.</param>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventDeregistrationSuccessInfo.flags">
            <summary>
            Returns store registration type flags.
            </summary>
            <returns>Informational flags about the source's registration.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventDeregistrationSuccessInfo.registrationId">
            <summary>
            Returns the source's registration ID.
            </summary>
            <returns>Source's registration ID with this store.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventDeregistrationSuccessInfo.sequenceNumber">
            <summary>
            Returns the source's starting sequence number.
            </summary>
            <returns>Source's starting sequence number.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventDeregistrationSuccessInfo.storeIndex">
            <summary>
            Returns the index of the store this source successfully registered to.
            </summary>
            <returns>Index of the store.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventDeregistrationSuccessInfo.store">
            <summary>
            Returns the name (IP address) of the store registered with.
            </summary>
            <returns>Name of the store.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.UMESourceEventDeregistrationCompleteInfo">
            <summary>
            UME Source Event Deregistration Complete Info class.
            </summary>
            <remarks>
            Contains the starting sequence number for a source returned from a UME store.
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventDeregistrationCompleteInfo.#ctor">
            <summary>
            Creates a UMESourceEventDeregistrationCompleteInfo object and initializes all fields to 0.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventDeregistrationCompleteInfo.#ctor(System.Int32,System.UInt32)">
            <summary>
            Creates a UMESourcEventDeregistrationCompleteInfo object and initializes fields to the supplied values.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">UME registration sequence number was &lt; 0.</exception>
            <param name="flags">Informational flags.</param>
            <param name="sequenceNumber">Starting sequence number (must be &gt;= 0).</param>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventDeregistrationCompleteInfo.flags">
            <summary>
            Get flags concerning this deregistration complete message.
            </summary>
            <returns>Flags.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventDeregistrationCompleteInfo.sequenceNumber">
            <summary>
            Get the starting sequence number.
            </summary>
            <returns>Sequence number.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.UMEStoreGroupEntry">
            <summary>
            UME Store Group Entry class.
            </summary>
            <remarks>
            Holds information about a UME store group, like the group's index 
            and group size.
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.UMEStoreGroupEntry.#ctor">
            <summary>
            Creates a UMEStoreGroupEntry object and initializes index and group size to 0.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMEStoreGroupEntry.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Creates a UMEStoreGroupEntry object and initializes the index and group size.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Store group index was &lt; 0.</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Store group size was &lt; 0.</exception>
            <param name="index">Index of the store group (must be &gt;= 0).</param>
            <param name="groupSize">Size of the store group (must be &gt;= 0).</param>
        </member>
        <member name="M:com.latencybusters.lbm.UMEStoreGroupEntry.index">
            <summary>
            Returns this store group's index.
            </summary>
            <returns>The UME store group index.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMEStoreGroupEntry.groupSize">
            <summary>
            Returns this store group's size.
            </summary>
            <returns>Group size.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.UMESourceEventAckInfo">
            <summary>
            UME Source Event Ack Info class.
            </summary>
            <remarks>
            Contains extended information for message stability and confirmed delivery source events.
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventAckInfo.#ctor(System.Int32,System.UInt32,System.UInt32,System.UInt16,System.String,System.Object)">
            <summary>
            Construct a UMESourceEventAckInfo object and initialize its fields to the given values.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Sequence number was &lt; 0.</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Receiver Reg ID was &lt; 0.</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Store index was &lt; 0.</exception>
            <param name="flags">Informational flags.</param>
            <param name="sequenceNumber">Sequence number (must be &gt;= 0).</param>
            <param name="rcvRegId">Receiver registration ID (must be &gt;= 0).</param>
            <param name="storeIndex">Store index (must be &gt;= 0).</param>
            <param name="store">Store name (IP address and port).</param>
            <param name="clientd">Application-supplied callback object.</param>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventAckInfo.sequenceNumber">
            <summary>
            Get the sequence number of the message the event was received for.
            </summary>
            <returns>Sequence number.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventAckInfo.receiverRegistrationId">
            <summary>
            Get the receiver registration ID.
            </summary>
            <returns>Receiver registration ID.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventAckInfo.flags">
            <summary>
            Get informational flags associated with the source event.
            </summary>
            <returns>Flags.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventAckInfo.clientObject">
            <summary>
            Get the client-supplied callback object.
            </summary>
            <returns>Client-supplied object.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventAckInfo.store">
            <summary>
            Get the name (IP address) of the store the event came from.
            </summary>
            <returns>Store name (IP address).</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMESourceEventAckInfo.storeIndex">
            <summary>
            Get the index of the store the source event came from.
            </summary>
            <returns>Store index.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.UMEStoreEntry">
            <summary>
            UME Store Entry class.
            </summary>
            <remarks>
            Holds information about a source's registration with a UME store, including
            the store's domain ID, IP address and port, group index, and the source's current
            registration ID.
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.UMEStoreEntry.#ctor">
            <summary>
            Creates a UMEStoreEntry object and initializes all values to 0.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMEStoreEntry.#ctor(System.Net.IPEndPoint,System.UInt16,System.UInt32)">
            <summary>
            Creates a UMEStoreEntry object and uses supplied values for initialization. The domain ID is set to 0.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Store entry group index was &lt; 0.</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Store entry registration ID was &lt; 0.</exception>
            <param name="address">The address (IP and port) of the store.</param>
            <param name="groupIndex">The group the store belongs to (must be &gt;= 0).</param>
            <param name="registrationId">The source's registration ID (must be &gt;= 0).</param>
        </member>
        <member name="M:com.latencybusters.lbm.UMEStoreEntry.#ctor(System.Net.IPEndPoint,System.UInt16,System.UInt32,System.UInt32)">
            <summary>
            Creates a UMEStoreEntry object and uses supplied values for initialization. The domain ID is set to 0.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Store entry group index was &lt; 0.</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Store entry registration ID was &lt; 0.</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Store entry domain ID was &lt; 0.</exception>
            <param name="address">The address (IP and port) of the store.</param>
            <param name="groupIndex">The group the store belongs to (must be &gt;= 0).</param>
            <param name="registrationId">The source's registration ID (must be &gt;= 0).</param>
            <param name="domainId">The store's domain ID (must be &gt;= 0).</param>
        </member>
        <member name="M:com.latencybusters.lbm.UMEStoreEntry.address">
            <summary>
            Accessor function to get the store's address.
            </summary>
            <returns>The store's address (IP and port).</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMEStoreEntry.groupIndex">
            <summary>
            Accessor function to get the store's group index.
            </summary>
            <returns>The store's group index.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMEStoreEntry.registrationId">
            <summary>
            Accessor function to return the source's registration ID with this store.
            </summary>
            <returns>The source's registration ID.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMEStoreEntry.domainId">
            <summary>
            Accessor function to return the store's domain ID.
            </summary>
            <returns>The store's domain ID.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMSourceEventSequenceNumberInfo">
            <summary>
            LBM Source Event Sequence Number Info class.
            </summary>
            <remarks>
            Contains first and last sequence numbers and client-supplied callback object.
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEventSequenceNumberInfo.#ctor">
            <summary>
            Creates an LBMSourceEventSequenceNumberInfo object with all fields initialized to 0/null.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEventSequenceNumberInfo.#ctor(System.Int32,System.UInt32,System.UInt32,System.Object)">
            <summary>
            Creates an LBMSourceEventSequenceNumberInfo with fields initialized to the given values.
            </summary>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">First sequence number was &lt; 0.</exception>
            <exception ref="com.latencybusters.lbm.LBMEInvalException">Last sequence number was &lt; 0.</exception>
            <param name="flags">Flags concerning when sequence number messages are sent.</param>
            <param name="firstSeqNum">First sequence number (must be &gt;= 0).</param>
            <param name="lastSeqNum">Last sequence number (must be &gt;= 0).</param>
            <param name="clientd">Client-supplied callback object.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEventSequenceNumberInfo.flags">
            <summary>
            Get sequence number message flags.
            </summary>
            <returns>Flags indicating when sequence number messages are sent.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEventSequenceNumberInfo.firstSequenceNumber">
            <summary>
            Get the first sequence number.
            </summary>
            <returns>The first sequence number.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEventSequenceNumberInfo.lastSequenceNumber">
            <summary>
            Get the last sequence number.
            </summary>
            <returns>The last sequence number.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEventSequenceNumberInfo.clientObject">
            <summary>
            Get the client-supplied callback object.
            </summary>
            <returns>Client-supplied object.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMSourceSendExInfo">
            <summary>
            LBM Source Send Extended Info class.
            </summary>
            <remarks>
            Holds a user-supplied callback argument
            and user-supplied flags to change callback behavior for extended
            LBMSource.send(byte[], int, int, LBMSourceSendExInfo) calls.
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceSendExInfo.#ctor">
            <summary>
            Create an empty LBMSourceSendExInfo object.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceSendExInfo.#ctor(System.Int32,System.Object)">
            <summary>
            Create an LBMSourceSendExInfo object with flags and callback object set.
            </summary>
            <param name="flags">Flags to control callback behavior.</param>
            <param name="cbArg">User-supplied object passed back with any callbacks.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceSendExInfo.#ctor(System.Int32,System.Object,com.latencybusters.lbm.LBMSourceChannelInfo)">
            <summary>
            Create an LBMSourceSendExInfo object with flags and callback object set 
            as well as channel information included.
            </summary>
            <param name="flags">Flags to control callback behavior.</param>
            <param name="cbArg">User-supplied object passed back with any callbacks.</param>
            <param name="channelInfo">Channel information to be included with messages.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceSendExInfo.#ctor(System.Int32,System.Object,com.latencybusters.lbm.LBMSourceChannelInfo,com.latencybusters.lbm.UMQIndexInfo)">
            <summary>
            Create an LBMSourceSendExInfo object with flags and callback object set 
            as well as channel information included.
            </summary>
            <param name="flags">Flags to control callback behavior.</param>
            <param name="cbArg">User-supplied object passed back with any callbacks.</param>
            <param name="channelInfo">Channel information to be included with messages.</param>
            <param name="umqIndex">UMQ index to send on.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceSendExInfo.#ctor(System.Int32,System.Object,com.latencybusters.lbm.LBMSourceChannelInfo,com.latencybusters.lbm.UMQIndexInfo,com.latencybusters.lbm.UMQMessageTotalLifetimeInfo)">
            <summary>
            Create an LBMSourceSendExInfo object with flags and callback object set 
            </summary>
            <param name="flags">Flags to control callback behavior.</param>
            <param name="cbArg">User-supplied object passed back with any callbacks.</param>
            <param name="channelInfo">Channel information to be included with messages.</param>
            <param name="umqIndex">UMQ index to send on.</param>
            <param name="lifetimeInfo">UMQ total lifetime info to send with messages.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceSendExInfo.setClientObject(System.Object)">
            <summary>
            Set the user-supplied callback object.
            </summary>
            <param name="cbArg">User-supplied object passed back with any callbacks.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceSendExInfo.setFlags(System.Int32)">
            <summary>
            Sets flags that control callback behavior.
            </summary>
            <param name="flags">Flags.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceSendExInfo.setChannelInfo(com.latencybusters.lbm.LBMSourceChannelInfo)">
            <summary>
            Sets channel information to be included with messages.
            </summary>	
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceSendExInfo.setMessageProperties(com.latencybusters.lbm.LBMMessageProperties)">
            <summary>
            Sets properties information to be included with messages.
            </summary>
            <param name="properties">A properties object to be associated with this object.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceSendExInfo.flags">
            <summary>
            Returns currently set flags.
            </summary>
            <returns>An int representing an OR'd set of currently set flags.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceSendExInfo.clientObject">
            <summary>
            Returns the client-supplied callback object.
            </summary>
            <returns>The current client-supplied callback object.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceSendExInfo.channelInfo">
            <summary>
            Returns the currently set channel information.
            </summary>
            <returns>The current channel information</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceSendExInfo.properties">
            <summary>
            Returns the currently set properties information.
            </summary>
            <returns>The current properties information</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceSendExInfo.setIndexInfo(com.latencybusters.lbm.UMQIndexInfo)">
            <remarks>Sets index info to be included with messages.</remarks>
            <param name="indexInfo">An index info object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceSendExInfo.indexInfo">
            <remarks>Returns the currently set index info.</remarks>
            <returns>The current index info.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceSendExInfo.setTotalLifetimeInfo(com.latencybusters.lbm.UMQMessageTotalLifetimeInfo)">
            <remarks>Sets total lifetime info to be included with messages.</remarks>
            <param name="lifetimeInfo">A total lifetime info object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceSendExInfo.totalLifetimeInfo">
            <remarks>Returns the currently set total lifetime info.</remarks>
            <returns>The current total lifetime info.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceSendExInfo.setHfSequenceNumber32(System.UInt32)">
            <summary>
            Set the 32 bit hot failover sequence number to send
            </summary>
            <param name="hfsqn">Unsigned 32 bit HF sequence number</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceSendExInfo.setHfSequenceNumber64(System.UInt64)">
            <summary>
            Set the 64 bit hot failover sequence number to send
            </summary>
            <param name="hfsqn">Unsigned 64 bit HF sequence number</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceSendExInfo.getHfSequenceNumber32">
            <summary>
            Get the currently set 32 bit hot failover sequence number.
            </summary>
            <returns>32 bit hot failover sequence number</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceSendExInfo.getHfSequenceNumber64">
            <summary>
            Get the currently set 64 bit hot failover sequence number
            </summary>
            <returns>64 bit hot failover sequence number</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMContextSourceEvent">
            <summary>
            Encapsulates an LBM context-level source event.
            </summary>
        </member>
        <member name="T:com.latencybusters.lbm.LBMSourceEventWakeupInfo">
            <summary>
            Class containing information about a source wakeup event.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEventWakeupInfo.flags">
            <summary>
            Retrieve flags indicating what type of source(s) (normal, MIM, etc.) has woken up.
            </summary>
            <returns>Flags indicating what type of source(s) this wakeup event is for.</returns>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_EVENT_WAKEUP_FLAG_NORMAL"/>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_EVENT_WAKEUP_FLAG_MIM"/>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_EVENT_WAKEUP_FLAG_UIM"/>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_EVENT_WAKEUP_FLAG_REQUEST"/>
            <see cref="F:com.latencybusters.lbm.LBM.SRC_EVENT_WAKEUP_FLAG_RESPONSE"/>
        </member>
        <member name="T:com.latencybusters.lbm.UMQContextEventRegistrationCompleteInfo">
            <summary> 
            Class containing information about UMQ Registration Complete Context Events.
            This info object is delivered with a UMQ Registration Complete Context Event,
            containing information identifying the queue and registration id
            associated with the registration complete event.
            </summary>
        </member>
        <member name="T:com.latencybusters.lbm.UMQQueueInfo">
            <summary> Base class for UMQ info objects associated with a queue.
            This class encapsulates the basic information required for
            any UMQ info object that is associated with a queue, 
            namely the identifying information for the queue (Id and Name) 
            and a set of flags to indicate other information contained in the object.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMQQueueInfo.#ctor(System.Int32,System.Int64,System.String)">
            <summary> Creates a UMQQueueInfo object and initializes fields to the
            supplied values.
            </summary>
            <param name="flags">Informational flags.
            </param>
            <param name="queueId">Queue Id of the queue.
            </param>
            <param name="queue">The name of the queue the receiver registered with.
            </param>
            <exception>  LBMEInvalException An invalid parameter was specified. </exception>
        </member>
        <member name="M:com.latencybusters.lbm.UMQQueueInfo.flags">
            <summary> Get informational flags for this info object.</summary>
            <returns> Flags.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMQQueueInfo.queueId">
            <summary> Get Queue Id for the queue associated with this info object.</summary>
            <returns> Queue Id for the queue associated with this info object.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMQQueueInfo.queueName">
            <summary> Get Queue name for the queue associated with this info object.</summary>
            <returns> Queue name for the queue associated with this info object.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMQContextEventRegistrationCompleteInfo.#ctor(System.Int32,System.Int64,System.String,System.UInt64)">
            <summary>  Creates a UMQContextEventRegistrationCompleteInfo object,
            and initializes fields to the supplied values.
            </summary>
            <param name="flags">Informational flags.
            </param>
            <param name="queueId">Queue Id of the queue.
            </param>
            <param name="queue">The name of the queue the receiver registered with.
            </param>
            <param name="regId">64-bit unsigned registration Ids.
            </param>
            <exception>  LBMEInvalException An invalid parameter was specified. </exception>
        </member>
        <member name="M:com.latencybusters.lbm.UMQContextEventRegistrationCompleteInfo.registrationId">
            <summary> Get the registration Id associated with this registration complete info object.</summary>
            <returns> Registration Id associated with this registration complete info object.
            </returns>
        </member>
        <member name="T:com.latencybusters.lbm.UMQContextEventRegistrationSuccessInfo">
            <summary> Class containing information about UMQ Registration Success Context Events.
            This info object is delivered with a UMQ Registration Success Context Event,
            containing information identifying the queue, queue instance, and registration id
            associated with the registration success event.
            </summary>
        </member>
        <member name="T:com.latencybusters.lbm.UMQQueueInstanceInfo">
            <summary> Base class for UMQ info objects associated with a queue instance.
            This class encapsulates the information required for any UMQ
            info object that is associated with a queue instance.  This includes
            both the information required to identify the queue (Id and Name) as
            well as the information needed to identify the queue instance (Index 
            and Name).  
            </summary>
            <since> UME 3.0
            
            </since>
        </member>
        <member name="M:com.latencybusters.lbm.UMQQueueInstanceInfo.#ctor(System.Int32,System.Int64,System.String,System.Int64,System.String)">
            <summary> Creates a UMQQueueInstanceInfo object and initializes fields to the
            supplied values.
            </summary>
            <param name="flags">Informational flags.
            </param>
            <param name="queueId">Queue Id of the queue.
            </param>
            <param name="queue">The name of the queue the receiver registered with.
            </param>
            <param name="index">The index of the instance of the queue.
            </param>
            <param name="queueInstance">The instance of the queue.
            </param>
            <exception>  LBMEInvalException An invalid parameter was specified. </exception>
        </member>
        <member name="M:com.latencybusters.lbm.UMQQueueInstanceInfo.queueInstanceIndex">
            <summary> Gets the index of the queue instance associated with this info object.</summary>
            <returns> Index of the queue instance associated with this info object.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMQQueueInstanceInfo.queueInstanceName">
            <summary> Gets the name of the queue instance associated with this info object.</summary>
            <returns> Name of the queue instance associated with this info object.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMQContextEventRegistrationSuccessInfo.#ctor(System.Int32,System.Int64,System.String,System.Int64,System.String,System.UInt64)">
            <summary>  Creates a UMQContextEventRegistrationSuccessInfo object,
            and initializes fields to the supplied values.
            </summary>
            <param name="flags">Informational flags.
            </param>
            <param name="queueId">Queue Id of the queue.
            </param>
            <param name="queue">The name of the queue the receiver registered with.
            </param>
            <param name="index">The index of the instance of the queue.
            </param>
            <param name="queueInstance">The instance of the queue.
            </param>
            <param name="regId">64-bit unsigned registration Ids.
            </param>
            <exception>  LBMEInvalException An invalid parameter was specified. </exception>
        </member>
        <member name="M:com.latencybusters.lbm.UMQContextEventRegistrationSuccessInfo.registrationId">
            <summary> Get the registration Id associated with this registration success info object.</summary>
            <returns> Registration Id associated with this registration success info object.
            </returns>
        </member>
        <member name="T:com.latencybusters.lbm.UMQDeregistrationCompleteInfo">
            <summary> UMQ Deregistration Complete Info class.
            Contains extended information for UMQ receiver
            deregistration complete messages. This info object is supplied
            with a message indicating the a receiver has successfully 
            deregistered with a queue.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMQDeregistrationCompleteInfo.#ctor(System.Int32,System.Int64,System.String)">
            <summary> Creates a UMQDeregistrationCompleteInfo object and initializes fields to the
            supplied values.
            </summary>
            <param name="flags">Informational flags.
            </param>
            <param name="queueId">Queue Id of the queue.
            </param>
            <param name="queue">The name of the queue the receiver registered with.
            </param>
            <exception>  LBMEInvalException An invalid parameter was specified. </exception>
        </member>
        <member name="T:com.latencybusters.lbm.UMQMessageId">
            <summary> UMQ Message ID class.
            Contains information required to identify a UMQ message
            </summary>
            <since> UME 3.0
            
            </since>
        </member>
        <member name="M:com.latencybusters.lbm.UMQMessageId.#ctor(System.UInt64,System.UInt64)">
            <summary> Creates a UMQMessageId object and initializes fields to the
            supplied values.
            </summary>
            <param name="regId">The 64-bit registration Id of the source context where the message originated.
            </param>
            <param name="stamp">A 64-bit identifier that indicates the individual message from the given source context.
            </param>
            <exception>  LBMEInvalException An invalid parameter was specified. </exception>
        </member>
        <member name="M:com.latencybusters.lbm.UMQMessageId.registrationId">
            <summary> Get the registration Id associated with this message id.</summary>
            <returns> Registration Id associated with this message id.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMQMessageId.msgStamp">
            <summary> Get the message stamp associated with this message id.</summary>
            <returns> Message stamp associated with this message id.
            </returns>
        </member>
        <member name="T:com.latencybusters.lbm.UMQRegistrationCompleteInfo">
            <summary> UMQ Registration Complete Info class.
            Contains extended information for UMQ receiver
            registration complete messages.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMQRegistrationCompleteInfo.#ctor(System.Int32,System.Int64,System.Int64,System.String)">
            <summary> Creates a UMQRegistrationCompleteInfo object and initializes fields to the
            supplied values.
            </summary>
            <param name="flags">Informational flags.
            </param>
            <param name="queueId">Queue Id of the queue.
            </param>
            <param name="assignmentId">The generated Assignment ID for the receiver with the queue.
            </param>
            <param name="queue">The name of the queue the receiver registered with.
            </param>
            <exception>  LBMEInvalException An invalid parameter was specified. </exception>
        </member>
        <member name="M:com.latencybusters.lbm.UMQRegistrationCompleteInfo.assignmentId">
            <summary> Get generated Assignment ID for this registration complete message.</summary>
            <returns> The generated Assignment ID for the receiver with the queue.
            </returns>
        </member>
        <member name="T:com.latencybusters.lbm.UMQSourceEventAckInfo">
            <summary> UMQ Stability Ack Info class.
            This info object is delivered with a source event indicating that
            a message is stable (i.e. has been acknowledged by a queue instance).
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMQSourceEventAckInfo.#ctor(System.Int32,System.Int64,System.String,System.Int64,System.String,com.latencybusters.lbm.UMQMessageId,System.UInt32,System.UInt32,System.Object)">
            <summary> Creates a UMQSourceEventAckInfo object and initializes fields to the
            supplied values.
            </summary>
            <param name="flags">Informational flags.
            </param>
            <param name="queueId">Queue Id of the queue.
            </param>
            <param name="queue">The name of the queue the receiver registered with.
            </param>
            <param name="index">The index of the instance of the queue.
            </param>
            <param name="queueInstance">The instance of the queue.
            </param>
            <param name="msgId">The registration Id of the source context where the message 
            being acknowledged originated.
            </param>
            <param name="firstSequenceNumber">The sequence number of the first fragment associated with the acknowledgment message.
            </param>
            <param name="lastSequenceNumber">The sequence number of the last fragment associated with the acknowledgment message.
            </param>
            <param name="clientObject">The client object associated with the acknowledgment message.
            </param>
            <exception>  LBMEInvalException An invalid parameter was specified. </exception>
        </member>
        <member name="M:com.latencybusters.lbm.UMQSourceEventAckInfo.firstSequenceNumber">
            <summary> Get the sequence number of the first fragment of the message being acknowledged.</summary>
            <returns> Sequence number of the first fragment of the message being acknowledged.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMQSourceEventAckInfo.lastSequenceNumber">
            <summary> Get the sequence number of the last fragment of the message being acknowledged.</summary>
            <returns> Sequence number of the last fragment of the message being acknowledged.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMQSourceEventAckInfo.messageIdInfo">
            <summary> Get the message Id object identifying the message being acknowledged.</summary>
            <returns> A UMQMessageId object identifying the message being acknowledged.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMQSourceEventAckInfo.clientObject">
            <summary> Get the client-supplied callback object.</summary>
            <returns> Client-supplied object.
            </returns>
        </member>
        <member name="T:com.latencybusters.lbm.UMQSourceEventMessageIdInfo">
            <summary> This class encapsulates information about a message sent to a queue.
            An object of type UMQSourceEventMessageIdInfo will be delivered with
            a source event of type LBM.SRC_EVENT_UMQ_MESSAGE_ID_INFO to notify
            the application of the message id that has been assigned to the 
            message by the queue.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMQSourceEventMessageIdInfo.#ctor(System.Int32,com.latencybusters.lbm.UMQMessageId,System.Object)">
            <summary> Creates a UMQSourceEventMessageIdInfo object and initializes fields to the
            supplied values.
            </summary>
            <exception>  LBMEInvalException An invalid parameter was specified. </exception>
        </member>
        <member name="M:com.latencybusters.lbm.UMQSourceEventMessageIdInfo.flags">
            <summary> Get informational flags for this info object.</summary>
            <returns> Flags.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMQSourceEventMessageIdInfo.messageId">
            <summary> Get the message Id object identifying the message.</summary>
            <returns> A UMQMessageId object identifying the message.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMQSourceEventMessageIdInfo.clientObject">
            <summary> Get the client object provided when the message was sent.</summary>
            <returns> The object provided when sending the message associated with this message info.
            </returns>
            <since> UME 3.0
            </since>
        </member>
        <member name="T:com.latencybusters.lbm.UMQSourceEventRegistrationCompleteInfo">
            <summary> UMQ Source Event Registration Complete Info class.
            This info object is delivered with a source event indicating that
            registration is complete to all involved queue instances.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMQSourceEventRegistrationCompleteInfo.#ctor(System.Int32,System.Int64,System.String)">
            <summary> Creates a UMQSourceEventRegistrationCompleteInfo object and initializes fields to the
            supplied values.
            </summary>
            <param name="flags">Informational flags.
            </param>
            <param name="queueId">Queue Id of the queue.
            </param>
            <param name="queue">The name of the queue the receiver registered with.
            </param>
            <exception>  LBMEInvalException An invalid parameter was specified. </exception>
        </member>
        <member name="T:com.latencybusters.lbm.UMQSourceEventULBReceiverInfo">
            <summary> UMQ ULB Receiver Info class.
            This info object is both delivered with a source event and acts as
            a base class for other ULB source events. In both cases, this object
            holds information about a ULB receiver.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMQSourceEventULBReceiverInfo.#ctor(System.Int32,System.UInt64,System.UInt32,System.UInt32,System.String)">
            <summary> Creates a UMQSourceEventULBReceiverInfo object and initializes fields to the
            supplied values.
            </summary>
            <param name="flags">Informational flags.
            </param>
            <param name="regId">Registration ID of the receiver.
            </param>
            <param name="assignId">The assignment ID of the receiver.
            </param>
            <param name="appSetIdx">The application set index the receiver is in.
            </param>
            <param name="receiver">The receivers immediate message target string.
            </param>
            <exception>  LBMEInvalException An invalid parameter was specified. </exception>
        </member>
        <member name="M:com.latencybusters.lbm.UMQSourceEventULBReceiverInfo.flags">
            <summary> Get informational flags for this info object.</summary>
            <returns> Flags.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMQSourceEventULBReceiverInfo.registrationId">
            <summary> Get Registration ID for the receiver.</summary>
            <returns> Registration ID for the receiver associated with this info object.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMQSourceEventULBReceiverInfo.assignmentId">
            <summary> Get Assignment ID for the receiver.</summary>
            <returns> Assignment ID for the receiver associated with this info object. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMQSourceEventULBReceiverInfo.applicationSetIndex">
            <summary> Get Application Set Index the receiver is in.</summary>
            <returns> Application Set Index for the receiver associated with this info object. </returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMQSourceEventULBReceiverInfo.receiver">
            <summary> Get receivers immediate message target string for the receiver associated with this info object.</summary>
            <returns> Receivers immediate message target string for the receiver associated with this info object.
            </returns>
        </member>
        <member name="T:com.latencybusters.lbm.UMQSourceEventULBMessageInfo">
            <summary> UMQ ULB Message Info class.
            This info object is delivered with a source event indicating that
            a ULB message has been assigned, consumed, discarded, etc.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMQSourceEventULBMessageInfo.#ctor(System.Int32,com.latencybusters.lbm.UMQMessageId,System.UInt64,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.Object,System.String)">
            <summary> Creates a UMQSourceEventULBMessageInfo object and initializes fields to the
            supplied values.
            </summary>
            <param name="flags">Informational flags.
            </param>
            <param name="msgId">The Message ID of the message.
            </param>
            <param name="regId">The Registration ID of the receiver.
            </param>
            <param name="firstSequenceNumber">The sequence number of the first fragment associated with the message.
            </param>
            <param name="lastSequenceNumber">The sequence number of the last fragment associated with the message.
            </param>
            <param name="assignId">The Assignment ID of the receiver.
            </param>
            <param name="appSetIdx">The Application Set Index the receiver is in.
            </param>
            <param name="clientObject">The client object associated with the message.
            </param>
            <param name="receiver">The immediate message target string for the receiver.
            </param>
            <exception>  LBMEInvalException An invalid parameter was specified. </exception>
        </member>
        <member name="M:com.latencybusters.lbm.UMQSourceEventULBMessageInfo.firstSequenceNumber">
            <summary> Get the sequence number of the first fragment of the message.</summary>
            <returns> Sequence number of the first fragment of the message.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMQSourceEventULBMessageInfo.lastSequenceNumber">
            <summary> Get the sequence number of the last fragment of the message.</summary>
            <returns> Sequence number of the last fragment of the message.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMQSourceEventULBMessageInfo.messageId">
            <summary> Get the message Id object identifying the message.</summary>
            <returns> A UMQMessageId object identifying the message.
            </returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMQSourceEventULBMessageInfo.clientObject">
            <summary> Get the client-supplied callback object.</summary>
            <returns> Client-supplied object.
            </returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMContextEvent">
            <summary>Encapsulates LBM Context Events</summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextEvent.#ctor">
            <summary> Create an empty LBM Context Event</summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextEvent.type">
            <summary> LBM Context Event Type</summary>
            <returns> LBM Context Event type
            </returns>
            <seealso cref="T:com.latencybusters.lbm.LBM">
            </seealso>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextEvent.dataString">
            <summary> Error string associated with this event. 
            This event may not be valid for all event types.
            </summary>
            <returns> Error string
            </returns>
            <seealso cref="T:com.latencybusters.lbm.LBM">
            </seealso>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextEvent.registrationSuccessInfo">
            <summary> Registration success info object associated with this event. 
            This event may not be valid for all event types.
            </summary>
            <returns> UMQContextEventRegistrationSuccessInfo object
            </returns>
            <seealso cref="T:com.latencybusters.lbm.LBM">
            </seealso>
        </member>
        <member name="M:com.latencybusters.lbm.LBMContextEvent.registrationCompleteInfo">
            <summary> Registration complete info object associated with this event. 
            This event may not be valid for all event types.
            </summary>
            <returns> UMQContextEventRegistrationCompleteInfo object
            </returns>
            <seealso cref="T:com.latencybusters.lbm.LBM">
            </seealso>
        </member>
        <member name="T:com.latencybusters.lbm.LBMSourceEventFlightSizeNotification">
            <summary> LBM Source Event Flight Size Notification class.
            Contains type and state of current flight size
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEventFlightSizeNotification.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates an LBMSourceEventFlightSizeNotification object and initializes fields to the give values.
            </summary>
            <param name="type">type of flight size in question.
            </param>
            <param name="state">current state (over or under).
            </param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEventFlightSizeNotification.type">
            <summary> Get type.</summary>
            <returns> type of flight size.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMSourceEventFlightSizeNotification.state">
            <summary> Get state.</summary>
            <returns> state of flight size.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMSetInflightCallback">
            <summary>
            Callback for setting the inflight messages for a source.
            </summary>
            <param name="inflight">Current inflight value</param>
            <param name="cbArg">Callback object specified with setXXXInflight</param>
            <returns>New inflight value</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMSetInflightCallbackEx">
            <summary>
            Callback for setting the number of inflight messages and bytes for a source simultaneously.
            </summary>
            <param name="messages">The current value of inflight messages, set to a new value to change</param>
            <param name="bytes">The current value of inflight bytes, set to a new value to change</param>
            <param name="cbArg">Callback object specified with setInflight</param>
        </member>
        <member name="T:com.latencybusters.lbm._LBMSetInflightCallback">
            <summary>
            Internal delegate to use with lbm_src_get_inflight
            </summary>
        </member>
        <member name="T:com.latencybusters.lbm._LBMSetInflightCallbackEx">
            <summary>
            Internal delegate to use with lbm_src_get_inflight_ex
            </summary>
        </member>
        <member name="T:com.latencybusters.lbm.LBMSetInflightInfo">
            <summary>
            Class used to wrap the provided user callback and cbObj into the client data for the C call.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMFlightSize.setInflight(System.Int32,System.IntPtr)">
            <summary>
            Internal callback used for lbm_src_get_inflight
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMFlightSize.setInflight(com.latencybusters.lbm.LBMFlightSize.lbm_flight_size_inflight_t*,System.IntPtr)">
            <summary>
            Internal callback used for lbm_src_get_inflight_ex
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMFlightSize.getCbArgHandle(com.latencybusters.lbm.LBMSetInflightCallback,System.Object)">
            <summary>
            Get GC handle to pass as clientd to lbm_src_get_inflight, should be freed when no longer needed.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMFlightSize.getCbArgHandle(com.latencybusters.lbm.LBMSetInflightCallbackEx,System.Object)">
            <summary>
            Get GC handle to pass as clientd to lbm_src_get_inflight_ex, should be freed when no longer needed.
            </summary>
        </member>
        <member name="T:com.latencybusters.lbm.LBMFlightSize.lbm_flight_size_inflight_t">
            <summary>
            Struct that holds inflight information
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMQIndexInfo.#ctor(System.Byte[],System.Int32)">
            <summary>
            Creates a UMQIndexInfo object using specified (arbitrary, user-specified) data.
            </summary>
            <param name="index">Index data.</param>
            <param name="length">Length of index data (must be greater than 0 and less than or equal to LBM.UMQ_MAX_INDEX_LEN)</param>
        </member>
        <member name="M:com.latencybusters.lbm.UMQIndexInfo.#ctor(System.UInt64)">
            <summary>
            Creates a numeric UMQIndexInfo object using the specified 64-bit unsigned index number.
            </summary>
            <param name="index">Numeric index.</param>
        </member>
        <member name="M:com.latencybusters.lbm.UMQIndexInfo.flags">
            <summary>
            Returns flags for this UMQIndexInfo object.
            </summary>
            <returns>Flags.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMQIndexInfo.index">
            <summary>
            Returns data index for this UMQIndexInfo object.  Throws an LBMEInvalException if the UMQIndexInfo object is numeric.
            </summary>
            <returns>Index data.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMQIndexInfo.numericIndex">
            <summary>
            Returns 64-bit unsigned numeric index for this UMQIndexInfo object. Throws an LBMEInvalException if the index is not numeric.
            </summary>
            <returns>64-bit unsigned index.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMQIndexInfo.indexLength">
            <summary>
            Returns length of non-numeric index. Throws an LBMEInvalException if index is numeric.
            </summary>
            <returns>Length of index data.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMQIndexInfo.setIndex(System.Byte[],System.Int32)">
            <summary>
            Sets data index to specified data.  Index length must be greater than 0 and less than or equal to LBM.UMQ_MAX_INDEX_LEN.
            </summary>
            <param name="index">Index data.</param>
            <param name="length">Length of index data.</param>
        </member>
        <member name="M:com.latencybusters.lbm.UMQIndexInfo.setNumericIndex(System.UInt64)">
            <summary>
            Sets index to specified numeric index.
            </summary>
            <param name="index">Numeric index (unsigned 64-bit integer)</param>
        </member>
        <member name="T:com.latencybusters.lbm.UMQIndexAssignmentEligibilityStopCompleteInfo">
            <summary> UMQ Index Assignment Eligibility Stop Complete Info class.
            Contains extended information for UMQ receiver
            index assignment eligibility stop complete messages. This info object is supplied
            with a message indicating the a receiver is now no longer eligible for new index assignments
            from a queue.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMQIndexAssignmentEligibilityStopCompleteInfo.#ctor(System.Int32,System.Int64,System.String)">
            <summary> Creates a UMQIndexAssignmentEligibilityStopCompleteInfo object and initializes fields to the
            supplied values.
            </summary>
            <param name="flags">Informational flags.
            </param>
            <param name="queueId">Queue Id of the queue.
            </param>
            <param name="queue">The name of the queue the receiver is now no longer eligible to receive index assignments from.
            </param>
            <exception>  LBMEInvalException An invalid parameter was specified. </exception>
        </member>
        <member name="T:com.latencybusters.lbm.UMQIndexAssignmentEligibilityStartCompleteInfo">
            <summary> UMQ Index Assignment Eligibility Start Complete Info class.
            Contains extended information for UMQ receiver
            index assignment eligibility start complete messages. This info object is supplied
            with a message indicating the a receiver is now eligible for new index assignments
            from a queue.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMQIndexAssignmentEligibilityStartCompleteInfo.#ctor(System.Int32,System.Int64,System.String)">
            <summary> Creates a UMQIndexAssignmentEligibilityStartCompleteInfo object and initializes fields to the
            supplied values.
            </summary>
            <param name="flags">Informational flags.
            </param>
            <param name="queueId">Queue Id of the queue.
            </param>
            <param name="queue">The name of the queue the receiver is now eligible to receive index assignments from.
            </param>
            <exception>  LBMEInvalException An invalid parameter was specified. </exception>
        </member>
        <member name="T:com.latencybusters.lbm.UMQIndexAssignedInfo">
            <summary> Class containing information about UMQ index assignment events.
            This info object is delivered with a UMQ Index Assigned receiver event,
            containing information identifying the queue, queue instance, and index information
            associated with the index assigned event.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMQQueueIndexInfo.#ctor(System.Int32,System.Int64,System.String,com.latencybusters.lbm.UMQIndexInfo)">
            <summary> Creates a UMQQueueIndexInfo object and initializes fields to the
            supplied values.
            </summary>
            <param name="flags">Informational flags.
            </param>
            <param name="queueId">Queue Id of the queue.
            </param>
            <param name="queue">The name of the queue the receiver is receiving this event from.
            </param>
            <param name="indexInfo">UMQ Index information object.
            </param>
            <exception>  LBMEInvalException An invalid parameter was specified. </exception>
        </member>
        <member name="M:com.latencybusters.lbm.UMQQueueIndexInfo.indexInfo">
            <summary>Get UMQ index information for this info object.</summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMQIndexAssignedInfo.#ctor(System.Int32,System.Int64,System.String,com.latencybusters.lbm.UMQIndexInfo)">
            <summary> Creates a UMQIndexAssignedInfo object and initializes fields to the
            supplied values.
            </summary>
            <param name="flags">Informational flags.
            </param>
            <param name="queueId">Queue Id of the queue.
            </param>
            <param name="queue">The name of the queue at which the receiver was assigned the index.
            </param>
            <param name="indexInfo">UMQ Index information object.
            </param>
            <exception>  LBMEInvalException An invalid parameter was specified. </exception>
        </member>
        <member name="T:com.latencybusters.lbm.UMQIndexReleasedInfo">
            <summary> Class containing information about UMQ index released events.
            This info object is delivered with a UMQ Index Released receiver event,
            containing information identifying the queue, queue instance, and index information
            associated with the index released event.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMQIndexReleasedInfo.#ctor(System.Int32,System.Int64,System.String,com.latencybusters.lbm.UMQIndexInfo)">
            <summary> Creates a UMQIndexReleasedInfo object and initializes fields to the
            supplied values.
            </summary>
            <param name="flags">Informational flags.
            </param>
            <param name="queueId">Queue Id of the queue.
            </param>
            <param name="queue">The name of the queue releasing the receiver's index assignment.
            </param>
            <param name="indexInfo">UMQ Index information object.
            </param>
            <exception>  LBMEInvalException An invalid parameter was specified. </exception>
        </member>
        <member name="T:com.latencybusters.lbm.LBMOperationCompleteCallback">
            <summary>
            LBMOperationCompleteCallback class.
            </summary>
            <remarks>
            This class should be used when notification of completion of a long-running
            operation is desired.
            </remarks>
        </member>
        <member name="M:com.latencybusters.lbm.LBMOperationCompleteCallback.#ctor">
            <summary>
            Instantiate a default LBMOperationCompleteCallback.
            This constructor should be called by subclasses that wish
            to supress garbage collection until Dispose() is called.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMOperationCompleteCallback.#ctor(com.latencybusters.lbm.LBMOperationCompleteCallback.LBMOperationComplete)">
            <summary>
            Instantiate an LBMOperationCompleteCallback that invokes an
            LBMOperationComplete delegate.
            </summary>
            <param name="cb">Callback to be invoked when the operation is complete.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMOperationCompleteCallback.Dispose">
            <summary>
            Dispose of a callback object.  Subclasses that wish to supress
            garbage collection should call the default constructor and then
            call this method when they no longer need the callback.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMOperationCompleteCallback.onOperationComplete(System.Object)">
            <summary>
            Callback method.
            </summary>
            <param name="cbArg">The callback token specified when starting the operation.</param>
            <remarks>
            This method is called to signal that an operation is complete.
            </remarks>
        </member>
        <member name="T:com.latencybusters.lbm.LBMOperationCompleteCallback.LBMOperationComplete">
            <summary>
            Operation Complete delegate.  A method matching this delegate may be
            passed to the LBMOperationCompleteCallback constructor if a simple
            callback is desired when an operation is complete.
            </summary>
        </member>
        <member name="T:com.latencybusters.lbm.UMEMessageAck">
            <summary>
            UMEMessageAck class.  Use this object to send explicit acks.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMEMessageAck.sendExplicitAck(System.UInt32)">
            <summary>
            Sends an explicit ack up to the sequence number provided
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Unexpected operational behavior has been encountered by unmanaged LBM C layer function. </exception>
            <param name="sqn">The sequence number up to which to send the explicit ack.</param>
        </member>
        <member name="M:com.latencybusters.lbm.UMEMessageAck.Dispose">
            <summary>
            Delete the underlying ack structure
            </summary>
            <exception ref="com.latencybusters.lbm.LBMException"> Unexpected operational behavior has been encountered by unmanaged LBM C layer function. </exception>
        </member>
        <member name="M:com.latencybusters.lbm.UMQMessageTotalLifetimeInfo.#ctor(System.UInt32)">
            <summary>Creates a UMQMessageTotalLifetimeInfo with the specified total lifetime</summary>
            <param name="totalLifetime">Total lifetime of the message</param>
        </member>
        <member name="M:com.latencybusters.lbm.UMQMessageTotalLifetimeInfo.#ctor">
            <summary>Creates a UMQMessageTotalLifetimeInfo with the total lifetime set to 0</summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMQMessageTotalLifetimeInfo.totalLifetime">
            <summary>Returns the specified total lifetime</summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMQMessageTotalLifetimeInfo.setTotalLifetime(System.UInt32)">
            <summary>Sets the total lifetime</summary>
            <param name="totalLifetime">the new total lifetime</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMObjectRecyclerBase">
            <summary>
            <para>
            This is an abstract base class, and should be subclassed to override any appropriate
            non-functional methods, such as doneWith... or retrieve... (whose default implementation in
            the base class is to always return null). LBMObjectRecycler is provided as a basic general
            implementation of this class.
            </para>
            <para>
            After being set in any of the UM attribute classes with the setObjectRecycler() method, UM
            uses the LBMObjectRecyclerBase internally, instead of automatically creating a new Object of
            the different supported types.
            </para>
            <para>
            UM calls the appropriate retrieve method expecting either an object that it can use, or
            null. In the latter case UM creates the new object as if there were no recycler available.
            Once finished with an object, calling the appropriate doneWith method makes it available for
            future retrieve calls.
            </para>
            <para>
            When implementing your own recycler from this parent class, note that the retrieve methods
            (below) are called from within the context thread as part of the callbacks. Hence, do not
            perform any unsafe API calls from within a retrieve method.
            </para>
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecyclerBase.doneWithMessage(com.latencybusters.lbm.LBMMessage)">
            <summary>
            If dispose is not called on an LBMMessage in the callback, it is retained for use in the application.
            Once the application is finished with the LBMMessage, it should call dispose and then
            pass it to this method to make it available for reuse, instead of letting it be garbage collected.
            </summary>
            <param name="obj">The LBMMessage object that the application is done with and is ready for reuse</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecyclerBase.retrieveMessage(System.Object)">
            <summary>
            LBM will call this method to attempt to retrieve a LBMMessage object instance that it can use
            instead of creating a new instance to reduce garbage collection.  It will reset the state of
            the LBMMessage once it is retrieved and then use it as if it were a new instance.  Returning null
            causes LBM to create a new instance as if there were no recycler.
            </summary>
            <param name="cbObj">The callback object token that was stored when setting LBMObjectRecycler in the attributes</param>
            <returns>Either null or a valid LBMMessage object will be returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecyclerBase.doneWithReceiverStatistics(com.latencybusters.lbm.LBMReceiverStatistics)">
            <summary>
            Once the application is finished with the stats object, it should NOT call dispose but rather
            should pass it to this method to make the object instance available for reuse, instead of letting
            it be garbage collected.
            </summary>
            <param name="obj">The LBMReceiverStatistics object that the application is done with and is ready for reuse</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecyclerBase.retrieveReceiverStatistics(System.Object)">
            <summary>
            LBM will call this method to attempt to retrieve a stats object instance that it can use instead of
            creating a new instance to reduce garbage collection.  It will refresh the stats object and then use it
            as if it were a new instance.  Returning null causes LBM to create a new instance as if there were
            no recycler.
            </summary>
            <param name="cbObj">The callback object token that was stored when setting LBMObjectRecycler in the attributes</param>
            <returns>Either null or a valid LBMReceiverStatistics object will be returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecyclerBase.doneWithSourceStatistics(com.latencybusters.lbm.LBMSourceStatistics)">
            <summary>
            Once the application is finished with the stats object, it should NOT call dispose but rather
            should pass it to this method to make the object instance available for reuse, instead of letting
            it be garbage collected.
            </summary>
            <param name="obj">The LBMSourceStatistics object that the application is done with and is ready for reuse</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecyclerBase.retrieveSourceStatistics(System.Object)">
            <summary>
            LBM will call this method to attempt to retrieve a stats object instance that it can use instead of
            creating a new instance to reduce garbage collection.  It will refresh the stats object and then use it
            as if it were a new instance.  Returning null causes LBM to create a new instance as if there were
            no recycler.
            </summary>
            <param name="cbObj">The callback object token that was stored when setting LBMObjectRecycler in the attributes</param>
            <returns>Either null or a valid LBMSourceStatistics object will be returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecyclerBase.doneWithContextStatistics(com.latencybusters.lbm.LBMContextStatistics)">
            <summary>
            Once the application is finished with the stats object, it should NOT call dispose but rather
            should pass it to this method to make the object instance available for reuse, instead of letting
            it be garbage collected.
            </summary>
            <param name="obj">The LBMContextStatistics object that the application is done with and is ready for reuse</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecyclerBase.retrieveContextStatistics(System.Object)">
            <summary>
            LBM will call this method to attempt to retrieve a stats object instance that it can use instead of
            creating a new instance to reduce garbage collection.  It will refresh the stats object and then use it
            as if it were a new instance.  Returning null causes LBM to create a new instance as if there were
            no recycler.
            </summary>
            <param name="cbObj">The callback object token that was stored when setting LBMObjectRecycler in the attributes</param>
            <returns>Either null or a valid LBMContextStatistics object will be returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecyclerBase.doneWithImmediateMessageReceiverStatistics(com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics)">
            <summary>
            Once the application is finished with the stats object, it should NOT call dispose but rather
            should pass it to this method to make the object instance available for reuse, instead of letting
            it be garbage collected.
            </summary>
            <param name="obj">The LBMImmediateMessageReceiverStatistics object that the application is done with 
            and is ready for reuse</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecyclerBase.retrieveImmediateMessageReceiverStatistics(System.Object)">
            <summary>
            LBM will call this method to attempt to retrieve a stats object instance that it can use instead of
            creating a new instance to reduce garbage collection.  It will refresh the stats object and then use it
            as if it were a new instance.  Returning null causes LBM to create a new instance as if there were
            no recycler.
            </summary>
            <param name="cbObj">The callback object token that was stored when setting LBMObjectRecycler in the attributes</param>
            <returns>Either null or a valid LBMImmediateMessageReceiverStatistics object will be returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecyclerBase.doneWithImmediateMessageSourceStatistics(com.latencybusters.lbm.LBMImmediateMessageSourceStatistics)">
            <summary>
            Once the application is finished with the stats object, it should NOT call dispose but rather
            should pass it to this method to make the object instance available for reuse, instead of letting
            it be garbage collected. 
            </summary>
            <param name="obj">The LBMImmediateMessageSourceStatistics object that the application is done with 
            and is ready for reuse</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecyclerBase.retrieveImmediateMessageSourceStatistics(System.Object)">
            <summary>
            LBM will call this method to attempt to retrieve a stats object instance that it can use instead of
            creating a new instance to reduce garbage collection.  It will refresh the stats object and then use it
            as if it were a new instance.  Returning null causes LBM to create a new instance as if there were
            no recycler. 
            </summary>
            <param name="cbObj">The callback object token that was stored when setting LBMObjectRecycler in the attributes</param>
            <returns>Either null or a valid LBMImmediateMessageSourceStatistics object will be returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecyclerBase.doneWithEventQueueStatistics(com.latencybusters.lbm.LBMEventQueueStatistics)">
            <summary>
            Once the application is finished with the stats object, it should NOT call dispose but rather
            should pass it to this method to make the object instance available for reuse, instead of letting
            it be garbage collected. 
            </summary>
            <param name="obj">The LBMEventQueueStatistics object that the application is done with 
            and is ready for reuse</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecyclerBase.retrieveEventQueueStatistics(System.Object)">
            <summary>
            LBM will call this method to attempt to retrieve a stats object instance that it can use instead of
            creating a new instance to reduce garbage collection.  It will refresh the stats object and then use it
            as if it were a new instance.  Returning null causes LBM to create a new instance as if there were
            no recycler. 
            </summary>
            <param name="cbObj">The callback object token that was stored when setting LBMObjectRecycler in the attributes</param>
            <returns>Either null or a valid LBMEventQueueStatistics object will be returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecyclerBase.doneWithSourceEvent(com.latencybusters.lbm.LBMSourceEvent)">
            <summary>
            If dispose is not called on an LBMSourceEvent in the callback, it is retained for use in the application.
            Once the application is finished with the LBMSourceEvent, it should call dispose and then
            pass it to this method to make it available for reuse, instead of letting it be garbage collected.
            </summary>
            <param name="obj">The LBMSourceEvent object that the application is done with and is ready for reuse</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecyclerBase.retrieveSourceEvent(System.Object)">
            <summary>
            LBM will call this method to attempt to retrieve an LBMSourceEvent object instance that it can use
            instead of creating a new instance to reduce garbage collection.  It will reset the state of
            the LBMSourceEvent once it is retrieved and then use it as if it were a new instance.  Returning null
            causes LBM to create a new instance as if there were no recycler.
            </summary>
            <param name="cbObj">The callback object token that was stored when setting LBMObjectRecycler in the attributes</param>
            <returns>Either null or a valid LBMSourceEvent object will be returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecyclerBase.doneWithContextSourceEvent(com.latencybusters.lbm.LBMContextSourceEvent)">
            <summary>
            If dispose is not called on an LBMContextSourceEvent in the callback, it is retained for use in the application.
            Once the application is finished with the LBMContextSourceEvent, it should call dispose and then
            pass it to this method to make it available for reuse, instead of letting it be garbage collected.
            </summary>
            <param name="obj">The LBMContextSourceEvent object that the application is done with and is ready for reuse</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecyclerBase.retrieveContextSourceEvent(System.Object)">
            <summary>
            LBM will call this method to attempt to retrieve an LBMContextSourceEvent object instance that it can use
            instead of creating a new instance to reduce garbage collection.  It will reset the state of
            the LBMContextSourceEvent once it is retrieved and then use it as if it were a new instance.  Returning null
            causes LBM to create a new instance as if there were no recycler.
            </summary>
            <param name="cbObj">The callback object token that was stored when setting LBMObjectRecycler in the attributes</param>
            <returns>Either null or a valid LBMContextSourceEvent object will be returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecyclerBase.close">
            <summary>
            A method that should be overridden by derived classes, if needed, to provide a way to clean up objects
            referenced by the recycler (like stats objects).  
            </summary>
        </member>
        <member name="T:com.latencybusters.lbm.LBMObjectRecycler">
            <summary>
            Basic implementation of an object recycler that implements all supported LBM object types.
            The size limits for the object pools for each object type can be tuned and should be set
            immediately after instantiating the class and before using any instance of the class.
            This implementation is synchronized on a per object type basis(doneWithMessage/retrieveMessage,
            doneWithReceiverStatistics/retrieveReceiverStatistics, etc) via a thread local pool of objects
            and a synchronized shared pool of objects.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.setLocalMsgPoolSize(System.Int32)">
            <summary>
            Sets the size of the thread local pool of LBMMessages for all LBMObjectRecyclers
            (defaults to 1000)
            </summary>
            <param name="size">the size of the local pool</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.setSharedMsgPoolSize(System.Int32)">
            <summary>
            Sets the size of the shared pool of LBMMessages for all LBMObjectRecyclers 
            (defaults to 2000)
            </summary>
            <param name="size">the size of the shared pool</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.doneWithMessage(com.latencybusters.lbm.LBMMessage)">
            <summary>
            Call when finished with a LBMMessage object.  Call dispose on the message object
            before passing to this method. If the local and shared object limit is reached, 
            it will simply ignore the passed object which will result in it being garbage collected. 
            </summary>
            <param name="obj">The message object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.retrieveMessage(System.Object)">
            <summary>
            LBM will call this method to attempt to retrieve an object that it can reuse.  It will transfer
            a batch of objects from the shared pool when the local pool gets low or will create the objects
            if the shared pool is empty.
            </summary>
            <param name="cbObj">The callback object token that was stored when setting LBMObjectRecycler in the attributes</param>
            <returns>A valid stats object will be returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.getLocalPoolMessageCount">
            <summary>
            Gets the current number of objects in the local pool.
            </summary>
            <returns>The number of objects</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.returnAllMessagesToSharedPool">
            <summary>
            Returns all of the objects in the local pool back to the shared pool.  If the shared
            pool is full, the objects are still removed from the local pool but they are discarded
            and will be garbage collected (and are not counted in the return value as objects that
            were actually returned).
            </summary>
            <returns>The number of objects actually returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.setLocalRcvStatsPoolSize(System.Int32)">
            <summary>
            Sets the size of the thread local pool of LBMReceiverStatistics for all LBMObjectRecyclers
            (defaults to 10)
            </summary>
            <param name="size">the size of the local pool</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.setSharedRcvStatsPoolSize(System.Int32)">
            <summary>
            Sets the size of the shared pool of LBMReceiverStatistics for all LBMObjectRecyclers 
            (defaults to 20)
            </summary>
            <param name="size">the size of the shared pool</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.doneWithReceiverStatistics(com.latencybusters.lbm.LBMReceiverStatistics)">
            <summary>
            Call when finished with a LBMReceiverStatistics object.  Do not call dispose on the stats object
            before passing to this method. If the local and shared object limit is reached, 
            it will simply ignore the passed object which will result in it being garbage collected. 
            </summary>
            <param name="obj">The stats object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.retrieveReceiverStatistics(System.Object)">
            <summary>
            LBM will call this method to attempt to retrieve an object that it can reuse.  It will transfer
            a batch of objects from the shared pool when the local pool gets low or will create the objects
            if the shared pool is empty. 
            </summary>
            <param name="cbObj">The callback object token that was stored when setting LBMObjectRecycler in the attributes</param>
            <returns>A valid stats object will be returned></returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.getLocalPoolReceiverStatisticsCount">
            <summary>
            Gets the current number of objects in the local pool.
            </summary>
            <returns>The number of objects</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.returnAllReceiverStatisticsToSharedPool">
            <summary>
            Returns all of the objects in the local pool back to the shared pool.  If the shared
            pool is full, the objects are still removed from the local pool but they are discarded
            and will be garbage collected (and are not counted in the return value as objects that
            were actually returned).
            </summary>
            <returns>The number of objects actually returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.setLocalSrcStatsPoolSize(System.Int32)">
            <summary>
            Sets the size of the thread local pool of LBMSourceStatistics for all LBMObjectRecyclers
            (defaults to 10)
            </summary>
            <param name="size">the size of the local pool</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.setSharedSrcStatsPoolSize(System.Int32)">
            <summary>
            Sets the size of the shared pool of LBMSourceStatistics for all LBMObjectRecyclers 
            (defaults to 20)
            </summary>
            <param name="size">the size of the shared pool</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.doneWithSourceStatistics(com.latencybusters.lbm.LBMSourceStatistics)">
            <summary>
            Call when finished with a LBMSourceStatistics object.  Do not call dispose on the stats object
            before passing to this method. If the local and shared object limit is reached, 
            it will simply ignore the passed object which will result in it being garbage collected. 
            </summary>
            <param name="obj">The stats object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.retrieveSourceStatistics(System.Object)">
            <summary>
            LBM will call this method to attempt to retrieve an object that it can reuse.  It will transfer
            a batch of objects from the shared pool when the local pool gets low or will create the objects
            if the shared pool is empty. 
            </summary>
            <param name="cbObj">The callback object token that was stored when setting LBMObjectRecycler in the attributes</param>
            <returns>A valid stats object will be returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.getLocalPoolSourceStatisticsCount">
            <summary>
            Gets the current number of objects in the local pool.
            </summary>
            <returns>The number of objects</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.returnAllSourceStatisticsToSharedPool">
            <summary>
            Returns all of the objects in the local pool back to the shared pool.  If the shared
            pool is full, the objects are still removed from the local pool but they are discarded
            and will be garbage collected (and are not counted in the return value as objects that
            were actually returned).
            </summary>
            <returns>The number of objects actually returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.setLocalCtxStatsPoolSize(System.Int32)">
            <summary>
            Sets the size of the thread local pool of LBMContextStatistics for all LBMObjectRecyclers
            (defaults to 10)
            </summary>
            <param name="size">the size of the local pool</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.setSharedCtxStatsPoolSize(System.Int32)">
            <summary>
            Sets the size of the shared pool of LBMContextStatistics for all LBMObjectRecyclers 
            (defaults to 20)
            </summary>
            <param name="size">the size of the shared pool</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.doneWithContextStatistics(com.latencybusters.lbm.LBMContextStatistics)">
            <summary>
            Call when finished with a LBMContextStatistics object.  Do not call dispose on the stats object
            before passing to this method. If the local and shared object limit is reached, 
            it will simply ignore the passed object which will result in it being garbage collected.
            </summary>
            <param name="obj">The stats object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.retrieveContextStatistics(System.Object)">
            <summary>
            LBM will call this method to attempt to retrieve an object that it can reuse.  It will transfer
            a batch of objects from the shared pool when the local pool gets low or will create the objects
            if the shared pool is empty.
            </summary>
            <param name="cbObj">The callback object token that was stored when setting LBMObjectRecycler in the attributes</param>
            <returns>A valid stats object will be returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.getLocalPoolContextStatisticsCount">
            <summary>
            Gets the current number of objects in the local pool.
            </summary>
            <returns>The number of objects</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.returnAllContextStatisticsToSharedPool">
            <summary>
            Returns all of the objects in the local pool back to the shared pool.  If the shared
            pool is full, the objects are still removed from the local pool but they are discarded
            and will be garbage collected (and are not counted in the return value as objects that
            were actually returned).
            </summary>
            <returns>The number of objects actually returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.setLocalIMRcvStatsPoolSize(System.Int32)">
            <summary>
            Sets the size of the thread local pool of LBMImmediateMessageReceiverStatistics for all LBMObjectRecyclers
            (defaults to 10)
            </summary>
            <param name="size">the size of the local pool</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.setSharedIMRcvStatsPoolSize(System.Int32)">
            <summary>
            Sets the size of the shared pool of LBMImmediateMessageReceiverStatistics for all LBMObjectRecyclers 
            (defaults to 20)
            </summary>
            <param name="size">the size of the shared pool</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.doneWithImmediateMessageReceiverStatistics(com.latencybusters.lbm.LBMImmediateMessageReceiverStatistics)">
            <summary>
            Call when finished with a LBMImmediateMessageReceiverStatistics object.  Do not call dispose on the stats object
            before passing to this method. If the local and shared object limit is reached, 
            it will simply ignore the passed object which will result in it being garbage collected.
            </summary>
            <param name="obj">The stats object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.retrieveImmediateMessageReceiverStatistics(System.Object)">
            <summary>
            LBM will call this method to attempt to retrieve an object that it can reuse.  It will transfer
            a batch of objects from the shared pool when the local pool gets low or will create the objects
            if the shared pool is empty. 
            </summary>
            <param name="cbObj">The callback object token that was stored when setting LBMObjectRecycler in the attributes</param>
            <returns>A valid stats object will be returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.getLocalPoolImmediateMessageReceiverStatisticsCount">
            <summary>
            Gets the current number of objects in the local pool.
            </summary>
            <returns>The number of objects</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.returnAllImmediateMessageReceiverStatisticsToSharedPool">
            <summary>
            Returns all of the objects in the local pool back to the shared pool.  If the shared
            pool is full, the objects are still removed from the local pool but they are discarded
            and will be garbage collected (and are not counted in the return value as objects that
            were actually returned).
            </summary>
            <returns>The number of objects actually returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.setLocalIMSrcStatsPoolSize(System.Int32)">
            <summary>
            Sets the size of the thread local pool of LBMImmediateMessageSourceStatistics for all LBMObjectRecyclers
            (defaults to 10)
            </summary>
            <param name="size">the size of the local pool</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.setSharedIMSrcStatsPoolSize(System.Int32)">
            <summary>
            Sets the size of the shared pool of LBMImmediateMessageSourceStatistics for all LBMObjectRecyclers 
            (defaults to 20)
            </summary>
            <param name="size">the size of the shared pool</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.doneWithImmediateMessageSourceStatistics(com.latencybusters.lbm.LBMImmediateMessageSourceStatistics)">
            <summary>
            Call when finished with a LBMImmediateMessageSourceStatistics object.  Do not call dispose on the stats object
            before passing to this method. If the local and shared object limit is reached, 
            it will simply ignore the passed object which will result in it being garbage collected.
            </summary>
            <param name="obj">the stats object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.retrieveImmediateMessageSourceStatistics(System.Object)">
            <summary>
            LBM will call this method to attempt to retrieve an object that it can reuse.  It will transfer
            a batch of objects from the shared pool when the local pool gets low or will create the objects
            if the shared pool is empty.
            </summary>
            <param name="cbObj">The callback object token that was stored when setting LBMObjectRecycler in the attributes</param>
            <returns>A valid stats object will be returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.getLocalPoolImmediateMessageSourceStatisticsCount">
            <summary>
            Gets the current number of objects in the local pool.
            </summary>
            <returns>The number of objects</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.returnAllImmediateMessageSourceStatisticsToSharedPool">
            <summary>
            Returns all of the objects in the local pool back to the shared pool.  If the shared
            pool is full, the objects are still removed from the local pool but they are discarded
            and will be garbage collected (and are not counted in the return value as objects that
            were actually returned).
            </summary>
            <returns>The number of objects actually returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.setLocalEvqStatsPoolSize(System.Int32)">
            <summary>
            Sets the size of the thread local pool of LBMEventQueueStatistics for all LBMObjectRecyclers
            (defaults to 10)
            </summary>
            <param name="size">the size of the local pool</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.setSharedEvqStatsPoolSize(System.Int32)">
            <summary>
            Sets the size of the shared pool of LBMEventQueueStatistics for all LBMObjectRecyclers 
            (defaults to 20)
            </summary>
            <param name="size">the size of the shared pool</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.doneWithEventQueueStatistics(com.latencybusters.lbm.LBMEventQueueStatistics)">
            <summary>
            Call when finished with a LBMEventQueueStatistics object.  Do not call dispose on the stats object
            before passing to this method. If the local and shared object limit is reached, 
            it will simply ignore the passed object which will result in it being garbage collected.
            </summary>
            <param name="obj">The stats object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.retrieveEventQueueStatistics(System.Object)">
            <summary>
            LBM will call this method to attempt to retrieve an object that it can reuse.  It will transfer
            a batch of objects from the shared pool when the local pool gets low or will create the objects
            if the shared pool is empty.
            </summary>
            <param name="cbObj">The callback object token that was stored when setting LBMObjectRecycler in the attributes</param>
            <returns>A valid stats object will be returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.getLocalPoolEventQueueStatisticsCount">
            <summary>
            Gets the current number of objects in the local pool.
            </summary>
            <returns>The number of objects</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.returnAllEventQueueStatisticsToSharedPool">
            <summary>
            Returns all of the objects in the local pool back to the shared pool.  If the shared
            pool is full, the objects are still removed from the local pool but they are discarded
            and will be garbage collected (and are not counted in the return value as objects that
            were actually returned).
            </summary>
            <returns>The number of objects actually returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.setLocalSrcEvsPoolSize(System.Int32)">
            <summary>
            Sets the size of the thread local pool of LBMSourceEvents for all LBMObjectRecyclers
            (defaults to 10)
            </summary>
            <param name="size">the size of the local pool</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.setSharedSrcEvsPoolSize(System.Int32)">
            <summary>
            Sets the size of the shared pool of LBMSourceEvents for all LBMObjectRecyclers 
            (defaults to 20)
            </summary>
            <param name="size">the size of the shared pool</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.doneWithSourceEvent(com.latencybusters.lbm.LBMSourceEvent)">
            <summary>
            Call when finished with a LBMSourceEvent object. If the local and shared object limit is reached, 
            it will simply ignore the passed object which will result in it being garbage collected.
            </summary>
            <param name="obj">The source event object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.retrieveSourceEvent(System.Object)">
            <summary>
            LBM will call this method to attempt to retrieve an object that it can reuse.  It will transfer
            a batch of objects from the shared pool when the local pool gets low or will create the objects
            if the shared pool is empty.
            </summary>
            <param name="cbObj">The callback object token that was stored when setting LBMObjectRecycler in the attributes</param>
            <returns>A valid source event object will be returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.getLocalPoolSourceEventCount">
            <summary>
            Gets the current number of objects in the local pool.
            </summary>
            <returns>The number of objects</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.returnAllSourceEventsToSharedPool">
            <summary>
            Returns all of the objects in the local pool back to the shared pool.  If the shared
            pool is full, the objects are still removed from the local pool but they are discarded
            and will be garbage collected (and are not counted in the return value as objects that
            were actually returned).
            </summary>
            <returns>The number of objects actually returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.setLocalCtxSrcEvsPoolSize(System.Int32)">
            <summary>
            Sets the size of the thread local pool of LBMContextSourceEvents for all LBMObjectRecyclers
            (defaults to 10)
            </summary>
            <param name="size">the size of the local pool</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.setSharedCtxSrcEvsPoolSize(System.Int32)">
            <summary>
            Sets the size of the shared pool of LBMContextSourceEvents for all LBMObjectRecyclers 
            (defaults to 20)
            </summary>
            <param name="size">the size of the shared pool</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.doneWithContextSourceEvent(com.latencybusters.lbm.LBMContextSourceEvent)">
            <summary>
            Call when finished with a LBMContextSourceEvent object. If the local and shared object limit is reached, 
            it will simply ignore the passed object which will result in it being garbage collected.
            </summary>
            <param name="obj">The context source event object</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.retrieveContextSourceEvent(System.Object)">
            <summary>
            LBM will call this method to attempt to retrieve an object that it can reuse.  It will transfer
            a batch of objects from the shared pool when the local pool gets low or will create the objects
            if the shared pool is empty.
            </summary>
            <param name="cbObj">The callback object token that was stored when setting LBMObjectRecycler in the attributes</param>
            <returns>A valid context source event object will be returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.getLocalPoolContextSourceEventCount">
            <summary>
            Gets the current number of objects in the local pool.
            </summary>
            <returns>The number of objects</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.returnAllContextSourceEventsToSharedPool">
            <summary>
            Returns all of the objects in the local pool back to the shared pool.  If the shared
            pool is full, the objects are still removed from the local pool but they are discarded
            and will be garbage collected (and are not counted in the return value as objects that
            were actually returned).
            </summary>
            <returns>The number of objects actually returned</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMObjectRecycler.close">
            <summary>
            A method to clean up all objects referenced by the recycler when the application is closing
            (which will dispose all of the stats objects in the recycler). 
            </summary>
        </member>
        <member name="T:com.latencybusters.lbm.LBMTransportSourceInfo">
            <summary>
            Class that is passed to the source cost callback with source transport information.
            </summary>
            <remarks>
            These members are used to format and/or parse transport source strings.
            The format of these strings depends mainly on the transport type, as shown below.
            <list type="bullet">
            <item>
            TCP:src_ip:src_port[topic_idx]
            <para>example: <tt>TCP:192.168.0.4:45789[1539853954]</tt></para>
            </item>
            <item>
            LBTRM:src_ip:src_port:session_id:mc_group:dest_port[topic_idx]
            <para>example: <tt>LBTRM:10.29.3.88:14390:e0679abb:231.13.13.13:14400[1539853954]</tt></para>
            </item>
            <item>
            LBT-RU:src_ip:src_port:session_id[topic_idx] (session_id optional, per configuration
            <para>example: <tt>LBT-RU:192.168.3.189:34678[1539853954]</tt></para>
            </item>
            <item>
            LBT-IPC:session_id:transport_id[topic_idx]
            <para>example: <tt>LBT-IPC:6481f8d4:20000[1539853954]</tt></para>
            </item>
            <item>
            LBT-RDMA:src_ip:src_port:session_id[topic_idx]
            <para>example: <tt>LBT-RDMA:192.168.3.189:34678:6471e9c4[1539853954]</tt></para>
            </item>
            </list>
            Please note that the topic index field (topic_idx) may or may not be present
            depending on your version of UM and/or the setting for configuration option
            source_includes_topic_index.
            </remarks>
        </member>
        <member name="F:com.latencybusters.lbm.LBMTransportSourceInfo.TRANSPORT_TYPE_TCP">
            <summary>
             Transport type: TCP transport.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBMTransportSourceInfo.TRANSPORT_TYPE_LBTRM">
            <summary>
             Transport type: LBT-RM transport.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBMTransportSourceInfo.TRANSPORT_TYPE_LBTRU">
            <summary>
             Transport type: LBT-RU transport.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBMTransportSourceInfo.TRANSPORT_TYPE_LBTIPC">
            <summary>
            Transport type: LBT-IPC transport.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBMTransportSourceInfo.TRANSPORT_TYPE_LBTRDMA">
            <summary>
            Transport type: LBT-RDMA transport.
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBMTransportSourceInfo.TRANSPORT_TYPE_LBTSMX">
            <summary>
            Transport type: LBT-SMX transport.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTransportSourceInfo.#ctor">
            <summary>
            Class that is passed to the source cost callback with source transport information.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTransportSourceInfo.getType">
            <summary>
            Type of transport
            </summary>
            <returns>the type of transport</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTransportSourceInfo.getSrcIp">
            <summary>
            Source IP address. Applicable only to LBT-RM, LBT-RU, TCP, and LBT-RDMA. Stored in network order.
            </summary>
            <returns>the source ip address</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTransportSourceInfo.getSrcPort">
            <summary>
            Source port. Applicable only to LBT-RM, LBT-RU, TCP, and LBT-RDMA. Stored in host order.
            </summary>
            <returns>the source port</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTransportSourceInfo.getDestPort">
            <summary>
            Destination port. Applicable only to LBT-RM. Stored in host order.
            </summary>
            <returns>the destination port</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTransportSourceInfo.getMCGroup">
            <summary>
            Multicast group. Applicable only to LBT-RM. Stored in network order.
            </summary>
            <returns>the multicast group</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTransportSourceInfo.getTransportId">
            <summary>
            Transport ID. Applicable only to LBT-IPC. Stored in host order.
            </summary>
            <returns>the transport id</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTransportSourceInfo.getSessionId">
            <summary>
            Session ID. Applicable only to LBT-RM, LBT-RU, and LBT-IPC. Stored in host order.
            </summary>
            <returns>the session id</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMTransportSourceInfo.getTopicIdx">
            <summary>
            Topic index. Applicable to all transports. Stored in host order.
            </summary>
            <returns>the topic index</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMMessageProperty">
            <summary>
            Represents a key-value pair included with an LBMMessage object.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperty.set(System.Byte)">
            <summary> Set the value of the property to the value specified, and change the type to LBM.MSG_PROPERTY_BYTE.</summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperty.set(System.Int16)">
            <summary> Set the value of the property to the value specified, and change the type to LBM.MSG_PROPERTY_SHORT.</summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperty.set(System.Int32)">
            <summary> Set the value of the property to the value specified, and change the type to LBM.MSG_PROPERTY_INT.</summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperty.set(System.Int64)">
            <summary> Set the value of the property to the value specified, and change the type to LBM.MSG_PROPERTY_LONG.</summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperty.set(System.Single)">
            <summary> Set the value of the property to the value specified, and change the type to LBM.MSG_PROPERTY_FLOAT.</summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperty.set(System.Double)">
            <summary> Set the value of the property to the value specified, and change the type to LBM.MSG_PROPERTY_DOUBLE.</summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperty.set(System.String)">
            <summary> Set the value of the property to the value specified, and change the type to LBM.MSG_PROPERTY_STRING.</summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperty.set(System.Boolean)">
            <summary> Set the value of the property to the value specified, and change the type to LBM.MSG_PROPERTY_BOOLEAN.</summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperty.key">
            <summary>Retrieve the name of the property represented by this object.</summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperty.type">
            <summary>Retrieve the type of the property represented by this object.</summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperty.getBoolean">
            <summary>Retrieve the value stored in this object as a bool. Only properties of
              type LBM.MSG_PROPERTY_BOOLEAN and LBM.MSG_PROPERTY_STRING can be retrieved as
            a bool.</summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperty.getByte">
            <summary> Retrieve the value stored in this object as a byte. Only properties of
              type LBM.MSG_PROPERTY_BYTE and LBM.MSG_PROPERTY_STRING can be retrieved as
            a byte.</summary>
            <returns>The stored value, converted to a System.Byte.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperty.getShort">
            <summary> Retrieve the value stored in this object as a short. Only properties of
              type LBM.MSG_PROPERTY_BYTE, LBM.MSG_PROPERTY_SHORT, and LBM.MSG_PROPERTY_STRING can be retrieved as
            a short.</summary>
            <returns>The stored value, converted to a System.Short.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperty.getInteger">
            <summary> Retrieve the value stored in this object as a integer. Only properties of
              type LBM.MSG_PROPERTY_BYTE, LBM.MSG_PROPERTY_SHORT, LBM.MSG_PROPERTY_INT, and 
             LBM.MSG_PROPERTY_STRING can be retrieved as a integer.</summary>
            <returns>The stored value, converted to a System.Integer.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperty.getLong">
            <summary> Retrieve the value stored in this object as a long. Only properties of
              type LBM.MSG_PROPERTY_BYTE, LBM.MSG_PROPERTY_SHORT, LBM.MSG_PROPERTY_INT, LBM.MSG_PROPERTY_LONG and 
             LBM.MSG_PROPERTY_STRING can be retrieved as a long.</summary>
            <returns>The stored value, converted to a System.Long.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperty.getFloat">
            <summary> Retrieve the value stored in this object as a float. Only properties of
             type LBM.MSG_PROPERTY_FLOAT and LBM.MSG_PROPERTY_STRING can be retrieved as
             a float.</summary>
            <returns>The stored value, converted to a System.Float.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperty.getDouble">
            <summary> Retrieve the value stored in this object as a double. Only properties of
             type LBM.MSG_PROPERTY_FLOAT, LBM.MSG_PROPERTY_DOUBLE and LBM.MSG_PROPERTY_STRING can be retrieved as
             a double.</summary>
            <returns>The stored value, converted to a System.Double.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperty.getString">
            <summary> Retrieve the value stored in this object as a string. Any type may be retrieved as a string.</summary>
            <returns>The stored value, converted to a System.String.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMMessageProperties">
            <summary>
            Represents a collection of properties contained in an LBMMessage object.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperties.#ctor">
            <summary>Create an LBMMessageProperties object, used to associate properties with
            an outgoing message</summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperties.#ctor(com.latencybusters.lbm.lbm_msg_properties_t*)">
            <summary>Create a properties object from a native properties struct</summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperties.clear">
            <summary>Clear all properties from this object.</summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperties.clear(System.String)">
            <summary>Clear the property with the specified key from this object.</summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperties.set(System.String,System.Byte)">
            <summary> Set a property to the provided byte value.  </summary>
            <param name="key">The name of the property to be set</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperties.set(System.String,System.Int16)">
            <summary> Set a property to the provided short value.  </summary>
            <param name="key">The name of the property to be set</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperties.set(System.String,System.Int32)">
            <summary> Set a property to the provided int value.  </summary>
            <param name="key">The name of the property to be set</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperties.set(System.String,System.Int64)">
            <summary> Set a property to the provided long value.  </summary>
            <param name="key">The name of the property to be set</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperties.set(System.String,System.Single)">
            <summary> Set a property to the provided float value.  </summary>
            <param name="key">The name of the property to be set</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperties.set(System.String,System.Double)">
            <summary> Set a property to the provided double value.  </summary>
            <param name="key">The name of the property to be set</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperties.set(System.String,System.Boolean)">
            <summary> Set a property to the provided boolean value.  </summary>
            <param name="key">The name of the property to be set</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperties.set(System.String,System.String)">
            <summary> Set a property to the provided string value.  </summary>
            <param name="key">The name of the property to be set</param>
            <param name="value">The value to be set</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperties.containsKey(System.String)">
            <summary> Test if the specified key is contained in the properties object.  </summary>
            <param name="key">The name of the property </param>
            <returns>True if the property has been set, False if the property isn't set.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperties.getBoolean(System.String)">
            <summary>Get the property with the specified key as a boolean.</summary>
            <param name="key">The name of the property</param>
            <returns>The value of the property, converted to a boolean if necessary.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperties.getByte(System.String)">
            <summary>Get the property with the specified key as a byte.</summary>
            <param name="key">The name of the property</param>
            <returns>The value of the property, converted to a byte if necessary.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperties.getShort(System.String)">
            <summary>Get the property with the specified key as a short.</summary>
            <param name="key">The name of the property</param>
            <returns>The value of the property, converted to a short if necessary.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperties.getInteger(System.String)">
            <summary>Get the property with the specified key as a integer.</summary>
            <param name="key">The name of the property</param>
            <returns>The value of the property, converted to a integer if necessary.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperties.getLong(System.String)">
            <summary>Get the property with the specified key as a long.</summary>
            <param name="key">The name of the property</param>
            <returns>The value of the property, converted to a long if necessary.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperties.getFloat(System.String)">
            <summary>Get the property with the specified key as a float.</summary>
            <param name="key">The name of the property</param>
            <returns>The value of the property, converted to a float if necessary.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperties.getDouble(System.String)">
            <summary>Get the property with the specified key as a double.</summary>
            <param name="key">The name of the property</param>
            <returns>The value of the property, converted to a double if necessary.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMMessageProperties.getString(System.String)">
            <summary>Get the property with the specified key as a string.</summary>
            <param name="key">The name of the property</param>
            <returns>The value of the property, converted to a string if necessary.</returns>
        </member>
        <member name="T:com.latencybusters.lbm.lbm_msg_properties_t">
            <summary>
            Structure passed in via lbm_source_send_ex_info_t
            </summary>
        </member>
        <member name="T:com.latencybusters.lbm.LBMUMMInfo">
            <summary>
            LBM UMM options class.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMUMMInfo.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
            Instantiate an LBM UMM Info object.
            </summary>
            <param name="_applicationName">The application name. Must not exceed LBM.LBM_UMM_APP_NAME_LENGTH_MAX length.</param>
            <param name="_userName">The UMM user name. Must not exceed LBM.LBM_UMM_USER_NAME_LENGTH_MAX length.</param>
            <param name="_password">The UMM password. Must not exceed LBM.LBM_UMM_PASSWORD_LENGTH_MAX length.</param>
            <param name="_servers">The list of servers to attempt connections to. Servers are specified with a string in "ip:port" format. The servers are tried in round-robin fashion starting with index 0. Number of servers must not exceed LBM.LBM_UMM_NUM_SERVERS_MAX.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMUMMInfo.#ctor(System.String,System.String,System.String,System.String[],System.UInt32)">
            <summary>
            Instantiate an LBM UMM Info object.
            </summary>
            <param name="_applicationName">The application name. Must not exceed LBM.LBM_UMM_APP_NAME_LENGTH_MAX length.</param>
            <param name="_userName">The UMM user name. Must not exceed LBM.LBM_UMM_USER_NAME_LENGTH_MAX length.</param>
            <param name="_password">The UMM password. Must not exceed LBM.LBM_UMM_PASSWORD_LENGTH_MAX length.</param>
            <param name="_servers">The list of servers to attempt connections to. Servers are specified with a string in "ip:port" format. The servers are tried in round-robin fashion starting with index 0. Number of servers must not exceed LBM.LBM_UMM_NUM_SERVERS_MAX.</param>
            <param name="_flags">Flags to enable usage of SSL.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMUMMInfo.#ctor(System.String,System.String,System.String,System.String[],System.UInt32,System.String)">
            <summary>
            Instantiate an LBM UMM Info object.
            </summary>
            <param name="_applicationName">The application name. Must not exceed LBM.LBM_UMM_APP_NAME_LENGTH_MAX length.</param>
            <param name="_userName">The UMM user name. Must not exceed LBM.LBM_UMM_USER_NAME_LENGTH_MAX length.</param>
            <param name="_password">The UMM password. Must not exceed LBM.LBM_UMM_PASSWORD_LENGTH_MAX length.</param>
            <param name="_servers">The list of servers to attempt connections to. Servers are specified with a string in "ip:port" format. The servers are tried in round-robin fashion starting with index 0. Number of servers must not exceed LBM.LBM_UMM_NUM_SERVERS_MAX.</param>
            <param name="_flags">Flags to enable usage of SSL.</param>
            <param name="_certFile">Path to a pem-encoded certificate file. If specified, SSL is enabled and certificate is used to validate the UMM daemon identity.</param>
        </member>
        <member name="M:com.latencybusters.lbm.LBMUMMInfo.#ctor(System.String,System.String,System.String,System.String[],System.UInt32,System.String,System.String)">
            <summary>
            Instantiate an LBM UMM Info object.
            </summary>
            <param name="_applicationName">The application name. Must not exceed LBM.LBM_UMM_APP_NAME_LENGTH_MAX length.</param>
            <param name="_userName">The UMM user name. Must not exceed LBM.LBM_UMM_USER_NAME_LENGTH_MAX length.</param>
            <param name="_password">The UMM password. Must not exceed LBM.LBM_UMM_PASSWORD_LENGTH_MAX length.</param>
            <param name="_servers">The list of servers to attempt connections to. Servers are specified with a string in "ip:port" format. The servers are tried in round-robin fashion starting with index 0. Number of servers must not exceed LBM.LBM_UMM_NUM_SERVERS_MAX.</param>
            <param name="_flags">Flags to enable usage of SSL.</param>
            <param name="_certFile">Path to a pem-encoded certificate file. If specified, SSL is enabled and certificate is used to validate the UMM daemon identity.</param>
            <param name="_certFilePassword">Certificate file password. Required only if certificate file is password-protected.</param>
        </member>
        <member name="T:com.latencybusters.lbm.UMEReceiverLivenessCallbackInfo">
            <summary>
            Class that is passed to the receiver liveness creation and deletion callback with receiver information.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMEReceiverLivenessCallbackInfo.#ctor">
            <summary>
            Class that is passed to the receiver liveness creation and deletion callbacks with receiver information.
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.UMEReceiverLivenessCallbackInfo.getFlags">
            <summary>
            Why receiver is being deleted (TIMEOUT or EOF)
            </summary>
            <returns>the flags</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMEReceiverLivenessCallbackInfo.getUserRcvRegId">
            <summary>
            The receiving application context's configured user rcv regid.
            </summary>
            <returns>receiving application context's configured user rcv regid.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.UMEReceiverLivenessCallbackInfo.getSessionId">
            <summary>
            The receiving application's configured session id.
            </summary>
            <returns>receiving application's configured session id</returns>
        </member>
        <member name="T:com.latencybusters.lbm.LBMEMessageSelectorException">
            <summary>
            LBM message selector exception class
            </summary>
        </member>
        <member name="M:com.latencybusters.lbm.LBMEMessageSelectorException.#ctor(System.String)">
            <summary>
            Instantiate LBMEMessageSelectorException class
            </summary>
            <param name="errorMessage">Exception error message</param>
        </member>
        <member name="T:com.latencybusters.lbm.LBMLbtSmxTransport">
            <summary>
             Encapsulates an SMX transport, inherited by both source and receiver transport
            </summary>
        </member>
        <member name="F:com.latencybusters.lbm.LBMLbtSmxTransport.shm">
            maximum number of receivers 
        </member>
        <member name="M:com.latencybusters.lbm.LBMLbtSmxTransportSource.buffAcquire(System.Byte*@,System.UInt64,System.Int32)">
            <summary>
            Acquire a chunk of shared memory to write into. Does not write msg headers.
            </summary>
            <param name="bufp"></param>
            <param name="len"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMLbtSmxTransportSource.buffsComplete">
            <summary>
            Updates shared memory dqwords committed value with what this
            transport has reserved so far.
            </summary>
            <returns>0 on success, otherwise error.</returns>
        </member>
        <member name="M:com.latencybusters.lbm.LBMLbtSmxTransportSource.buffsCompleteNoBarrier">
            <summary>
            Updates shared memory dqwords committed value with what this
            transport has reserved so far.
            </summary>
            <returns>0 on success, otherwise error.</returns>
        </member>
    </members>
</doc>
